{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http:{www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvQExStdCtrls.pas, released on 2004-09-21

The Initial Developer of the Original Code is André Snepvangers [asn att xs4all dott nl]
Portions created by André Snepvangers are Copyright (C) 2004 André Snepvangers.
All Rights Reserved.


You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http:(jvcl.sourceforge.net

Description:

This file contains macro's needed to build the JvExCLX classes.
You need the Pascal PreProcessor (dpp) from Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
to process these files.
It is included in JVCL 3: devtools\dpp32

Known Issues:
-----------------------------------------------------------------------------}

// This comment is inserted into every JvQExXxx.pas file
(*$DEFINE WARNINGHEADER
{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExCLX/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}
*)

(*$DEFINE UNITVERSION
const
  UnitVersion = '$Id $';

initialization
  OutputDebugString(PChar('Opened ' + UnitVersion));

finalization
  OutputDebugString(PChar('Closed ' + UnitVersion));
EMPTYLINE
*)

{$UNDEF CREATE_CUSTOMCODE}
{$UNDEF DESTROY_CUSTOMCODE}
{$UNDEF IFISNOTCUSTOMFORM}

{$DEFINE EMPTYLINE}
{$DEFINE CREATE_CUSTOMCODE}
{$DEFINE DESTROY_CUSTOMCODE}
{$DEFINE IFISNOTCUSTOMFORM}

//  Name                  Implements
//  JV_CONTROL            WndProc, HintColor, Perform, CMFocusChanged,
//                        FocusChanged, DoFocusChanged (deprecated),
//                        ColorToRGB, OnParentColorChange, AboutJVCLX
//
//  JV_CUSTOMCONTROL      WMEraseBkGround, CMFontChanged,
//                        JV_CONTROL
//
//  JV_WINCUSTOMCONTROL   Paint,
//                        JV_CUSTOMCONTROL
//
//  JV_WINCONTROL         Canvas,
//                        JV_WINCUSTOMCONTROL
//
//  JV_EDITCONTROL        ClipboardCmds, Clear, CopyToClipboard, CutToClipboard,
//                        PasteFromClipBoard, Undo, EMSetRect, EMGetRect.
//                        JV_WINCONTROL
//
//  JV_CUSTOMFORM         JV_CUSTOMCONTROL
//
//
//  TWidgetControl VCL compatibility methods
//  protected
//    procedure CreateWnd; virtual;
//    procedure RecreateWnd;
//    procedure Paint;
//    procedure PaintWindow(PaintDevice: QPaintDeviceH);
//    procedure WndProc(var Message: TMessage); virtual;
//  public
//    function IsRightToLeft: Boolean;
//    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
//    procedure Perform(var Message);

// *************************************************************************
// *************************** INTERFACE MACROS ****************************
// *************************************************************************


(*$DEFINE JV_DECL_CONTROL
  { QControl }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FDragCursor: TCursor;
    FDragKind: TDragKind;
    FHintColor: TColor;
    FOnParentColorChanged: TNotifyEvent;
    procedure CMFocusChanged(var Message: TMessage); message CM_FOCUSCHANGED;
    procedure CMFontChanged(var Message: TMessage); message CM_FONTCHANGED;
  protected
    function HintShow(var HintInfo : THintInfo): Boolean; override;
    procedure ParentColorChanged; override;
    procedure WndProc(var Msg: TMessage); virtual;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
    property DragCursor: TCursor read FDragCursor write FDragCursor default crDefault; { not implemented }
    property DragKind: TDragKind read FDragKind write FDragKind  default dkDrag; { not implemented }
  public
    procedure Dispatch(var Message); override;
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
    property HintColor: TColor read FHintColor write FHintColor default clDefault;
*)

(*$DEFINE JV_CONTROL_BEGIN(ClassName)
  { QControl begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
*)

(*$DEFINE JV_CONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CONTROL(ClassName)
  JV_CONTROL_BEGIN(ClassName)
  JV_CONTROL_END(ClassName)
*)

//
//  used by WinCustomControl, WinControl, CustomControl, EditControl
//
(*$DEFINE JV_DECL_WINCUSTOMCONTROL
  { QWinCustomControl }
  private
    FNativeKeys: TInputKeys;
    FDoubleBuffered: Boolean;
    procedure OnFontChanged(Sender: TObject);
    procedure WMEraseBkGnd(var Message: TMessage); message WM_ERASEBKGND;
  protected
    procedure CreateWidget; override;
    procedure CreateWnd; virtual;
    procedure DoKillFocus(Wnd: HWND); dynamic;
    procedure DoSetFocus(Wnd: HWND); dynamic;
    procedure GotFocus; dynamic;
    procedure LostFocus; dynamic;
    procedure ColorChanged; override;
    function EraseBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    procedure RecreateWnd;
    function WidgetFlags: Integer; override;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
*)

//
// WidgetControls without a Paint method.
//
(*$DEFINE JV_DECL_WINCONTROL_PAINT
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
*)

(*$DEFINE JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  { QWinCustomControl }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL_PAINT
*)

(*$DEFINE JV_WINCUSTOMCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL(ClassName)
  JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  JV_WINCUSTOMCONTROL_END(ClassName)
*)

//
// WidgetControls without a Canvas property.
//
(*$DEFINE JV_DECL_WINCONTROL
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
*)

(*$DEFINE JV_WINCONTROL_BEGIN(ClassName)
  { QWinControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL_PAINT
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_WINCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  published
    property Style default dsSystemDefault;
  end;
  EMPTYLINE
*)

(*$DEFINE JV_WINCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)

//
// WidgetControls with a Paint method.
//

(*$DEFINE JV_CUSTOMCONTROL_BEGIN(ClassName)
  { QCustomControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
*)

(*$DEFINE JV_CUSTOMCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMCONTROL(ClassName)
  JV_CUSTOMCONTROL_BEGIN(ClassName)
  JV_CUSTOMCONTROL_END(ClassName)
*)

(*$DEFINE JV_DECL_EDITCONTROL
  { QEditControl }
  private
    FClipboardCommands: TJvClipboardCommands;
    FEditRect: TRect; // EM_GETRECT
    procedure EMGetRect(var Msg: TMessage); message EM_GETRECT;
    procedure EMSetRect(var Msg: TMessage); message EM_SETRECT;
  protected
    procedure SetClipboardCommands(const Value: TJvClipboardCommands); virtual;
  public
    procedure PasteFromClipboard; override;
    procedure CopyToClipboard; override;
    procedure Clear; override;
    procedure CutToClipboard; override;
    procedure Undo; override;
  published
    property ClipboardCommands: TJvClipboardCommands read FClipboardCommands
      write SetClipboardCommands default [caCopy..caUndo];
*)

(*$DEFINE JV_EDITCONTROL_BEGIN(ClassName)
  { QEditControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL_PAINT
  JV_DECL_WINCONTROL
  JV_DECL_EDITCONTROL
*)

(*$DEFINE JV_EDITCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QEditControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_EDITCONTROL(ClassName)
  JV_EDITCONTROL_BEGIN(ClassName)
  JV_EDITCONTROL_END(ClassName)
*)

//
// CustomForm
//

(*$DEFINE JV_DECL_CUSTOMFORM
  { CustomForm }
  public
    constructor CreateNew(AOwner: TComponent; Dummy: Integer = 0); override;
*)

(*$DEFINE JV_CUSTOMFORM_BEGIN(ClassName)
  { QCustomForm }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CUSTOMFORM
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_CUSTOMFORM_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomForm }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMFORM(ClassName)
  JV_CUSTOMFORM_BEGIN(ClassName)
  JV_CUSTOMFORM_END(ClassName)
*)


// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************

(*$DEFINE JV_IMPL_CONTROL(ClassName)
{ QControl }
procedure TJvEx##ClassName.CMFocusChanged(var Message: TMessage);
begin
  FocusChanged;
end;

procedure TJvEx##ClassName.CMFontChanged(var Message: TMessage);
begin
  FontChanged;
end;

procedure TJvEx##ClassName.FontChanged;
begin
  Canvas.Font.Assign := Font;
end;

function TJvEx##ClassName.HintShow(var HintInfo : THintInfo): Boolean;
begin
  case HintColor of
  clNone, ClDefault: HintInfo.HintColor := GetHintColor(Self.Parent);
  else
    HintInfo.HintColor := HintColor;
  end;
  Result := inherited HintShow(HintInfo);
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

procedure TJvEx##ClassName.Dispatch(var Message);
begin
  WndProc(Message);
end;

procedure TJvEx##ClassName.WndProc(var Msg: TMessage);
begin
  inherited Dispatch(Msg);
end;

function TJvEx##ClassName.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    Dispatch(Mesg);
    Result := Mesg.Result;
  end;
end;

function TJvEx##ClassName.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CONTROL

(*$DEFINE JV_IMPL_CONTROL_CREATE(ClassName)
{ QControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FHintColor := clDefault;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
 EMPTYLINE
*)

(*$DEFINE JV_CONTROL_IMPL(ClassName)
JV_IMPL_CONTROL_CREATE(ClassName)

procedure TJvEx##ClassName.FocusChanged;
begin
  { notification }
end;

JV_IMPL_CONTROL(ClassName)

*)

//
// Used by all JvQEx* classes except for QControl
//

(*$DEFINE JV_IMPL_WINCUSTOMCONTROL(ClassName)
{ QWinCustomControl }
procedure TJvEx##ClassName.WMEraseBkGnd(var Message: TJvMessage);
begin
  Canvas.Start;
  try
    with Message do
      Handled := PaintBackGround(Canvas, LParam);
  finally
    Canvas.Stop;
  end;
end;

procedure TJvEx##ClassName.DoSetFocus(FocusedWnd: QWidgetH);
begin
  { notification }
end;

procedure TJvEx##ClassName.DoKillFocus(FocusedWnd: QWidgetH);
begin
  { notification }
end;

procedure TJvEx##ClassName.GotFocus;
begin
  { notification }
end;

procedure TJvEx##ClassName.LostFocus;
begin
  { notification }
end;

function TJvEx##ClassName.DoEraseBackground(Canvas: TCanvas; Param: Integer): Boolean;
begin
  Result := false;
end;

procedure TJvEx##ClassName.OnFontChanged(Sender: TObject);
begin
  ParentFont := False;
  if Font.Height <> FFontHeight then
  begin
    Include(ScalingFlags, sfFont);
    FFontHeight := Font.Height;
  end;
  PostMessage(Self, CM_FONTCHANGED, 0, 0);
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

procedure TJvEx##ClassName.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvEx##ClassName.CreateWnd;
begin
  inherited CreateWidget;
end;

procedure TJvEx##ClassName.FocusChanged;
begin
  NotifyControls(CM_FOCUSCHANGED);
end;

procedure TJvEx##ClassName.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvEx##ClassName.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  TControlCanvas(Canvas).StartPaint;
  try
    Canvas.Brush.Assign(Brush);
    Canvas.Font.Assign(Font);
    RequiredState(Canvas, [csHandleValid, csFontValid, csBrushValid]);
    Paint;
  finally
    TControlCanvas(Canvas).StopPaint;
  end;
end;

procedure TJvEx##ClassName.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(self, PaintDevice, X, Y);
end;

procedure TJvEx##ClassName.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  PaintTo(PaintDevice, 0, 0);
end;

function TJvEx##ClassName.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvEx##ClassName.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  EMPTYLINE
*) // MACRO END WINCUSTOMCONTROL

//
// implement paint for native Qt Widgets.
//
(*$DEFINE JV_IMPL_WINCONTROL_PAINT(ClassName)
{ WinControl Paint }
procedure TJvEx##ClassName.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
end;
  EMPTYLINE
*)

//
// used by CustomControl, WinCustomControl & CustomForm
//

(*$DEFINE JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
{ QWinCustomControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL_IMPL(ClassName)
JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
JV_IMPL_WINCUSTOMCONTROL(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_CUSTOMCONTROL_IMPL(ClassName)
   JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
   JV_IMPL_WINCUSTOMCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)

procedure TJvEx##ClassName.FocusChanged;
begin
  NotifyControls(CM_FOCUSCHANGED);
end;
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_WINCONTROL_CREATE(ClassName)
{ QWinControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE;
  FCanvas.Destroy;
  inherited Destroy;
end;
  EMPTYLINE
*) // end macro JV_IMPL_WINCONTROL_CREATE


(*$DEFINE JV_WINCONTROL_IMPL(ClassName)
JV_IMPL_WINCONTROL_CREATE(ClassName)
JV_IMPL_WINCUSTOMCONTROL(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_EDITCONTROL(ClassName)
{ QEditControl }

procedure TJvEx##ClassName.SetClipboardCommands(const Value: TJvClipboardCommands);
begin
  FClipboardCommands := Value;
end;

procedure TJvEx##ClassName.Undo;
begin
  if caUndo in ClipboardCommands then
    inherited Undo;
end;

procedure TJvEx##ClassName.CopyToClipboard;
begin
  if caCopy in ClipboardCommands then
    inherited CopyToClipboard;
end;

procedure TJvEx##ClassName.CutToClipboard;
begin
  if caCut in ClipboardCommands then
    inherited CutToClipboard;
end;

procedure TJvEx##ClassName.Clear;
begin
  if caClear in ClipboardCommands then
    inherited Clear;
end;

procedure TJvEx##ClassName.PasteFromClipboard;
begin
  if caPaste in ClipboardCommands then
    inherited PasteFromClipboard;
end;

procedure TJvEx##ClassName.EMGetRect(var Msg: TJvMessage);
begin
  if IsRectEmpty(FEditRect) then
  begin
    Msg.Rect := @ClientRect;
    if Self.BorderStyle = bsSingle then
      InflateRect(Msg.Rect , -2, -2);
  end
  else
    Msg.Rect := @FEditRect;
end;

procedure TJvEx##ClassName.EMSetRect(var Msg: TJvMessage);
begin
  if Msg.Rect <> 0 then
    FEditRect := Msg.Rect^;
  else
    FEditRect := ClientRect;
  Invalidate;
end;

*) // end of JV_IMPL_EDITCONTROL


(*$DEFINE JV_EDITCONTROL_IMPL(ClassName)
JV_IMPL_WINCONTROL_CREATE(ClassName)
JV_IMPL_EDITCONTROL(ClassName)
JV_IMPL_WINCUSTOMCONTROL(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_CUSTOMFORM(ClassName)
{ QCustomForm }
constructor TJvEx##ClassName.CreateNew(AOwner: TComponent; Dummy: Integer);
begin
  inherited CreateNew(AOwner, Dummy);
  FHintColor := clDefault;
//  FDoubleBuffered := True;
  Font.OnChange := OnFontChanged;
  CREATE_CUSTOMCODE
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CUSTOMFORM

// ************************************************

(*$DEFINE JV_CUSTOMFORM_IMPL(ClassName)
JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
JV_IMPL_CUSTOMFORM(ClassName)
JV_IMPL_WINCUSTOMCONTROL(ClassName)
JV_IMPL_CUSTOMCONTROL_PAINT(ClassName)
JV_IMPL_CONTROL(ClassName)
*)



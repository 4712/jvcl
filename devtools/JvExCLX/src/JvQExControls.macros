{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http:{www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvQExControls.macros, released on 2004-09-21

The Initial Developer of the Original Code is André Snepvangers [asn att xs4all dott nl]
Portions created by André Snepvangers are Copyright (C) 2004 André Snepvangers.
All Rights Reserved.


You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http:(jvcl.sourceforge.net

Description:

This file contains macro's needed to build the JvExCLX classes.
You need the Pascal PreProcessor (dpp) from Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
to process these files.
It is included in JVCL 3: devtools\dpp32

Known Issues:
-----------------------------------------------------------------------------}

// This comment is inserted into every JvQExXxx.pas file
(*$DEFINE WARNINGHEADER
{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExCLX/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}
*)


{$UNDEF CREATE_CUSTOMCODE}
{$UNDEF DESTROY_CUSTOMCODE}
{$UNDEF IFISNOTCUSTOMFORM}
{$UNDEF HITTEST_DECL}
{$UNDEF HITTEST_CODE}

{$DEFINE EMPTYLINE}
{$DEFINE CREATE_CUSTOMCODE}
{$DEFINE DESTROY_CUSTOMCODE}
{$DEFINE IFISNOTCUSTOMFORM}

(*$DEFINE UNITVERSION
const
  UnitVersion = UnitName;

initialization
  OutputDebugString(PChar('JvExCLX Loaded: ' + UnitVersion));

finalization
  OutputDebugString(PChar('JvExCLX Unloaded: ' + UnitVersion));
EMPTYLINE
*)

// *************************************************************************
// *************************** INTERFACE MACROS ****************************
// *************************************************************************
{$DEFINE HITTEST_DECL override}

(*$DEFINE JV_DECL_CONTROL
  { QControl }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FDesktopFont: Boolean;
    FDragCursor: TCursor;
    FDragKind: TDragKind;
    FHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
    FWindowProc: TWndMethod;
    procedure SetDesktopFont(Value: Boolean);
    procedure CMDesignHitTest(var Mesg: TJvMessage); message CM_DESIGNHITTEST;
    procedure CMHitTest(var Mesg: TJvMessage); message CM_HITTEST;
    procedure CMHintShow(var Mesg: TJvMessage); message CM_HINTSHOW;
    procedure CMSysFontChanged(var Mesg: TMessage); message CM_SYSFONTCHANGED;
  protected
    procedure ColorChanged; override;
    procedure EnabledChanged; override;
    procedure FocusChanged; dynamic;
    function HitTest(X, Y: integer): Boolean; HITTEST_DECL;
    procedure ParentColorChanged; override;
    procedure TextChanged; override;
    procedure VisibleChanged; override;
    function HintShow(var HintInfo : THintInfo): Boolean; override;
    procedure WndProc(var Mesg: TMessage); dynamic;
    property DragCursor: TCursor read FDragCursor write FDragCursor default crDefault; { not implemented }
    property DragKind: TDragKind read FDragKind write FDragKind  default dkDrag; { not implemented }
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
    property DesktopFont: Boolean read FDesktopFont write SetDesktopFont default false;
  public
    procedure Dispatch(var Mesg); override;
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
    property WindowProc: TWndMethod read FWindowProc write FWindowProc;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
    property HintColor: TColor read FHintColor write FHintColor default clDefault;
*)

(*$DEFINE JV_CONTROL_BEGIN(ClassName)
  { QControl begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
*)

(*$DEFINE JV_CONTROL_END(ClassName)
  protected
    procedure FontChanged; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CONTROL(ClassName)
  JV_CONTROL_BEGIN(ClassName)
  JV_CONTROL_END(ClassName)
*)

//
//  used by WinCustomControl, WinControl, CustomControl, EditControl
//
(*$DEFINE JV_DECL_WINCONTROL
  { QWinControl }
  private
    FInternalFontChanged: TNotifyEvent;
    procedure DoOnFontChanged(Sender: TObject);
  protected
    procedure CreateWidget; override;
    procedure CreateWnd; virtual;
    procedure CursorChanged; override;
    procedure DoEnter; override;
    function DoEraseBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
    procedure DoExit; override;
    procedure DoKillFocus(NextWnd: HWND); dynamic;
    procedure DoSetFocus(PreviousWnd: HWND); dynamic;
    function EventFilter(Receiver: QObjectH; Event: QEventH): Boolean; override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    procedure RecreateWnd;
    procedure ShowingChanged; override;
    function WidgetFlags: Integer; override;
  public
    function ColorToRGB(Value: TColor): TColor;
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    procedure SetFocus; override;
*)
//
// WidgetControls without a Canvas property.
// used by WinControl & EditControl
//
(*$DEFINE JV_WINCONTROL_END(ClassName)
  { QWinControl }
  private
    FCanvas: TControlCanvas;
    FDoubleBuffered: Boolean;
    function GetCanvas: TCanvas;
  protected
    procedure Paint; virtual;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    property Canvas: TCanvas read GetCanvas;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  end;

  { QWinControl }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  end;
  EMPTYLINE
*)

//
// ListViews, TreeViews, IconViews, Forms with a Canvas.
// - No Doublebuffering
// - No Paint override;
//
(*$DEFINE JV_WINCUSTOMCONTROL_END(ClassName)
  { QWinCustomControl }
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

//
// CustomControls do not require Paint & Canvas
// but have doublebuffered paint
//
(*$DEFINE JV_CUSTOMCONTROL_END(ClassName)
  protected
    FDoubleBuffered: Boolean;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  end;

  { QCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMFORM_END(ClassName)
  { QCustomForm }
  public
    constructor Create(AOwner: TComponent); override;
    constructor CreateNew(AOwner: TComponent; Dummy: Integer = 0); override;
    destructor Destroy; override;
  end;

  TJvExPub##ClassName = class(TJvEx##ClassName)
  end;
  EMPTYLINE
*)


(*$DEFINE JV_WINCONTROL_BEGIN(ClassName)
  { QWinControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  { QWinCustomControl }
  JV_WINCONTROL_BEGIN(ClassName)
*)

(*$DEFINE JV_CUSTOMCONTROL_BEGIN(ClassName)
  { QCustomControl Begin }
  JV_WINCONTROL_BEGIN(ClassName)
*)

(*$DEFINE JV_CUSTOMFORM_BEGIN(ClassName)
  { QCustomForm }
  JV_WINCONTROL_BEGIN(ClassName)
*)

(*$DEFINE JV_WINCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)

(*$DEFINE JV_WINCUSTOMCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_WINCUSTOMCONTROL_END(ClassName)
*)


(*$DEFINE JV_CUSTOMCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_CUSTOMCONTROL_END(ClassName)
*)

(*$DEFINE JV_CUSTOMFORM(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_CUSTOMFORM_END(ClassName)
*)


(*$DEFINE JV_DECL_EDITCONTROL
  { QEditControl }
  private
    FClipboardCommands: TJvClipboardCommands;
    procedure WMClear(var Mesg: TMessage); message WM_CLEAR;
    procedure WMCopy(var Mesg: TMessage); message WM_COPY;
    procedure WMCut(var Mesg: TMessage); message WM_CUT;
    procedure WMPaste(var Mesg: TMessage); message WM_PASTE;
    procedure WMUndo(var Mesg: TMessage); message WM_UNDO;
  public
    procedure PasteFromClipboard; override;
    procedure CopyToClipboard; override;
    procedure Clear; override;
    procedure CutToClipboard; override;
    procedure Undo; override;
  published
    property ClipboardCommands: TJvClipboardCommands read FClipboardCommands
      write FClipboardCommands default [caCopy..caUndo];
*)

(*$DEFINE JV_DECL_CUSTOMEDIT
  { QCustomEdit }
  private
    FCharCase: TEditCharCase;
    FEdit: TEdit;
    function GetAutoSelect: Boolean;
    function GetCanUndo: Boolean;
    function GetCanRedo: Boolean;
    function GetCursorPos: Integer;
    function GetModified: Boolean;
    procedure SetCharCase(Value: TEditCharCase);
    procedure SetEchoMode(const Value: TEchoMode);
  protected
    procedure DoEnter; override;
    procedure DoExit; override;
    procedure SetMaxLength(const Value: Integer); dynamic;
    procedure SetModified(const Value: Boolean); override;
    function GetSelLength: Integer; override;
    function GetSelStart: Integer; override;
    function GetSelText: TCaption; override;
    function GetText: TCaption; override;
    procedure SetAutoSelect(const Value: Boolean); overide;
    procedure SetCursorPos(const Value: Integer); override;
    procedure SetSelLength(Value: Integer); override;
    procedure SetSelStart(Value: Integer); override;
    procedure SetSelText(const Value: WideString); override;
    procedure SetText(const Value: TCaption); override;
  public
    procedure ClearSelection; override;
    procedure Redo; override;
    procedure SetFocus; override;
    procedure SelectAll; override
    property CanRedo: Boolean read GetCanRedo;
    property CanUndo: Boolean read GetCanUndo;
    property CursorPos: Integer read GetCursorPos write SetCursorPos;
    property Modified: Integer read GetModified write SetModified;
  published
    property CharCase: TEditCharCase read GetCharCase write SetCharCase default ecNormal;
*)

(*$DEFINE JV_EDITCONTROL_BEGIN(ClassName)
  { QEditControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
  JV_DECL_EDITCONTROL
*)

(*$DEFINE JV_CUSTOMEDIT_BEGIN(ClassName)
  { QCustomEdit Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
  JV_DECL_EDITCONTROL
  JV_DECL_CUSTOMEDIT
*)


(*$DEFINE JV_EDITCONTROL_END(ClassName)
JV_WINCONTROL_END(ClassName)
*)

(*$DEFINE JV_CUSTOMEDIT_END(ClassName)
JV_WINCONTROL_END(ClassName)
*)

(*$DEFINE JV_EDITCONTROL(ClassName)
  JV_EDITCONTROL_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)

(*$DEFINE JV_CUSTOMEDIT(ClassName)
  JV_CUSTOMEDIT_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)


// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************
{$DEFINE HITTEST_CODE Handled := inherited HitTest(XPos, YPos);}

(*$DEFINE JV_IMPL_CONTROL_CREATE(ClassName)
{ QControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FHintColor := clDefault;
  FWindowProc := WndProc;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_CONTROL_MESSAGES
    { Control Messages }
      CM_FOCUSCHANGED: FocusChanged;
      CM_MOUSEENTER: FMouseOver := True;
      CM_MOUSELEAVE: FMouseOver := True;

*)

(*$DEFINE JV_IMPL_CONTROL(ClassName)
procedure TJvEx##ClassName.WndProc(var Mesg: TMessage);
begin
  // OutputDebugString(PAnsiChar(Format('%s: Message $%x',[Name, Mesg.Msg])));
  with TJvMessage(Mesg) do
  begin
    case Msg of
      JV_IMPL_CONTROL_MESSAGES
      CM_HINTSHOW:
      begin
        case FHintColor of
          clNone   : HintInfo^.HintColor := Application.HintColor;
          clDefault: HintInfo^.HintColor := GetHintColor(Parent);
        else
          HintInfo^.HintColor := FHintcolor;
        end;
      end;
    else
      inherited Dispatch(Mesg);
    end;
  end;
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  Perform(CM_COLORCHANGED, 0, 0);
  inherited ColorChanged;
end;

procedure TJvEx##ClassName.FontChanged;
begin
  Perform(CM_FONTCHANGED, 0, 0);
  inherited FontChanged;
end;

procedure TJvEx##ClassName.FocusChanged;
begin
  { notification }
end;
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_CONTROL_COMMON(ClassName)
{ QControl Common}

function TJvEx##ClassName.HitTest(X, Y: integer): Boolean;
begin
   Result := Perform(CM_HITTEST, 0, 0) <> HTNOWHERE;
end;

procedure TJvEx##ClassName.CMHitTest(var Mesg: TJvMessage);
begin
  with Mesg do
  begin
    if csDesigning in ComponentState then
      Result := Perform(CM_DESIGNHITTEST, XPos, YPos)
    else
    begin
      HITTEST_CODE
      if Handled then
        Result := HTCLIENT;
    end;
  end;
end;

procedure TJvEx##ClassName.CMDesignHitTest(var Mesg: TJvMessage);
begin
  with Mesg do
  begin
    HITTEST_CODE
    if Handled then
      Result := HTCLIENT;
  end;
end;

procedure TJvEx##ClassName.CMHintShow(var Mesg: TJvMessage);
begin
  with Mesg do
  begin
    Handled := inherited HintShow(HintInfo^);
  end;
end;

procedure TJvEx##ClassName.CMSysFontChanged(var Mesg: TMessage);
begin
  if FDesktopFont then
  begin
    Font.Assign(Application.Font);
    FDesktopFont := True;
  end;
end;

procedure TJvEx##ClassName.EnabledChanged;
begin
  Perform(CM_ENABLEDCHANGED, 0, 0);
  inherited EnabledChanged;
end;

procedure TJvEx##ClassName.TextChanged;
begin
  Perform(CM_TEXTCHANGED, 0, 0);
  inherited TextChanged;
end;

procedure TJvEx##ClassName.VisibleChanged;
begin
  Perform(CM_VISIBLECHANGED, 0, 0);
  inherited VisibleChanged;
end;

function TJvEx##ClassName.HintShow(var HintInfo : THintInfo): Boolean;
begin
  Result := Perform(CM_HINTSHOW, 0, Integer(@HintInfo)) <> 0;
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

procedure TJvEx##ClassName.SetDesktopFont(Value: Boolean);
begin
  if FDesktopFont <> Value then
  begin
    FDesktopFont := Value;
    Perform(CM_SYSFONTCHANGED, 0, 0);
  end;
end;

procedure TJvEx##ClassName.Dispatch(var Mesg);
begin
  if Assigned(FWindowProc) then
    FWindowProc(TMessage(Mesg))
  else
    WndProc(TMessage(Mesg))
end;

function TJvEx##ClassName.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Msg := Msg;
  Mesg.WParam := WParam;
  Mesg.LParam := LParam;
  Mesg.Result := 0;
  Dispatch(Mesg);
  Result := Mesg.Result;
end;

function TJvEx##ClassName.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CONTROL

(*$DEFINE JV_CONTROL_IMPL(ClassName)
JV_IMPL_CONTROL_CREATE(ClassName)
JV_IMPL_CONTROL(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)


(*$DEFINE JV_IMPL_WINCONTROL_CREATE(ClassName)
{ QWinControl Create }

constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FWindowProc := WndProc;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := DoOnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  FCanvas.Free;
  inherited Destroy;
end;
  EMPTYLINE
*) // end macro JV_IMPL_WINCONTROL_CREATE

(*$DEFINE JV_IMPL_CUSTOMCONTROL_CREATE(ClassName)
{ QCustomControl Create }

constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FWindowProc := WndProc;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := DoOnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
  EMPTYLINE
*) // end macro JV_IMPL_CUSTOMCONTROL_CREATE

//
// used by WinCustomControl & CustomForm
//

(*$DEFINE JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
{ QWinCustomControl Create }

constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FWindowProc := WndProc;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := DoOnFontChanged;
  FHintColor := clDefault;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
EMPTYLINE
*)

(*$DEFINE JV_IMPL_CUSTOMFORM_CREATE(ClassName)

{ QWinCustomControl Create }
constructor TJvEx##ClassName.CreateNew(AOwner: TComponent; Dummy: Integer);
begin
  inherited CreateNew(AOwner, Dummy);
  FWindowProc := WndProc;
  FHintColor := clDefault;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := DoOnFontChanged;
  CREATE_CUSTOMCODE
end;

JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
EMPTYLINE
*)

// ************************************************


(*$DEFINE JV_IMPL_WINCONTROL_MESSAGES
      { WinControl Messages }
      WM_GETDLGCODE   : Result := InputKeysToDlgCodes(InputKeys);
      WM_KILLFOCUS    : DoKillFocus(FocusedWnd);
      WM_SETFOCUS     : DoSetFocus(FocusedWnd);
      CM_FONTCHANGED  : FInternalFontChanged(Font);

      CM_HINTSHOW:
      begin
        HintInfo^.HintColor := GetHintcolor(Self);
        Handled := HintShow(HintInfo^);
      end;

      WM_ERASEBKGND:
      begin
        Canvas.Start;
        try
          Handled := DoEraseBackGround(Canvas, LParam);
        finally
          Canvas.Stop;
        end;
      end;
*)

(*$DEFINE JV_IMPL_WINCONTROL(ClassName)
procedure TJvEx##ClassName.WndProc(var Mesg: TMessage);
begin
//  OutputDebugString(PAnsiChar(Format('%s: Message $%x',[Name, Mesg.Msg])));
  with TJvMessage(Mesg) do
  begin
    case Msg of
      JV_IMPL_WINCONTROL_MESSAGES
      JV_IMPL_CONTROL_MESSAGES

    else
      inherited Dispatch(Mesg);
    end;
  end;
end;

*)

(*$DEFINE JV_IMPL_WINCONTROL_COMMON(ClassName)
{ QWinControl Common }

function TJvEx##ClassName.DoEraseBackground(Canvas: TCanvas; Param: Integer): Boolean;
begin
  Result := false;
end;

procedure TJvEx##ClassName.ShowingChanged;
begin
  Perform(CM_SHOWINGCHANGED, 0 ,0);
  inherited;
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  if HandleAllocated and Bitmap.Empty then
    Palette.Color := Brush.Color;
  Perform(CM_COLORCHANGED, 0, 0);
  inherited;
end;

procedure TJvEx##ClassName.CursorChanged;
begin
  Perform(CM_CURSORCHANGED, 0, 0);
  inherited;
end;

procedure TJvEx##ClassName.DoSetFocus(PreviousWnd: QWidgetH);
begin
  { notification }
end;

procedure TJvEx##ClassName.DoKillFocus(NextWnd: QWidgetH);
begin
  { notification }
end;

procedure TJvEx##ClassName.DoEnter;
begin
  Perform(CM_ENTER, 0 ,0);
  inherited DoEnter;
end;

procedure TJvEx##ClassName.DoExit;
begin
  Perform(CM_EXIT, 0 ,0);
  inherited DoExit;
end;

function TJvEx##ClassName.EventFilter(Receiver: QObjectH; Event: QEventH): Boolean;
begin
  if JvEventFilter(Self, Receiver, Event) then
    Result := True
  else
    Result := inherited EventFilter(Receiver, Event);
end;

procedure TJvEx##ClassName.FocusChanged;
begin
  NotifyControls(CM_FOCUSCHANGED);
end;

procedure TJvEx##ClassName.SetFocus;
var
  PreviousWnd: QWidgetH;
begin
  PreviousWnd := GetFocusedWnd(Self);
  inherited SetFocus;
  if Assigned(PreviousWnd) and (PreviousWnd <> Handle) and Focused then
    SendMessage(PreviousWnd, WM_KILLFOCUS, Integer(Handle), 0);
  if Focused and (PreviousWnd <> Handle) then
    SendMessage(Handle, WM_SETFOCUS, Integer(PreviousWnd), 0);
end;

procedure TJvEx##ClassName.DoOnFontChanged(Sender: TObject);
begin
  ParentFont := False;
  PostMessage(Self, CM_FONTCHANGED, 0, 0);
end;

procedure TJvEx##ClassName.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvEx##ClassName.CreateWnd;
begin
  inherited CreateWidget;
end;

procedure TJvEx##ClassName.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvEx##ClassName.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(self, PaintDevice, X, Y);
end;

procedure TJvEx##ClassName.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  PaintTo(PaintDevice, 0, 0);
end;

function TJvEx##ClassName.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvEx##ClassName.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  EMPTYLINE
*) // MACRO END WINCONTROL_COMMON

//
// implement paint for native Qt Widgets.
//
(*$DEFINE JV_IMPL_WINCONTROL_PAINT(ClassName)
{ WinControl Paint }

function TJvEx##ClassName.GetCanvas: TCanvas;
begin
  if not Assigned(FCanvas) then
  begin
    FCanvas:= TControlCanvas.Create;
    FCanvas.Control := self;
  end;
  Result := FCanvas;
end;

procedure TJvEx##ClassName.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
end;

procedure TJvEx##ClassName.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  TControlCanvas(Canvas).StartPaint;
  try
    Canvas.Brush.Assign(Brush);
    Canvas.Font.Assign(Font);
    RequiredState(Canvas, [csHandleValid, csFontValid, csBrushValid]);
    Paint;
  finally
    TControlCanvas(Canvas).StopPaint;
  end;
end;
 EMPTYLINE
*)


(*$DEFINE JV_CUSTOMCONTROL_IMPL(ClassName)
JV_IMPL_CUSTOMCONTROL_CREATE(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
 EMPTYLINE
*)

(*$DEFINE JV_WINCONTROL_IMPL(ClassName)
JV_IMPL_WINCONTROL_CREATE(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
 EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL_IMPL(ClassName)
JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
 EMPTYLINE
*)

(*$DEFINE JV_CUSTOMFORM_IMPL(ClassName)
JV_IMPL_CUSTOMFORM_CREATE(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)


(*$DEFINE JV_IMPL_EDITCONTROL_MESSAGES

      WM_GETTEXTLENGTH : Result := Length(GetText);

      WM_CLEAR, WM_COPY,
      WM_CUT, WM_PASTE, WM_UNDO :
        if DoClipBoardCommands(msg, FClipBoardCommands) then
          inherited Dispatch(msg);

      EM_UNDO:  Result := Perform(WM_UNDO, 0, 0);
*)

(*$DEFINE JV_IMPL_EDITCONTROL_COMMON(ClassName)
{ QEditControl Common}

procedure TJvEx##ClassName.WndProc(var Mesg: TMessage);
begin
  //OutputDebugString(PAnsiChar(Format('%s: Message $%x',[Name, Mesg.Msg])));
  with TJvMessage(Mesg) do
  begin
    case Msg of
      JV_IMPL_EDITCONTROL_MESSAGES
      JV_IMPL_WINCONTROL_MESSAGES
      JV_IMPL_CONTROL_MESSAGES
    else
      inherited Dispatch(Mesg);
    end;
  end;
end;

procedure TJvEx##ClassName.Undo;
begin
  SendMessage(Handle, WM_UNDO, 0, 0);
end;

procedure TJvEx##ClassName.CopyToClipboard;
begin
  SendMessage(Handle, WM_COPY, 0, 0);
end;

procedure TJvEx##ClassName.CutToClipboard;
begin
  if not ReadOnly then
    SendMessage(Handle, WM_CUT, 0, 0);
end;

procedure TJvEx##ClassName.Clear;
begin
  if not ReadOnly then
    SendMessage(Handle, WM_CLEAR, 0, 0);
end;

procedure TJvEx##ClassName.PasteFromClipboard;
begin
  if not ReadOnly then
    SendMessage(Handle, WM_PASTE, 0, 0);
end;
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_EDITCONTROL(ClassName)
procedure TJvEx##ClassName.WMClear(var Mesg: TMessage);
begin
  inherited Clear;
end;

procedure TJvEx##ClassName.WMCopy(var Mesg: TMessage);
begin
  inherited CopyToClipBoard;
end;

procedure TJvEx##ClassName.WMCut(var Mesg: TMessage);
begin
  inherited CutToClipBoard;
end;

procedure TJvEx##ClassName.WMPaste(var Mesg: TMessage);
begin
  inherited PasteFromClipBoard;
end;

procedure TJvEx##ClassName.WMUndo(var Mesg: TMessage);
begin
  inherited Undo;
end;
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_CUSTOMEDIT(ClassName)
procedure TJvEx##ClassName.WMClear(var Mesg: TMessage);
begin
  inherited Clear;
  FEdit.Clear;
end;

procedure TJvEx##ClassName.WMCopy(var Mesg: TMessage);
begin
  FEdit.CopyToClipBoard;
end;

procedure TJvEx##ClassName.WMCut(var Mesg: TMessage);
begin
  FEdit.CutToClipBoard;
end;

procedure TJvEx##ClassName.WMPaste(var Mesg: TMessage);
begin
  FEdit.PasteFromClipBoard;
end;

procedure TJvEx##ClassName.WMUndo(var Mesg: TMessage);
begin
  FEdit.Undo;
end;

procedure TJvEx##ClassName.ClearSelection;
begin
  if not ReadOnly then
  begin
    inherited;
    FEdit.ClearSelection;
  end;
end;

procedure TJvEx##ClassName.EMGetRect(var Msg: TJvMessage);
begin
  Msg.Rect := FEdit.BoundsRect;
end;

procedure TJvEx##ClassName.EMSetRect(var Msg: TJvMessage);
begin
  FEdit.BoundsRect := Msg.Rect^;
end;

function TCustomEdit.GetAutoSelect: Boolean;
begin
  Result := FEdit.AutoSelect;
  inherited SetAutoSelect(Result);
end;

procedure TCustomEdit.SetAutoSelect(const Value: Boolean);
begin
  inherited SetAutoSelect(Value);
  FEdit.AutoSelect := Value;
end;

function TJvEx##ClassName.GetSelStart: Integer;
begin
  Result := FEdit.SelStart;
end;

function TJvEx##ClassName.GetSelText: WideString;
begin
  Result := FEdit.SelText;
end;

function TJvEx##ClassName.GetText: TCaption;
begin
  Result := FEdit.Text;
end;

function TJvEx##ClassName.GetModified: Boolean;
begin
  Result := FEdit.Modified;
end;

procedure TJvEx##ClassName.SelectAll;
begin
  inherited;
  FEdit.SelectAll;
end;

function TJvEx##ClassName.GetEchoMode: TEchoMode;
begin
  Result := FEdit.EchoMode;
end;

procedure TCustomEdit.SetCursorPos(const Value: Integer);
begin
  inherited;
  FEdit.CursorPos := Value;
end;

procedure TJvEx##ClassName.SetEchoMode(const Value: TEchoMode);
begin
  inherited;
  FEdit.EchoMode := Value;
end;

procedure TJvEx##ClassName.SetText(const Value: TCaption);
begin
  FEdit.Text := Value;
  inherited;
end;

procedure TJvEx##ClassName.SetMaxLength(const Value: Integer);
begin
  FEdit.MaxLenght := Value;
  inherited;
end;

procedure TJvEx##ClassName.SetModified(const Value: Boolean);
begin
  inherited;
  FEdit.Modified := Value;
end;

procedure TJvEx##ClassName.SetSelLength(Value: Integer);
begin
  inherited;
  FEdit.SelLenght := Value;
end;

procedure TJvEx##ClassName.SetSelStart(Value: Integer);
begin
  inherited;
  FEdit.SelStart := Value;
end;

procedure TJvEx##ClassName.SetSelText(const Value: WideString);
begin
  inherited;
  FEdit.SelText := Value;
end;

function TCustomEdit.GetCanRedo: Boolean;
begin
  Result := FEdit.CanRedo;
end;

function TCustomEdit.GetCanUndo: Boolean;
begin
  Result := FEdit.CanUndo;
end;
 EMPTYLINE

*) // end of JV_IMPL_CUSTOMEDIT

(*$DEFINE JV_IMPL_EDITCONTROL_CREATE(ClassName)
{ QEditControl Create }

constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := DoOnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  FClipBoardCommands := [caUndo, caCopy, caPaste, caCut];
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  FCanvas.Free;
  inherited Destroy;
end;
 EMPTYLINE
*) // end of JV_IMPL_EDITCONTROL_CREATE

(*$DEFINE JV_IMPL_CUSTOMEDIT_CREATE(ClassName)
{ QCustomEdit Create }

constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := DoOnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  FEdit := TEdit.Create(Self);
  with FEdit do
  begin
    AutoSize := false;
    Height := Self.Height - 4;
    Width := Self.Width - 4;
    Anchors := [akBottom, akLeft, akRight, akTop];
    BorderStyle := bsNone;
    FEdit.ControlStyle := FEdit.ControlStyle + [csNoFocus];
    ParentColor := True;
    ParentFont := True;
    ParentHint := True;
    ParentShowHint := True;
    TabStop := False;
    Parent := Self;
  end
  CREATE_CUSTOMCODE
end;

*)

(*$DEFINE JV_EDITCONTROL_IMPL(ClassName)
JV_IMPL_EDITCONTROL_CREATE(ClassName)
JV_IMPL_EDITCONTROL(ClassName)
JV_IMPL_EDITCONTROL_COMMON(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)

(*$DEFINE JV_CUSTOMEDIT_IMPL(ClassName)
JV_IMPL_CUSTOMEDIT_CREATE(ClassName)
JV_IMPL_CUSTOMEDIT(ClassName)
JV_IMPL_EDITCONTROL_COMMON(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)



{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http:{www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvQExControls.macros, released on 2004-09-21

The Initial Developer of the Original Code is André Snepvangers [ASnepvangers att users.sourceforge.net]
Portions created by André Snepvangers are Copyright (C) 2004 André Snepvangers.
All Rights Reserved.

Contributor(s):

You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http:(jvcl.sourceforge.net

Description:

This file contains macro's needed to build the JvExCLX classes.
You need the Pascal PreProcessor (jpp) from Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
to process these files.
You can find it here: ......
A pre-builded Windows version is included with JVCL 3: devtools\JvExVCL\src\jpp.exe

Known Issues:
  UNDER CONSTRUCTION !!
-----------------------------------------------------------------------------}

// This comment is inserted into every JvQExXxx.pas file
(*$DEFINE WARNINGHEADER
{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExCLX/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}
*)

{$UNDEF CREATE_CUSTOMCODE}
{$UNDEF DESTROY_CUSTOMCODE}
{$UNDEF IFISNOTCUSTOMFORM}

{$DEFINE EMPTYLINE}
{$DEFINE CREATE_CUSTOMCODE}
{$DEFINE DESTROY_CUSTOMCODE}
{$DEFINE IFISNOTCUSTOMFORM}


// *************************************************************************
// *************************** INTERFACE MACROS ****************************
// *************************************************************************

(*$DEFINE JV_DECL_CONTROL
  { QControl }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FOnParentColorChanged: TNotifyEvent;
    FVCLMessages: TJvMessages;
  protected
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); virtual;
    procedure WndProc(var Msg: TMessage); virtual;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  public
    procedure Dispatch(var Message); override;
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
    property HintColor: TColor read FHintColor write FHintColor default clDefault;
*)

(*$DEFINE JV_CONTROL_BEGIN(ClassName)
  { QControl begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
*)

(*$DEFINE JV_CONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CONTROL(ClassName)
  JV_CONTROL_BEGIN(ClassName)
  JV_CONTROL_END(ClassName)
*)

//
//  used by WinCustomControl, WinControl, CustomControl, EditControl
//
(*$DEFINE JV_DECL_WINCUSTOMCONTROL
  { QWinCustomControl }
  private
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
    procedure DoFontChanged(Sender: TObject);
  protected
    procedure BoundsChanged; override;
    procedure ColorChanged; override;
    procedure CreateWidget; override;
    procedure FontChanged; override;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    function WidgetFlags: Integer; override;

    procedure WMEraseBkGround(var Msg: TMessage); message WM_ERASEBKGND;
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure CMFontChanged(var Msg: TMessage); message CM_FONTCHANGED;
    procedure WMTimer(var Msg: TWMTimer); message WM_TIMER;

    procedure CreateWnd; virtual;
    procedure RecreateWnd;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);

    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;

  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
*)

//
// WidgetControls without a Paint method.
//
(*$DEFINE JV_DECL_WINCONTROL_PAINT
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
*)


(*$DEFINE JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  { QWinCustomControl }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL_PAINT
*)

(*$DEFINE JV_WINCUSTOMCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  published
    property Style default
  end;
  EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL(ClassName)
  JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  JV_WINCUSTOMCONTROL_END(ClassName)
*)

//
// WidgetControls without a Canvas property.
//
(*$DEFINE JV_DECL_WINCONTROL
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
*)

(*$DEFINE JV_WINCONTROL_BEGIN(ClassName)
  { QWinControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL_PAINT
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_WINCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  published
    property Style default dsSystemDefault;
  end;
  EMPTYLINE
*)

(*$DEFINE JV_WINCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)

//
// WidgetControls with a Paint method.
//

(*$DEFINE JV_CUSTOMCONTROL_BEGIN(ClassName)
  { QCustomControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
*)

(*$DEFINE JV_CUSTOMCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMCONTROL(ClassName)
  JV_CUSTOMCONTROL_BEGIN(ClassName)
  JV_CUSTOMCONTROL_END(ClassName)
*)

(*$DEFINE JV_DECL_EDITCONTROL
  { QEditControl }
  private
    FClipboardCommands: TJvClipboardCommands;
    FEditRect: TRect; // EM_GETRECT
    procedure EMGetRect(var Msg: TMessage); message EM_GETRECT;
    procedure EMSetRect(var Msg: TMessage); message EM_SETRECT;
  protected
    procedure SetClipboardCommands(const Value: TJvClipboardCommands); virtual;
    function GetReadOnly: Boolean; virtual;
    {$IFDEF HAS_SETREADONLY}
    procedure SetReadOnly(const Value: Boolean); override;
    {$ELSE}
    procedure SetReadOnly(Value: Boolean); virtual;
    {$ENDIF HAS_SETREADONLY}
  public
    procedure PasteFromClipboard; reintroduce; virtual;
    procedure CopyToClipboard; reintroduce; virtual;
    procedure Clear; reintroduce; virtual;
    procedure CutToClipboard; reintroduce; virtual;
    procedure Undo; reintroduce; virtual;
  published
    property ClipboardCommands: TJvClipboardCommands read FClipboardCommands
      write SetClipboardCommands default [caCopy..caUndo];
    property ReadOnly: boolean read GetReadOnly write SetReadOnly default False;
*)

(*$DEFINE JV_EDITCONTROL_BEGIN(ClassName)
  { QEditControl Begin }
  TJvEx##ClassName = class(T##ClassName, IJvWinControlEvents)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL_PAINT
  JV_DECL_WINCONTROL
  JV_DECL_EDITCONTROL
*)

(*$DEFINE JV_EDITCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QEditControl }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  published
    property Style default dsSystemDefault;
  end;
  EMPTYLINE
*)

(*$DEFINE JV_EDITCONTROL(ClassName)
  JV_EDITCONTROL_BEGIN(ClassName)
  JV_EDITCONTROL_END(ClassName)
*)

//
// CustomForm
//

(*$DEFINE JV_DECL_CUSTOMFORM
  { CustomForm }
  public
    constructor CreateNew(AOwner: TComponent; Dummy: Integer = 0); override;
*)

(*$DEFINE JV_CUSTOMFORM_BEGIN(ClassName)
  { QCustomForm }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CUSTOMFORM
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_CUSTOMFORM_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomForm }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  published
    property Style default dsSystemDefault;
  end;
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMFORM(ClassName)
  JV_CUSTOMFORM_BEGIN(ClassName)
  JV_CUSTOMFORM_END(ClassName)
*)

// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************

(*$DEFINE JV_IMPL_CONTROL(ClassName)
{ QControl }
procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  if FHintColor <> clDefault then
  begin
    FSavedHintColor := Application.HintColor;
    Application.HintColor := FHintColor;
  end;
  inherited MouseEnter(Control);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  if FHintColor <> clDefault then
  begin
    Application.HintColor := FSavedHintColor;
  end;
  inherited MouseLeave(Control);
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

procedure TJvEx##ClassName.Dispatch(var Message);
begin
  WndProc(Message);
end;

procedure TJvEx##ClassName.WndProc(var Msg: TMessage);
begin
  inherited Dispatch(Msg);
end;

function TJvEx##ClassName.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    Dispatch(Mesg);
    Result := Mesg.Result;
  end;
end;

function TJvEx##ClassName.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CONTROL

(*$DEFINE JV_IMPL_CONTROL_CREATE(ClassName)
{ QControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FHintColor := clDefault;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
 EMPTYLINE
*)

(*$DEFINE JV_CONTROL_IMPL(ClassName)
   JV_IMPL_CONTROL_CREATE(ClassName)
   JV_IMPL_CONTROL(ClassName)
   JV_IMPL_CONTROL_COMMON(ClassName)
*)

//
// Used by all JvQEx* classes except for QControl
//

(*$DEFINE JV_IMPL_WINCUSTOMCONTROL(ClassName)
{ QWinCustomControl }
procedure TJvEx##ClassName.DoSetFocus(FocusedWnd: HWND);
begin
  { notification }
end;

procedure TJvEx##ClassName.DoKillFocus(FocusedWnd: HWND);
begin
  { notification }
end;

function TJvEx##ClassName.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
begin
  Result := false;
end;

procedure TJvEx##ClassName.WMEraseBkGround(var Msg: TMessage);
var
  Bmp := TBitmap;
begin
  Bmp := TBitmap.Create;
  Bmp.Width := Width;
  Bmp.Height := Height;
  with Bmp do
  begin
    Canvas.Start;
    Msg.Result := DoPaintBackground(Canvas, Msg.Param);
    Canvas.Stop;
  end;
  if Msg.Result then
  then
    Canvas.Draw(0,0, Bmp);
  Bmp.destroy;
end;

procedure TJvEx##ClassName.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  Msg.Result := DoFocusChanged(Msg.WinControl);
end;

procedure TJvEx##ClassName.OnFontChanged(Sender: TObject);
begin
  ParentFont := False;
  if Font.Height <> FFontHeight then
  begin
    Include(ScalingFlags, sfFont);
    FFontHeight := Font.Height;
  end;
  PostMessage(Self.Handle, CM_FONTCHANGED, 0, 0);
end;

procedure TJvEx##ClassName.CMFontChanged(var Message: TMessage);
begin
  FontChanged;
end;

procedure TJvEx##ClassName.WMTimer(var Msg: TWMTimer);
begin
  with Msg do
  begin
    if TimerProc <> nil then
       TimerProc(Handle, WM_TIMER, TimerID, GetTickCount);
    Result := 1;
  end;
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

procedure TJvEx##ClassName.FontChanged;
begin
  inherited FontChanged;
  Canvas.Font.Assign(Font);
end;


procedure TJvEx##ClassName.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvEx##ClassName.CreateWnd;
begin
  inherited CreateWidget;
end;

procedure TJvEx##ClassName.RecreateWnd;
begin
  RecreateWidget;
end;


function TJvEx##ClassName.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := false;
  FVCLMessages.OnEventFilter(Sender, Event, Result);
  if not Result then
    Result := inherited EventFilter(Sender, Event);
end;

procedure TJvEx##ClassName.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  TControlCanvas(Canvas).StartPaint;
  try
    Canvas.Brush.Assign(Brush);
    Canvas.Font.Assign(Font);
    RequiredState(Canvas, [csHandleValid, csFontValid, csBrushValid]);
    Paint;
  finally
    TControlCanvas(Canvas).StopPaint;
  end;
end;

procedure TJvEx##ClassName.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
var
  PixMap: QPixmapH;
begin
  PixMap := QPixmap_create;
  try
    ControlState := ControlState + [csPaintCopy];
    QPixmap_grabWidget(PixMap, Handle, 0, 0, Width, Height);
    Qt.BitBlt(PaintDevice, X, Y, PixMap, 0, 0, Width, Height, RasterOp_CopyROP, True);
  end;
  finally
    ControlState := ControlState - [csPaintCopy];
    QPixMap_destroy(PixMap);
  end;
end;

procedure TJvEx##ClassName.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  PaintTo(PaintDevice, 0, 0);
end;

function TJvEx##ClassName.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

procedure TJvExControl.SetText(const Value: TCaption);
begin
  if Caption <> Value then
  begin
    ControlPatch(Self).FSavedText := Value;
    { Only TCustomForm.Loaded sets FSavedText. }
    if not (csLoading in ComponentState) or not (Self is TCustomForm) then
    begin
      QWidget_setCaption(Handle, @Value);
      PostMessage(Handle, CM_TEXTCHANGED, 0, 0);
    end;
  end;
end;

function TJvEx##ClassName.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  EMPTYLINE
*) // MACRO END WINCUSTOMCONTROL

//
// implement paint for native Qt Widgets.
//
(*$DEFINE JV_IMPL_WINCONTROL_PAINT(ClassName)
{ WinControl Paint }
procedure TJvEx##ClassName.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
end;
  EMPTYLINE
*)

//
// used by CustomControl, WinCustomControl & CustomForm
//

(*$DEFINE JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
{ QWinCustomControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FVCLMessages := TJvVCLMessages.Create(self);
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL_IMPL(ClassName)
   JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
   JV_IMPL_WINCUSTOMCONTROL(ClassName)
   JV_IMPL_WINCONTROL_PAINT(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_CUSTOMCONTROL_IMPL(ClassName)
   JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
   JV_IMPL_WINCUSTOMCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_WINCONTROL_CREATE(ClassName)
{ QWinControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FVCLMessages := TJvVCLMessages.Create(self);
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE;
  FCanvas.Destroy;
  inherited Destroy;
end;
  EMPTYLINE
*) // end macro JV_IMPL_WINCONTROL_CREATE


(*$DEFINE JV_WINCONTROL_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_WINCUSTOMCONTROL(ClassName)
   JV_IMPL_WINCONTROL_PAINT(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_EDITCONTROL(ClassName)
{ QEditControl }
function TJvEx##ClassName.GetReadOnly: Boolean;
begin
  Result := inherited ReadOnly;
end;

{$IFDEF HAS_SETREADONLY}
procedure TJvEx##ClassName.SetReadOnly(const Value: Boolean);
begin
  inherited SetReadOnly(Value);
  SetClipboardCommands(FClipboardCommands);
end;
{$ELSE}
procedure TJvEx##ClassName.SetReadOnly(Value: Boolean);
begin
  inherited ReadOnly := Value;
  SetClipboardCommands(FClipboardCommands);
end;
{$ENDIF HAS_SETREADONLY}

procedure TJvEx##ClassName.SetClipboardCommands(const Value: TJvClipboardCommands);
begin
  if ReadOnly then
    FClipboardCommands := Value - [caCut, caPaste]
  else
    FClipboardCommands := Value;
end;

procedure TJvEx##ClassName.Undo;
begin
  if caUndo in ClipboardCommands then
    inherited Undo;
end;

procedure TJvEx##ClassName.CopyToClipboard;
begin
  if caCopy in ClipboardCommands then
    inherited CopyToClipboard;
end;

procedure TJvEx##ClassName.CutToClipboard;
begin
  if caCut in ClipboardCommands then
    inherited CutToClipboard;
end;

procedure TJvEx##ClassName.Clear;
begin
  inherited Clear;
end;

procedure TJvEx##ClassName.PasteFromClipboard;
begin
  if caPaste in ClipboardCommands then
    inherited PasteFromClipboard;
end;

procedure TJvEx##ClassName.EMGetRect(var Msg: TMessage);
begin
  if Msg.LParam <> 0 then
    if IsRectEmpty(FEditRect) then
    begin
      PRect(Msg.LParam)^ := ClientRect;
      if Self.BorderStyle = bsSingle then
        InflateRect(PRect(Msg.LParam)^, -2, -2);
    end
    else
      PRect(Msg.LParam)^ := FEditRect;
end;

procedure TJvEx##ClassName.EMSetRect(var Msg: TMessage);
begin
  if Msg.LParam <> 0 then
    FEditRect := PRect(Msg.LParam)^
  else
    FEditRect := ClientRect;
  Invalidate;
end;
*) // end of JV_IMPL_EDITCONTROL


(*$DEFINE JV_EDITCONTROL_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_EDITCONTROL(ClassName)
   JV_IMPL_WINCUSTOMCONTROL(ClassName)
   JV_IMPL_WINCONTROL_PAINT(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_CUSTOMFORM(ClassName)
{ QCustomForm }
constructor TJvEx##ClassName.CreateNew(AOwner: TComponent; Dummy: Integer);
begin
  WindowProc := WndProc;
  inherited CreateNew(AOwner, Dummy);
  FHintColor := clDefault;
  Font.OnChange := OnFontChanged;
  FVCLMessages := TJvVCLMessages.Create(self);
  CREATE_CUSTOMCODE
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CUSTOMFORM

// ************************************************

(*$DEFINE JV_CUSTOMFORM_IMPL(ClassName)
   JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
   JV_IMPL_CUSTOMFORM(ClassName)
   JV_IMPL_WINCUSTOMCONTROL(ClassName)
   JV_IMPL_CUSTOMCONTROL_PAINT(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)



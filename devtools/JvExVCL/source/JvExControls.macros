(*$DEFINE JV_CONTROL_EVENTS_CLASS(ClassName)
  TJvEx##ClassName = class(T##ClassName, IJvControlEvents)
*)
(*$DEFINE JV_CONTROL_EVENTS_CLASS1(ClassName, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf1, IJvControlEvents)
*)
(*$DEFINE JV_CONTROL_EVENTS_CLASS2(ClassName, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf2, Intf1, IJvControlEvents)
*)
(*$DEFINE JV_CONTROL_EVENTS_CLASS3(ClassName, Intf3, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf3, Intf2, Intf1, IJvControlEvents)
*)
(*$DEFINE JV_CONTROL_EVENTS_CLASS4(ClassName, Intf4, Intf3, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf4, Intf3, Intf2, Intf1, IJvControlEvents)
*)

(*$DEFINE JV_WINCONTROL_EVENTS_CLASS(ClassName)
  JV_CONTROL_EVENTS_CLASS1(ClassName, IJvWinControlEvents)
*)
(*$DEFINE JV_WINCONTROL_EVENTS_CLASS1(ClassName, Intf1)
  JV_CONTROL_EVENTS_CLASS2(ClassName, Intf1, IJvWinControlEvents)
*)
(*$DEFINE JV_WINCONTROL_EVENTS_CLASS2(ClassName, Intf2, Intf1)
  JV_CONTROL_EVENTS_CLASS3(ClassName, Intf2, Intf1, IJvWinControlEvents)
*)
(*$DEFINE JV_WINCONTROL_EVENTS_CLASS3(ClassName, Intf3, Intf2, Intf1)
  JV_CONTROL_EVENTS_CLASS4(ClassName, Intf3, Intf2, Intf1, IJvWinControlEvents)
*)


(*$DEFINE JV_CONTROL_EVENTS_DECL
  protected
   // TControl
    procedure VisibleChanged; dynamic;
    procedure EnabledChanged; dynamic;
    procedure TextChanged; dynamic;
    procedure FontChanged; dynamic;
    procedure ColorChanged; dynamic;
    procedure ParentFontChanged; dynamic;
    procedure ParentColorChanged; dynamic;
    procedure ParentShowHintChanged; dynamic;
    function WantKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; virtual;
    function HintShow(var HintInfo : THintInfo): Boolean; dynamic;
    function HitTest(X, Y: Integer): Boolean; dynamic;
    procedure MouseEnter(Control: TControl); dynamic;
    procedure MouseLeave(Control: TControl); dynamic;
*)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL
  protected
   // TWinControl
    procedure CursorChanged; dynamic;
    procedure ShowingChanged; dynamic;
    procedure ShowHintChanged; dynamic;
    procedure ControlsListChanging(Control: TControl; Inserting: Boolean); dynamic;
    procedure ControlsListChanged(Control: TControl; Inserting: Boolean); dynamic;
*)


(*$DEFINE JV_CONTROL_EVENTS_BEGIN(ClassName)
  //
  // --------------------------------------
  JV_CONTROL_EVENTS_CLASS(ClassName)
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  //
  // --------------------------------------
  JV_CONTROL_EVENTS_CLASS1(ClassName, Intf1)
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  //
  // --------------------------------------
  JV_CONTROL_EVENTS_CLASS2(ClassName, Intf2, Intf1)
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN3(ClassName, Intf3, Intf2, Intf1)
  //
  // --------------------------------------
  JV_CONTROL_EVENTS_CLASS3(ClassName, Intf3, Intf2, Intf1)
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN(ClassName)
  JV_CONTROL_EVENTS_BEGIN1(ClassName, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_CONTROL_EVENTS_BEGIN2(ClassName, Intf1, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_CONTROL_EVENTS_BEGIN3(ClassName, Intf2, Intf1, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_END
  public
    procedure Dispatch(var Message); override;
  private
    FOnMouseEnter, FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
   {$IF not declared(PatchedVCLX)}
  private
    FOnMouseEnter, FOnMouseLeave: TNotifyEvent;
  protected
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
   {$IFEND}
  {$ENDIF}
  end;
*)

(*$DEFINE JV_CONTROL_EVENTS(ClassName)
  JV_CONTROL_EVENTS_BEGIN(ClassName)
  JV_CONTROL_EVENTS_END
*)

(*$DEFINE JV_WINCONTROL_EVENTS(ClassName)
  JV_WINCONTROL_EVENTS_BEGIN(ClassName)
  JV_CONTROL_EVENTS_END
*)

(*$DEFINE JV_CONTROL_EVENTS_IMPLX(ClassName)
//
// -----------------------------------------------------------------------------
{$IFDEF VCL}
procedure TJvEx##ClassName.VisibleChanged;
begin
  InheritMsg(Self, CM_VISIBLECHANGED);
end;

procedure TJvEx##ClassName.EnabledChanged;
begin
  InheritMsg(Self, CM_ENABLEDCHANGED);
end;

procedure TJvEx##ClassName.TextChanged;
begin
  InheritMsg(Self, CM_TEXTCHANGED);
end;

procedure TJvEx##ClassName.FontChanged;
begin
  InheritMsg(Self, CM_FONTCHANGED);
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  InheritMsg(Self, CM_COLORCHANGED);
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  InheritMsg(Self, CM_PARENTCOLORCHANGED);
end;

procedure TJvEx##ClassName.ParentFontChanged;
begin
  InheritMsg(Self, CM_PARENTFONTCHANGED);
end;

procedure TJvEx##ClassName.ParentShowHintChanged;
begin
  InheritMsg(Self, CM_PARENTSHOWHINTCHANGED);
end;

function TJvEx##ClassName.WantKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := InheritMsg(Self, CM_DIALOGCHAR, Word(Key), ShiftStateToKeyData(Shift)) <> 0;
end;

function TJvEx##ClassName.HintShow(var HintInfo: THintInfo): Boolean;
begin
  Result := InheritMsg(Self, CM_HINTSHOW, 0, Integer(@HintInfo)) <> 0;
end;

function TJvEx##ClassName.HitTest(X, Y: Integer): Boolean;
begin
  Result := InheritMsg(Self, CM_HITTEST, 0, Integer(PointToSmallPoint(Point(X, Y)))) <> 0;
end;

procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  InheritMsg(Self, CM_MOUSEENTER, 0, Integer(Control));
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  InheritMsg(Self, CM_MOUSELEAVE, 0, Integer(Control));
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
end;
{$ENDIF VCL}
{$IFDEF VisualCLX}
 {$IF not declared(PatchedVCLX)}
procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  inherited MouseEnter(Control);
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  inherited MouseLeave(Control);
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
end;
 {$IFEND}
{$ENDIF VisualCLX}
*)

(*$DEFINE JV_CONTROL_EVENTS_IMPL(ClassName)
JV_CONTROL_EVENTS_IMPLX(ClassName)
{$IFDEF VCL}
procedure TJvEx##ClassName.Dispatch(var Message);
begin
  if not DispatchMsg(Self, Message) then
    inherited Dispatch(Message);
end;
{$ENDIF VCL}
*)

(*$DEFINE JV_WINCONTROL_EVENTS_IMPLX(ClassName)
JV_CONTROL_EVENTS_IMPLX(ClassName)
{$IFDEF VCL}
procedure TJvEx##ClassName.CursorChanged;
begin
  InheritMsg(Self, CM_CURSORCHANGED);
end;

procedure TJvEx##ClassName.ShowHintChanged;
begin
  InheritMsg(Self, CM_SHOWHINTCHANGED);
end;

procedure TJvEx##ClassName.ShowingChanged;
begin
  InheritMsg(Self, CM_SHOWINGCHANGED);
end;

procedure TJvEx##ClassName.ControlsListChanging(Control: TControl; Inserting: Boolean);
begin
  if Inserting then
    InheritMsg(Self, CM_CONTROLLISTCHANGE, Integer(Control), Integer(Inserting))
  else
    InheritMsg(Self, CM_CONTROLCHANGE, Integer(Control), Integer(Inserting))
end;

procedure TJvEx##ClassName.ControlsListChanged(Control: TControl; Inserting: Boolean);
begin
  if not Inserting then
    InheritMsg(Self, CM_CONTROLLISTCHANGE, Integer(Control), Integer(Inserting))
  else
    InheritMsg(Self, CM_CONTROLCHANGE, Integer(Control), Integer(Inserting))
end;
{$ENDIF VCL}
*)

(*$DEFINE JV_WINCONTROL_EVENTS_IMPL(ClassName)
JV_WINCONTROL_EVENTS_IMPLX(ClassName)
{$IFDEF VCL}
procedure TJvEx##ClassName.Dispatch(var Message);
begin
  if not DispatchMsg(Self, Message) then
    inherited Dispatch(Message);
end;
{$ENDIF VCL}
*)

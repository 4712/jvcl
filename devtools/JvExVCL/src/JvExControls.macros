{$UNDEF CONSTRUCTOR_CODE}
{$UNDEF DESTRUCTOR_CODE}

{$DEFINE EMPTYLINE}
{$DEFINE CONSTRUCTOR_CODE}
{$DEFINE DESTRUCTOR_CODE}

{ CustomControl differs from WinControl in JV_xxx_EVENTS_END }


// *************************************************************************
// *************************** INTERFACE MACROS ****************************
// *************************************************************************


// ****************** Control **********************
// used in all classes
(*$DEFINE JV_CONTROL_EVENTS_DECL_VCL
  protected
   // IJvControlEvents
    procedure VisibleChanged; dynamic;
    procedure EnabledChanged; dynamic;
    procedure TextChanged; dynamic;
    procedure FontChanged; dynamic;
    procedure ColorChanged; dynamic;
    procedure ParentFontChanged; dynamic;
    procedure ParentColorChanged; dynamic;
    procedure ParentShowHintChanged; dynamic;
    function WantKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; virtual;
    function HintShow(var HintInfo: THintInfo): Boolean; dynamic;
    function HitTest(X, Y: Integer): Boolean; dynamic;
    procedure MouseEnter(Control: TControl); dynamic;
    procedure MouseLeave(Control: TControl); dynamic;
    {$IFNDEF HASAUTOSIZE}
     {$IFNDEF COMPILER6_UP}
    procedure SetAutoSize(Value: Boolean); virtual;
     {$ENDIF !COMPILER6_UP}
    {$ENDIF !HASAUTOSIZE}
  public
    procedure Dispatch(var Msg); override;
*)

(*$DEFINE JV_CONTROL_EVENTS_DECL_VISUALCLX
  protected
   {$IF not declared(PatchedVCLX)}
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
   {$IFEND}
*)

(*$DEFINE JV_CONTROL_EVENTS_DECL_COMMON
  {$IFDEF NeedMouseEnterLeave}
  private
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  {$ENDIF NeedMouseEnterLeave}
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
*)

// ****************** Win Control **********************
// used in all TWinControl derived classes
(*$DEFINE JV_WINCONTROL_EVENTS_DECL_VCL
  protected
   // IJvWinControlEvents
    procedure CursorChanged; dynamic;
    procedure ShowingChanged; dynamic;
    procedure ShowHintChanged; dynamic;
    procedure ControlsListChanging(Control: TControl; Inserting: Boolean); dynamic;
    procedure ControlsListChanged(Control: TControl; Inserting: Boolean); dynamic;
  {$IFDEF JVCLThemesEnabledD56}
  private
    function GetParentBackground: Boolean;
  protected
    procedure SetParentBackground(Value: Boolean); virtual;
    property ParentBackground: Boolean read GetParentBackground write SetParentBackground;
  {$ENDIF JVCLThemesEnabledD56}
*)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL_VISUALCLX
  protected
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
*)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL_COMMON
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
*)

// ********************************************************
// * differences in Control, WinControl and CustomControl *
// ********************************************************
(*$DEFINE JV_DIFF_EVENTS_DECL_CONTROL
*)

(*$DEFINE JV_DIFF_EVENTS_DECL_WINCONTROL
  {$IFDEF VisualCLX}
  private
    FCanvas: TCanvas;
  protected
    procedure Paint; virtual;
    property Canvas: TCanvas read FCanvas;
  {$ENDIF VisualCLX}
*)

(*$DEFINE JV_DIFF_EVENTS_DECL_CUSTOMCONTROL
*)
// ************************************************


(*$DEFINE JV_EVENTS_CLASS(ClassName)
  TJvEx##ClassName = class(T##ClassName, IJvControlEvents)
*)
(*$DEFINE JV_EVENTS_CLASS1(ClassName, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf1, IJvControlEvents)
*)
(*$DEFINE JV_EVENTS_CLASS2(ClassName, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf2, Intf1, IJvControlEvents)
*)
(*$DEFINE JV_EVENTS_CLASS3(ClassName, Intf3, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf3, Intf2, Intf1, IJvControlEvents)
*)
(*$DEFINE JV_EVENTS_CLASS4(ClassName, Intf4, Intf3, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf4, Intf3, Intf2, Intf1, IJvControlEvents)
*)

// ****************** Class Declarations (combinations) **********************

(*$DEFINE JV_CONTROL_EVENTS_DECL
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL_VCL
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
  JV_CONTROL_EVENTS_DECL_VISUALCLX
  {$ENDIF VisualCLX}
  JV_CONTROL_EVENTS_DECL_COMMON
  JV_DIFF_EVENTS_DECL_CONTROL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL_VCL
  JV_WINCONTROL_EVENTS_DECL_VCL
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
  JV_CONTROL_EVENTS_DECL_VISUALCLX
  JV_WINCONTROL_EVENTS_DECL_VISUALCLX
  {$ENDIF VisualCLX}
  JV_CONTROL_EVENTS_DECL_COMMON
  JV_WINCONTROL_EVENTS_DECL_COMMON
  JV_DIFF_EVENTS_DECL_WINCONTROL
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS_DECL
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL_VCL
  JV_WINCONTROL_EVENTS_DECL_VCL
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
  JV_CONTROL_EVENTS_DECL_VISUALCLX
  JV_WINCONTROL_EVENTS_DECL_VISUALCLX
  {$ENDIF VisualCLX}
  JV_CONTROL_EVENTS_DECL_COMMON
  JV_WINCONTROL_EVENTS_DECL_COMMON
  JV_DIFF_EVENTS_DECL_CUSTOMCONTROL
*)


// ****************** Control **********************
(*$DEFINE JV_CONTROL_EVENTS_BEGIN(ClassName)
  JV_EVENTS_CLASS(ClassName)
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_EVENTS_CLASS1(ClassName, Intf1)
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_EVENTS_CLASS2(ClassName, Intf2, Intf1)
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN3(ClassName, Intf3, Intf2, Intf1)
  JV_EVENTS_CLASS3(ClassName, Intf3, Intf2, Intf1)
  JV_CONTROL_EVENTS_DECL
*)

// ****************** WinControl **********************
(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN(ClassName)
  JV_EVENTS_CLASS1(ClassName, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_EVENTS_CLASS2(ClassName, Intf1, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_EVENTS_CLASS3(ClassName, Intf2, Intf1, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

// ****************** CustomControl **********************
(*$DEFINE JV_CUSTOMCONTROL_EVENTS_BEGIN(ClassName)
  JV_EVENTS_CLASS2(ClassName, IJvWinControlEvents, IJvCustomControlEvents)
  JV_CUSTOMCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_EVENTS_CLASS3(ClassName, Intf1, IJvWinControlEvents, IJvCustomControlEvents)
  JV_CUSTOMCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_EVENTS_CLASS4(ClassName, Intf2, Intf1, IJvWinControlEvents, IJvCustomControlEvents)
  JV_CUSTOMCONTROL_EVENTS_DECL
*)


********************** Interface end macros *********************
(*$DEFINE JV_CONTROL_EVENTS_END(ClassName)
  end;
  EMPTYLINE
*)
{$DEFINE JV_WINCONTROL_EVENTS_END(ClassName) JV_CONTROL_EVENTS_END(ClassName)}
{$DEFINE JV_CUSTOMCONTROL_EVENTS_END(ClassName) JV_CONTROL_EVENTS_END(ClassName)}


(*$DEFINE JV_CONTROL_EVENTS(ClassName)
  JV_CONTROL_EVENTS_BEGIN(ClassName)
  JV_CONTROL_EVENTS_END(ClassName)
*)

(*$DEFINE JV_WINCONTROL_EVENTS(ClassName)
  JV_WINCONTROL_EVENTS_BEGIN(ClassName)
  JV_WINCONTROL_EVENTS_END(ClassName)
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS(ClassName)
  JV_CUSTOMCONTROL_EVENTS_BEGIN(ClassName)
  JV_CUSTOMCONTROL_EVENTS_END(ClassName)
*)

// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************

(*$DEFINE JV_CONTROL_EVENTS_IMPL_VCL(ClassName)
procedure TJvEx##ClassName.Dispatch(var Msg);
begin
  DispatchMsg(Self, Msg);
end;

procedure TJvEx##ClassName.VisibleChanged;
begin
  InheritMsg(Self, CM_VISIBLECHANGED);
end;

procedure TJvEx##ClassName.EnabledChanged;
begin
  InheritMsg(Self, CM_ENABLEDCHANGED);
end;

procedure TJvEx##ClassName.TextChanged;
begin
  InheritMsg(Self, CM_TEXTCHANGED);
end;

procedure TJvEx##ClassName.FontChanged;
begin
  InheritMsg(Self, CM_FONTCHANGED);
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  InheritMsg(Self, CM_COLORCHANGED);
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  InheritMsg(Self, CM_PARENTCOLORCHANGED);
end;

procedure TJvEx##ClassName.ParentFontChanged;
begin
  InheritMsg(Self, CM_PARENTFONTCHANGED);
end;

procedure TJvEx##ClassName.ParentShowHintChanged;
begin
  InheritMsg(Self, CM_PARENTSHOWHINTCHANGED);
end;

function TJvEx##ClassName.WantKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := InheritMsg(Self, CM_DIALOGCHAR, Word(Key), ShiftStateToKeyData(Shift)) <> 0;
end;

function TJvEx##ClassName.HintShow(var HintInfo: THintInfo): Boolean;
begin
  Result := InheritMsg(Self, CM_HINTSHOW, 0, Integer(@HintInfo)) <> 0;
end;

function TJvEx##ClassName.HitTest(X, Y: Integer): Boolean;
begin
  Result := InheritMsg(Self, CM_HITTEST, 0, Integer(PointToSmallPoint(Point(X, Y)))) <> 0;
end;

procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  InheritMsg(Self, CM_MOUSEENTER, 0, Integer(Control));
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  InheritMsg(Self, CM_MOUSELEAVE, 0, Integer(Control));
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
end;

{$IFNDEF HASAUTOSIZE}
 {$IFNDEF COMPILER6_UP}
procedure TJvEx##ClassName.SetAutoSize(Value: Boolean);
begin
  TOpenControl_SetAutoSize(Self, Value);
end;
 {$ENDIF !COMPILER6_UP}
{$ENDIF !HASAUTOSIZE}
*) // MACRO END CONTROL_VCL


(*$DEFINE JV_CONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
 {$IF not declared(PatchedVCLX)}
procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  inherited MouseEnter(Control);
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  inherited MouseLeave(Control);
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
end;
 {$IFEND}
*) // MACRO END CONTROL_VISUALCLX


(*$DEFINE JV_CONTROL_EVENTS_IMPL_COMMON(ClassName)
procedure TJvEx##ClassName.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvEx##ClassName.DoFocusChanged(Control: TWinControl);
begin
end;

function TJvEx##ClassName.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
begin
  {$IFDEF VCL}
  Result := InheritMsg(Self, WM_ERASEBKGND, Canvas.Handle, Param) <> 0;
  {$ELSE}
  Result := False; // Qt allways paints the background
  {$ENDIF VCL}
end;
*) // MACRO END CONTROL_COMMON


************ WinControl **********

(*$DEFINE JV_WINCONTROL_EVENTS_IMPL_VCL(ClassName)
procedure TJvEx##ClassName.CursorChanged;
begin
  InheritMsg(Self, CM_CURSORCHANGED);
end;

procedure TJvEx##ClassName.ShowHintChanged;
begin
  InheritMsg(Self, CM_SHOWHINTCHANGED);
end;

procedure TJvEx##ClassName.ShowingChanged;
begin
  InheritMsg(Self, CM_SHOWINGCHANGED);
end;

procedure TJvEx##ClassName.ControlsListChanging(Control: TControl; Inserting: Boolean);
begin
  Control_ControlsListChanging(Self, Control, Inserting);
end;

procedure TJvEx##ClassName.ControlsListChanged(Control: TControl; Inserting: Boolean);
begin
  Control_ControlsListChanged(Self, Control, Inserting);
end;

{$IFDEF JVCLThemesEnabledD56}
function TJvEx##ClassName.GetParentBackground: Boolean;
begin
  Result := JvThemes.GetParentBackground(Self);
end;

procedure TJvEx##ClassName.SetParentBackground(Value: Boolean);
begin
  JvThemes.SetParentBackground(Self, Value);
end;
{$ENDIF JVCLThemesEnabledD56}
*) // MACRO END WINCONTROL_VCL


(*$DEFINE JV_WINCONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
procedure TJvEx##ClassName.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  if WidgetControl_Painting(Self, Canvas, EventRegion) <> nil then
  begin // returns an interface
    DoPaintBackground(Canvas, 0);
    Paint;
  end;
end;

function TJvEx##ClassName.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := TWidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;
*) // MACRO END WINCONTROL_VISUALCLX


(*$DEFINE JV_WINCONTROL_EVENTS_IMPL_COMMON(ClassName)
procedure TJvEx##ClassName.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvEx##ClassName.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvEx##ClassName.DoKillFocus(FocusedWnd: HWND);
begin
end;
*) // MACRO END WINCONTROL_COMMON


// ********************************************************
// * differences in Control, WinControl and CustomControl *
// ********************************************************
(*$DEFINE JV_DIFF_EVENTS_IMPL_CONTROL(ClassName)
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  CONSTRUCTOR_CODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTRUCTOR_CODE
  inherited Destroy;
end;
*)

(*$DEFINE JV_DIFF_EVENTS_IMPL_WINCONTROL(ClassName)
{$IFDEF VCL}
JV_DIFF_EVENTS_IMPL_CONTROL(ClassName)
{$ENDIF VCL}
{$IFDEF VisualCLX}
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  CONSTRUCTOR_CODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTRUCTOR_CODE
  FCanvas.Free;
  inherited Destroy;
end;

procedure TJvEx##ClassName.Paint;
begin
  WidgetControl_DefaultPaint(Self, Canvas);
end;
{$ENDIF VisualCLX}
*)

(*$DEFINE JV_DIFF_EVENTS_IMPL_CUSTOMCONTROL(ClassName)
JV_DIFF_EVENTS_IMPL_CONTROL(ClassName)
*)

// ************************************************



(*$DEFINE JV_CONTROL_EVENTS_IMPL(ClassName)
{$IFDEF VCL}
JV_CONTROL_EVENTS_IMPL_VCL(ClassName)
{$ENDIF VCL}
{$IFDEF VisualCLX}
JV_CONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
{$ENDIF VisualCLX}
JV_CONTROL_EVENTS_IMPL_COMMON(ClassName)

JV_DIFF_EVENTS_IMPL_CONTROL(ClassName)
*)

// WinControl has different constructors/destructor for VCL and VisualCLX
(*$DEFINE JV_WINCONTROL_EVENTS_IMPL(ClassName)
{$IFDEF VCL}
JV_CONTROL_EVENTS_IMPL_VCL(ClassName)
JV_WINCONTROL_EVENTS_IMPL_VCL(ClassName)
{$ENDIF VCL}
{$IFDEF VisualCLX}
JV_CONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
JV_WINCONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
{$ENDIF VisualCLX}
JV_CONTROL_EVENTS_IMPL_COMMON(ClassName)
JV_WINCONTROL_EVENTS_IMPL_COMMON(ClassName)

JV_DIFF_EVENTS_IMPL_WINCONTROL(ClassName)
*)

// CustomControl is same as WinControl except the last macro line: JV_DIFF_EVENTS_IMPL_CUS...
(*$DEFINE JV_CUSTOMCONTROL_EVENTS_IMPL(ClassName)
{$IFDEF VCL}
JV_CONTROL_EVENTS_IMPL_VCL(ClassName)
JV_WINCONTROL_EVENTS_IMPL_VCL(ClassName)
{$ENDIF VCL}
{$IFDEF VisualCLX}
JV_CONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
JV_WINCONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
{$ENDIF VisualCLX}
JV_CONTROL_EVENTS_IMPL_COMMON(ClassName)
JV_WINCONTROL_EVENTS_IMPL_COMMON(ClassName)

JV_DIFF_EVENTS_IMPL_CUSTOMCONTROL(ClassName)
*)


{$DEFINE JV_CONTROL_EVENTS_IMPL_BEGIN(ClassName) JV_CONTROL_EVENTS_IMPL(ClassName)}
{$DEFINE JV_WINCONTROL_EVENTS_IMPL_BEGIN(ClassName) JV_WINCONTROL_EVENTS_IMPL(ClassName)}
{$DEFINE JV_CUSTOMCONTROL_EVENTS_IMPL_BEGIN(ClassName) JV_CUSTOMCONTROL_EVENTS_IMPL(ClassName)}

{$DEFINE JV_CONTROL_EVENTS_IMPL_END(ClassName) }
{$DEFINE JV_WINCONTROL_EVENTS_IMPL_END(ClassName) }
{$DEFINE JV_CUSTOMCONTROL_EVENTS_IMPL_END(ClassName) }


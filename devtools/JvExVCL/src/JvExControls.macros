{$UNDEF CONSTRUCTOR_CODE}
{$UNDEF DESTRUCTOR_CODE}
{$UNDEF IFISNOTCUSTOMFORM}

{$DEFINE EMPTYLINE}
{$DEFINE CONSTRUCTOR_CODE}
{$DEFINE DESTRUCTOR_CODE}
{$DEFINE IFISNOTCUSTOMFORM}


// This comment is inserted into every JvExXxx.pas file
(*$DEFINE WARNINGHEADER
{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExVCL/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}
*)

{ CustomControl differs from WinControl in JV_xxx_EVENTS_END }


// *************************************************************************
// *************************** INTERFACE MACROS ****************************
// *************************************************************************


// ****************** Control **********************
// used in all classes
(*$DEFINE JV_CONTROL_EVENTS_DECL_VCL
  protected
   // IJvControlEvents
    procedure VisibleChanged; dynamic;
    procedure EnabledChanged; dynamic;
    procedure TextChanged; dynamic;
    procedure FontChanged; dynamic;
    procedure ColorChanged; dynamic;
    procedure ParentFontChanged; dynamic;
    procedure ParentColorChanged; dynamic;
    procedure ParentShowHintChanged; dynamic;
    function WantKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; virtual;
    function HintShow(var HintInfo: THintInfo): Boolean; dynamic;
    function HitTest(X, Y: Integer): Boolean; dynamic;
    procedure MouseEnter(Control: TControl); dynamic;
    procedure MouseLeave(Control: TControl); dynamic;
    {$IFNDEF HASAUTOSIZE}
     {$IFNDEF COMPILER6_UP}
    procedure SetAutoSize(Value: Boolean); virtual;
     {$ENDIF !COMPILER6_UP}
    {$ENDIF !HASAUTOSIZE}
  public
    procedure Dispatch(var Msg); override;
*)

(*$DEFINE JV_CONTROL_EVENTS_DECL_VISUALCLX
  // IJvControlEvents
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
*)

(*$DEFINE JV_CONSTRUCTOR
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
*)

(*$DEFINE JV_FORMCONSTRUCTOR
  {$IFDEF VCL}
  private
    procedure CMShowingChanged(var Msg: TMessage); message CM_ShowingChanged;
    procedure CMDialogKey(var Msg: TCMDialogKey); message CM_DialogKey;
  {$ENDIF VCL}
  public
    constructor CreateNew(AOwner: TComponent; Dummy: Integer = 0); override;
    destructor Destroy; override;
*)

(*$DEFINE JV_CONTROL_EVENTS_DECL_COMMON
  private
    FHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  {$IFDEF NeedMouseEnterLeave}
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  {$ENDIF NeedMouseEnterLeave}
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property HintColor: TColor read FHintColor write FHintColor default clInfoBk;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  private
  {$IFDEF VCL}
    FAboutJVCL: TJVCLAboutInfo;
  published
    property AboutJVCL: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
    FAboutJVCLX: TJVCLAboutInfo;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCLX write FAboutJVCLX stored False;
  {$ENDIF VisualCLX}
*)

// ****************** Win Control **********************
// used in all TWinControl derived classes (excluding TWidgetControl)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL_VCL
  protected
   // IJvWinControlEvents
    procedure CursorChanged; dynamic;
    procedure ShowingChanged; dynamic;
    procedure ShowHintChanged; dynamic;
    procedure ControlsListChanging(Control: TControl; Inserting: Boolean); dynamic;
    procedure ControlsListChanged(Control: TControl; Inserting: Boolean); dynamic;
  {$IFDEF JVCLThemesEnabledD56}
  private
    function GetParentBackground: Boolean;
  protected
    procedure SetParentBackground(Value: Boolean); virtual;
    property ParentBackground: Boolean read GetParentBackground write SetParentBackground;
  {$ENDIF JVCLThemesEnabledD56}
*)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL_VISUALCLX
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure BoundsChanged; override;
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
*)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL_COMMON
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
*)

// ********************************************************
// * differences in Control, WinControl and CustomControl *
// ********************************************************

(*$DEFINE JV_DIFF_EVENTS_DECL_CONTROL
*)

(*$DEFINE JV_DIFF_EVENTS_DECL_WINCONTROL
  {$IFDEF VisualCLX}
  private
    FCanvas: TCanvas;
  protected
    procedure Paint; virtual;
    property Canvas: TCanvas read FCanvas;
  {$ENDIF VisualCLX}
*)


(*$DEFINE JV_DIFF_EVENTS_DECL_CUSTOMCONTROL
*)
// ************************************************


(*$DEFINE JV_EVENTS_CLASS(ClassName)
  TJvEx##ClassName = class(T##ClassName, IJvControlEvents, IPerformControl)
*)
(*$DEFINE JV_EVENTS_CLASS1(ClassName, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf1, IJvControlEvents, IPerformControl)
*)
(*$DEFINE JV_EVENTS_CLASS2(ClassName, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf2, Intf1, IJvControlEvents, IPerformControl)
*)
(*$DEFINE JV_EVENTS_CLASS3(ClassName, Intf3, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf3, Intf2, Intf1, IJvControlEvents, IPerformControl)
*)
(*$DEFINE JV_EVENTS_CLASS4(ClassName, Intf4, Intf3, Intf2, Intf1)
  TJvEx##ClassName = class(T##ClassName, Intf4, Intf3, Intf2, Intf1, IJvControlEvents, IPerformControl)
*)

// ****************** Class Declarations (combinations) **********************

(*$DEFINE JV_CONTROL_EVENTS_DECL
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL_VCL
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
  JV_CONTROL_EVENTS_DECL_VISUALCLX
  {$ENDIF VisualCLX}
  JV_CONTROL_EVENTS_DECL_COMMON
  JV_DIFF_EVENTS_DECL_CONTROL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_DECL
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL_VCL
  JV_WINCONTROL_EVENTS_DECL_VCL
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
  JV_CONTROL_EVENTS_DECL_VISUALCLX
  JV_WINCONTROL_EVENTS_DECL_VISUALCLX
  {$ENDIF VisualCLX}
  JV_CONTROL_EVENTS_DECL_COMMON
  JV_WINCONTROL_EVENTS_DECL_COMMON
  JV_DIFF_EVENTS_DECL_WINCONTROL
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS_DECL
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL_VCL
  JV_WINCONTROL_EVENTS_DECL_VCL
  {$ENDIF VCL}
  {$IFDEF VisualCLX}
  JV_CONTROL_EVENTS_DECL_VISUALCLX
  JV_WINCONTROL_EVENTS_DECL_VISUALCLX
  {$ENDIF VisualCLX}
  JV_CONTROL_EVENTS_DECL_COMMON
  JV_WINCONTROL_EVENTS_DECL_COMMON
  JV_DIFF_EVENTS_DECL_CUSTOMCONTROL
*)

(*$DEFINE JV_WIDGETCONTROL_EVENTS_DECL
  {$IFDEF VCL}
  JV_CONTROL_EVENTS_DECL_VCL
  JV_WINCONTROL_EVENTS_DECL_VCL
  {$ENDIF VCL}
  {$IFDEF VISUALCLX}
  JV_CONTROL_EVENTS_DECL_VISUALCLX
  JV_WINCONTROL_EVENTS_DECL_VISUALCLX
  {$ENDIF VISUALCLX}
  JV_CONTROL_EVENTS_DECL_COMMON
  JV_WINCONTROL_EVENTS_DECL_COMMON
  JV_DIFF_EVENTS_DECL_CUSTOMCONTROL
  JV_DIFF_EVENTS_DECL_WINCONTROL
*)

// ****************** Control **********************
(*$DEFINE JV_CONTROL_EVENTS_BEGIN(ClassName)
  JV_EVENTS_CLASS(ClassName)
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_EVENTS_CLASS1(ClassName, Intf1)
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_EVENTS_CLASS2(ClassName, Intf2, Intf1)
  JV_CONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CONTROL_EVENTS_BEGIN3(ClassName, Intf3, Intf2, Intf1)
  JV_EVENTS_CLASS3(ClassName, Intf3, Intf2, Intf1)
  JV_CONTROL_EVENTS_DECL
*)

// ****************** WinControl **********************

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN(ClassName)
  JV_EVENTS_CLASS1(ClassName, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_EVENTS_CLASS2(ClassName, Intf1, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WINCONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_EVENTS_CLASS3(ClassName, Intf2, Intf1, IJvWinControlEvents)
  JV_WINCONTROL_EVENTS_DECL
*)

// ****************** CustomControl **********************

(*$DEFINE JV_CUSTOMCONTROL_EVENTS_BEGIN(ClassName)
  JV_EVENTS_CLASS1(ClassName, IJvWinControlEvents)
  JV_CUSTOMCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_EVENTS_CLASS2(ClassName, Intf1, IJvWinControlEvents)
  JV_CUSTOMCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_EVENTS_CLASS3(ClassName, Intf2, Intf1, IJvWinControlEvents)
  JV_CUSTOMCONTROL_EVENTS_DECL
*)

// ****************** JvExWidgetControl **********************

(*$DEFINE JV_WIDGETCONTROL_EVENTS_BEGIN(ClassName)
  JV_EVENTS_CLASS2(ClassName, IJvWinControlEvents, IJvCustomControlEvents)
  JV_WIDGETCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WIDGETCONTROL_EVENTS_BEGIN1(ClassName, Intf1)
  JV_EVENTS_CLASS3(ClassName, Intf1, IJvWinControlEvents, IJvCustomControlEvents)
  JV_WIDGETCONTROL_EVENTS_DECL
*)

(*$DEFINE JV_WIDGETCONTROL_EVENTS_BEGIN2(ClassName, Intf2, Intf1)
  JV_EVENTS_CLASS4(ClassName, Intf2, Intf1, IJvWinControlEvents, IJvCustomControlEvents)
  JV_WIDGETCONTROL_EVENTS_DECL
*)


********************** Interface end macros *********************
(*$DEFINE JV_CONTROL_EVENTS_END(ClassName)
  end;

  TJvExPub##ClassName = class(TJvEx##ClassName)
  {$IFDEF VCL}
  published
    property BiDiMode;
    property DragCursor;
    property DragKind;
    property DragMode;
    property ParentBiDiMode;
    property OnEndDock;
    property OnStartDock;
  {$ENDIF VCL}
  end;
  EMPTYLINE
*)
{$DEFINE JV_WINCONTROL_EVENTS_END(ClassName) JV_CONTROL_EVENTS_END(ClassName)}
{$DEFINE JV_CUSTOMCONTROL_EVENTS_END(ClassName) JV_CONTROL_EVENTS_END(ClassName)}
{$DEFINE JV_WIDGETCONTROL_EVENTS_END(ClassName) JV_CONTROL_EVENTS_END(ClassName)}

(*$DEFINE JV_CONTROL_EVENTS(ClassName)
  JV_CONTROL_EVENTS_BEGIN(ClassName)
  JV_CONSTRUCTOR
  JV_CONTROL_EVENTS_END(ClassName)
*)

(*$DEFINE JV_WINCONTROL_EVENTS(ClassName)
  JV_WINCONTROL_EVENTS_BEGIN(ClassName)
  JV_CONSTRUCTOR
  JV_WINCONTROL_EVENTS_END(ClassName)
*)

(*$DEFINE JV_CUSTOMCONTROL_EVENTS(ClassName)
  JV_CUSTOMCONTROL_EVENTS_BEGIN(ClassName)
  JV_CONSTRUCTOR
  JV_CUSTOMCONTROL_EVENTS_END(ClassName)
*)

(*$DEFINE JV_WIDGETCONTROL_EVENTS(ClassName)
  {$IFDEF VCL}
  JV_WINCONTROL_EVENTS(ClassName)
  {$ENDIF VCL}
  {$IFDEF VISUALCLX}
  JV_WIDGETCONTROL_EVENTS_BEGIN(ClassName)
  JV_CONSTRUCTOR
  JV_WIDGETCONTROL_EVENTS_END(ClassName)
  {$ENDIF VISUALCLX}
*)

(*$DEFINE JV_CUSTOMFORM_EVENTS(ClassName)
  JV_CUSTOMCONTROL_EVENTS_BEGIN(ClassName)
  JV_FORMCONSTRUCTOR
  JV_CUSTOMCONTROL_EVENTS_END(ClassName)
*)

// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************

(*$DEFINE JV_CONTROL_EVENTS_IMPL_VCL(ClassName)
procedure TJvEx##ClassName.Dispatch(var Msg);
asm
        JMP     DispatchMsg
end;

procedure TJvEx##ClassName.VisibleChanged;
asm
        MOV     EDX, CM_VISIBLECHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.EnabledChanged;
asm
        MOV     EDX, CM_ENABLEDCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.TextChanged;
asm
        MOV     EDX, CM_TEXTCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.FontChanged;
asm
        MOV     EDX, CM_FONTCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.ColorChanged;
asm
        MOV     EDX, CM_COLORCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.ParentFontChanged;
asm
        MOV     EDX, CM_PARENTFONTCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.ParentShowHintChanged;
asm
        MOV     EDX, CM_PARENTSHOWHINTCHANGED
        JMP     InheritMsg
end;

function TJvEx##ClassName.WantKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := InheritMsgEx(Self, CM_DIALOGCHAR, Word(Key), ShiftStateToKeyData(Shift)) <> 0;
end;

function TJvEx##ClassName.HintShow(var HintInfo: THintInfo): Boolean;
begin
  if FHintColor <> clNone then
    HintInfo.HintColor := FHintColor;
  Result := InheritMsgEx(Self, CM_HINTSHOW, 0, Integer(@HintInfo)) <> 0;
end;

function TJvEx##ClassName.HitTest(X, Y: Integer): Boolean;
begin
  Result := InheritMsgEx(Self, CM_HITTEST, 0, Integer(PointToSmallPoint(Point(X, Y)))) <> 0;
end;

procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FOnMouseEnter);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FOnMouseLeave);
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  InheritMsg(Self, CM_PARENTCOLORCHANGED);
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

{$IFNDEF HASAUTOSIZE}
 {$IFNDEF COMPILER6_UP}
procedure TJvEx##ClassName.SetAutoSize(Value: Boolean);
begin
  TOpenControl_SetAutoSize(Self, Value);
end;
 {$ENDIF !COMPILER6_UP}
{$ENDIF !HASAUTOSIZE}
*) // MACRO END CONTROL_VCL


(*$DEFINE JV_CONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver);
  inherited MouseEnter(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
  {$IFEND}
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver);
  inherited MouseLeave(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
  {$IFEND}
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvEx##ClassName.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvEx##ClassName.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvEx##ClassName.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  EMPTYLINE
*) // MACRO END CONTROL_VISUALCLX


(*$DEFINE JV_CONTROL_EVENTS_IMPL_COMMON(ClassName)
procedure TJvEx##ClassName.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvEx##ClassName.DoFocusChanged(Control: TWinControl);
begin
end;
  EMPTYLINE
*) // MACRO END CONTROL_COMMON


(*$DEFINE JV_WINCONTROL_EVENTS_IMPL_VCL(ClassName)
procedure TJvEx##ClassName.CursorChanged;
asm
        MOV     EDX, CM_CURSORCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.ShowHintChanged;
asm
        MOV     EDX, CM_SHOWHINTCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.ShowingChanged;
asm
        MOV     EDX, CM_SHOWINGCHANGED
        JMP     InheritMsg
end;

procedure TJvEx##ClassName.ControlsListChanging(Control: TControl; Inserting: Boolean);
asm
        JMP     Control_ControlsListChanging
end;

procedure TJvEx##ClassName.ControlsListChanged(Control: TControl; Inserting: Boolean);
asm
        JMP     Control_ControlsListChanged
end;

{$IFDEF JVCLThemesEnabledD56}
function TJvEx##ClassName.GetParentBackground: Boolean;
asm
        JMP     JvThemes.GetParentBackground
end;

procedure TJvEx##ClassName.SetParentBackground(Value: Boolean);
asm
        JMP     JvThemes.SetParentBackground
end;
{$ENDIF JVCLThemesEnabledD56}
  EMPTYLINE
*) // MACRO END WINCONTROL_VCL

(*$DEFINE JV_WINCONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
function TJvEx##ClassName.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvEx##ClassName.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvEx##ClassName.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvEx##ClassName.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvEx##ClassName.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvEx##ClassName.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvEx##ClassName.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvEx##ClassName.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvEx##ClassName.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := inherited EventFilter(Sender, Event);
  Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
end;

procedure TJvEx##ClassName.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvEx##ClassName.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;
  EMPTYLINE
*) // MACRO END WINCONTROL_VISUALCLX

(*$DEFINE JV_WINCONTROL_EVENTS_IMPL_COMMON(ClassName)
procedure TJvEx##ClassName.DoBoundsChanged;
begin
end;

procedure TJvEx##ClassName.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvEx##ClassName.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvEx##ClassName.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvEx##ClassName.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  EMPTYLINE
*) // MACRO END WINCONTROL_COMMON


// ********************************************************
// * differences in Control, WinControl and CustomControl *
// ********************************************************
(*$DEFINE JV_DIFF_EVENTS_IMPL_CONTROL(ClassName)
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  {$IFDEF VisualCLX}
  WindowProc := WndProc;
  {$ENDIF VisualCLX}
  inherited Create(AOwner);
  FHintColor := Application.HintColor;
  CONSTRUCTOR_CODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTRUCTOR_CODE
  inherited Destroy;
end;
 EMPTYLINE
*)

(*$DEFINE JV_DIFF_EVENTS_IMPL_WINCONTROL(ClassName)
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  {$IFDEF VisualCLX}
  WindowProc := WndProc;
  {$ENDIF VisualCLX}
  inherited Create(AOwner);
  {$IFDEF VisualCLX}
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  {$ENDIF VisualCLX}
  FHintColor := Application.HintColor;
  CONSTRUCTOR_CODE
end;

{$IFDEF VisualCLX}
procedure TJvEx##ClassName.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvEx##ClassName.Paint;
begin
  WidgetControl_DefaultPaint(Self, Canvas);
end;
{$ENDIF VisualCLX}

destructor TJvEx##ClassName.Destroy;
begin
  inherited Destroy;
end;
  EMPTYLINE
*) // end macro JV_DIFF_EVENTS_IMPL_WINCONTROL

(*$DEFINE JV_EVENTS_IMPL_DOUBLEBUFFERED(ClassName)
procedure TJvEx##ClassName.ColorChanged;
begin
  WidgetControl_ColorChanged(Self);
end;

function TJvEx##ClassName.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;

procedure TJvEx##ClassName.SetDoubleBuffered(Value: Boolean);
begin
  if Value <> FDoubleBuffered then
  begin
    if Value then
      QWidget_setBackgroundMode(Handle, QWidgetBackgroundMode_NoBackground)
    else
      QWidget_setBackgroundMode(Handle, QWidgetBackgroundMode_PaletteBackground);
    FDoubleBuffered := Value;
  end;
end;

procedure TJvEx##ClassName.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  CustomControl_Painting(Self, Canvas, EventRegion);
end;
 EMPTYLINE
*) // end of macro JV_EVENTS_IMPL_DOUBLEBUFFERED

(*$DEFINE JV_DIFF_EVENTS_IMPL_CUSTOMCONTROL(ClassName)
{$IFDEF VCL}
JV_DIFF_EVENTS_IMPL_CONTROL(ClassName)
{$ENDIF VCL}
{$IFDEF VisualCLX}
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  CONSTRUCTOR_CODE
  DoubleBuffered := True;
  FHintColor := Application.HintColor;
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTRUCTOR_CODE
  inherited Destroy;
end;
  EMPTYLINE
JV_EVENTS_IMPL_DOUBLEBUFFERED(ClassName)
  EMPTYLINE
{$ENDIF VisualCLX}
*)

(*$DEFINE JV_DIFF_EVENTS_IMPL_WIDGETCONTROL(ClassName)
{$IFDEF VCL}
JV_DIFF_EVENTS_IMPL_WINCONTROL(ClassName)
{$ENDIF VCL}
{$IFDEF VISUALCLX}
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  CONSTRUCTOR_CODE
  DoubleBuffered := True;
  FHintColor := Application.HintColor;
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTRUCTOR_CODE
  FCanvas.Free;
  inherited Destroy;
end;

procedure TJvEx##ClassName.Paint;
begin
  WidgetControl_DefaultPaint(Self, Canvas);
end;
  EMPTYLINE
JV_EVENTS_IMPL_DOUBLEBUFFERED(ClassName)
  EMPTYLINE
{$ENDIF VisualCLX}
*) // MACRO END JV_DIFF_EVENTS_IMPL_WIDGETCONTROL


(*$DEFINE JV_DIFF_EVENTS_IMPL_CUSTOMFORM(ClassName)
constructor TJvEx##ClassName.CreateNew(AOwner: TComponent; Dummy: Integer);
begin
  {$IFDEF VisualCLX}
  WindowProc := WndProc;
  {$ENDIF VisualCLX}
  inherited CreateNew(AOwner, Dummy);
  FHintColor := Application.HintColor;
  {$IFDEF VisualCLX}
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  {$ENDIF VisualCLX}
  CONSTRUCTOR_CODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTRUCTOR_CODE
  inherited Destroy;
end;

{$IFDEF VisualCLX}
  EMPTYLINE
JV_EVENTS_IMPL_DOUBLEBUFFERED(ClassName)
{$ENDIF VisualCLX}
{$IFDEF VCL}
procedure TJvEx##ClassName.CMShowingChanged(var Msg: TMessage);
begin
  if Showing then
    SendMessage(Handle, WM_CHANGEUISTATE, UIS_INITIALIZE, 0);
  inherited;
end;

procedure TJvEx##ClassName.CMDialogKey(var Msg: TCMDialogKey);
begin
  case Msg.CharCode of
    VK_LEFT..VK_DOWN, VK_TAB:
      SendMessage(Handle, WM_CHANGEUISTATE, MakeLong(UIS_CLEAR, UISF_HIDEFOCUS), 0);
    VK_MENU:
      SendMessage(Handle, WM_CHANGEUISTATE, MakeLong(UIS_CLEAR, UISF_HIDEFOCUS or UISF_HIDEACCEL), 0);
  end;
  inherited;
end;
{$ENDIF VCL}
  EMPTYLINE
*) // MACRO END JV_DIFF_EVENTS_IMPL_CUSTOMFORM

// ************************************************

(*$DEFINE JV_CONTROL_EVENTS_IMPL(ClassName)
{$IFDEF VCL}
JV_CONTROL_EVENTS_IMPL_VCL(ClassName)
{$ENDIF VCL}
{$IFDEF VisualCLX}
JV_CONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
{$ENDIF VisualCLX}
JV_CONTROL_EVENTS_IMPL_COMMON(ClassName)
JV_DIFF_EVENTS_IMPL_CONTROL(ClassName)
*)

// common part for the following 4 macros
(*$DEFINE JV_WINCUSTOMCONTROL_EVENTS_IMPL(ClassName)

{$IFDEF VCL}
JV_CONTROL_EVENTS_IMPL_VCL(ClassName)
JV_WINCONTROL_EVENTS_IMPL_VCL(ClassName)
{$ENDIF VCL}
{$IFDEF VisualCLX}
JV_CONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
JV_WINCONTROL_EVENTS_IMPL_VISUALCLX(ClassName)
{$ENDIF VisualCLX}
JV_CONTROL_EVENTS_IMPL_COMMON(ClassName)
JV_WINCONTROL_EVENTS_IMPL_COMMON(ClassName)
*)

// WinControl has different constructors/destructor for VCL and VisualCLX
(*$DEFINE JV_WINCONTROL_EVENTS_IMPL(ClassName)
JV_WINCUSTOMCONTROL_EVENTS_IMPL(ClassName)
JV_DIFF_EVENTS_IMPL_WINCONTROL(ClassName)
*)

// CustomControl is the same as WinControl except the last macro line: JV_DIFF_EVENTS_IMPL_CUS...
(*$DEFINE JV_CUSTOMCONTROL_EVENTS_IMPL(ClassName)
JV_WINCUSTOMCONTROL_EVENTS_IMPL(ClassName)
JV_DIFF_EVENTS_IMPL_CUSTOMCONTROL(ClassName)
*)

// WidgetControl is the same as WinControl except the last macro line: JV_DIFF_EVENTS_IMPL_CUS...
(*$DEFINE JV_WIDGETCONTROL_EVENTS_IMPL(ClassName)
JV_WINCUSTOMCONTROL_EVENTS_IMPL(ClassName)
JV_DIFF_EVENTS_IMPL_WIDGETCONTROL(ClassName)
*)

// CustomForm is the same as CustomControl except the last macro line
(*$DEFINE JV_CUSTOMFORM_EVENTS_IMPL(ClassName)
JV_WINCUSTOMCONTROL_EVENTS_IMPL(ClassName)
JV_DIFF_EVENTS_IMPL_CUSTOMFORM(ClassName)
*)

{$DEFINE JV_CONTROL_EVENTS_IMPL_BEGIN(ClassName) JV_CONTROL_EVENTS_IMPL(ClassName)}
{$DEFINE JV_WINCONTROL_EVENTS_IMPL_BEGIN(ClassName) JV_WINCONTROL_EVENTS_IMPL(ClassName)}
{$DEFINE JV_CUSTOMCONTROL_EVENTS_IMPL_BEGIN(ClassName) JV_CUSTOMCONTROL_EVENTS_IMPL(ClassName)}

{$DEFINE JV_CONTROL_EVENTS_IMPL_END(ClassName) }
{$DEFINE JV_WINCONTROL_EVENTS_IMPL_END(ClassName) }
{$DEFINE JV_CUSTOMCONTROL_EVENTS_IMPL_END(ClassName) }


// ***********************************************************************
// * BEGIN - MACROS for the EDIT controls
// ***********************************************************************
(*$DEFINE JV_EDITCONTROL_EVENTS_COMMON_BEGIN(ClassName)
  private
    FClipboardCommands: TJvClipboardCommands;
    {$IFDEF VisualCLX}
    FEditRect: TRect; // EM_GETRECT
    procedure EMGetRect(var Msg: TMessage); message EM_GETRECT;
    procedure EMSetRect(var Msg: TMessage); message EM_SETRECT;
    {$ENDIF VisualCLX}
  protected
    procedure DoUndo; dynamic;
    procedure DoClearText; dynamic;
    procedure DoClipboardPaste; dynamic;
    procedure DoClipboardCopy; dynamic;
    procedure DoClipboardCut; dynamic;
    procedure SetClipboardCommands(const Value: TJvClipboardCommands); virtual;
    property ClipboardCommands: TJvClipboardCommands read FClipboardCommands
      write SetClipboardCommands default [caCopy..caUndo];
  {$IFDEF VisualCLX}
  public
    procedure Clear; override;
  {$ENDIF VisualCLX}
  JV_CONSTRUCTOR
*)

(*$DEFINE JV_EDITCONTROL_EVENTS_COMMON_IMPL_BEGIN(ClassName)
procedure TJvEx##ClassName.DoClearText;
begin
  // (ahuser) there is no caClear so we restrict it to caCut
  if caCut in ClipboardCommands then
    {$IFDEF VCL}
    InheritMsg(Self, WM_CLEAR);
    {$ENDIF VCL}
    {$IFDEF VisualCLX}
    inherited Clear;
    {$ENDIF VisualCLX}
end;

procedure TJvEx##ClassName.DoUndo;
begin
  if caUndo in ClipboardCommands then
    TCustomEdit_Undo(Self);
end;

procedure TJvEx##ClassName.DoClipboardPaste;
begin
  if caPaste in ClipboardCommands then
    TCustomEdit_Paste(Self);
end;

procedure TJvEx##ClassName.DoClipboardCopy;
begin
  if caCopy in ClipboardCommands then
    TCustomEdit_Copy(Self);
end;

procedure TJvEx##ClassName.DoClipboardCut;
begin
  if caCut in ClipboardCommands then
    TCustomEdit_Cut(Self);
end;

procedure TJvEx##ClassName.SetClipboardCommands(const Value: TJvClipboardCommands);
begin
  FClipboardCommands := Value;
end;

{$IFDEF VisualCLX}

procedure TJvEx##ClassName.Clear;
begin
  DoClearText;
end;

procedure TJvEx##ClassName.EMGetRect(var Msg: TMessage);
begin
  if Msg.LParam <> 0 then
    if IsRectEmpty(FEditRect) then
    begin
      PRect(Msg.LParam)^ := ClientRect;
      if Self.BorderStyle = bsSingle then
        InflateRect(PRect(Msg.LParam)^, -2, -2);
    end
    else
      PRect(Msg.LParam)^ := FEditRect;
end;

procedure TJvEx##ClassName.EMSetRect(var Msg: TMessage);
begin
  if Msg.LParam <> 0 then
    FEditRect := PRect(Msg.LParam)^
  else
    FEditRect := ClientRect;
  Invalidate;
end;

{$ENDIF VisualCLX}

*) // end of JV_EDITCONTROL_EVENTS_COMMON_IMPL_BEGIN


// ************
(*$DEFINE JV_EDITCONTROL_EVENTS_BEGIN(ClassName)
  JV_WINCONTROL_EVENTS_BEGIN1(ClassName,IJvEditControlEvents)
  JV_EDITCONTROL_EVENTS_COMMON_BEGIN(ClassName)
*)

(*$DEFINE JV_EDITCONTROL_EVENTS_END(ClassName)
  JV_WINCONTROL_EVENTS_END(ClassName)
*)

(*$DEFINE JV_EDITCONTROL_EVENTS(ClassName)
  JV_EDITCONTROL_EVENTS_BEGIN(ClassName)
  JV_EDITCONTROL_EVENTS_END(ClassName)
*)
// ***********************************************************************
// * START - MACROS for the EDIT controls
// ***********************************************************************
(*$DEFINE JV_EDITCONTROL_EVENTS_IMPL_BEGIN(ClassName)
JV_WINCONTROL_EVENTS_IMPL_BEGIN(ClassName)
JV_EDITCONTROL_EVENTS_COMMON_IMPL_BEGIN(ClassName)
JV_WINCONTROL_EVENTS_IMPL_END(ClassName)
*)

(*$DEFINE JV_EDITCONTROL_EVENTS_IMPL_END(ClassName)
*)

(*$DEFINE JV_EDITCONTROL_EVENTS_IMPL(ClassName)
JV_EDITCONTROL_EVENTS_IMPL_BEGIN(ClassName)
JV_EDITCONTROL_EVENTS_IMPL_END(ClassName)
*)
// ***********************************************************************
// * END - MACROS for the EDIT controls
// ***********************************************************************

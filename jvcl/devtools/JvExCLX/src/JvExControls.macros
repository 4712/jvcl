{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http:{www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvExControls.macros, released on 2004-09-29

The Initial Developer of the Original Code is André Snepvangers [ASnepvangers att users.sourceforge.net]
Portions created by André Snepvangers are Copyright (C) 2004 André Snepvangers.
All Rights Reserved.

Contributor(s):

You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http:(jvcl.sourceforge.net

Description:

This file contains macro's needed to build the JvExVCL classes.
You need the Pascal PreProcessor (dpp) from Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
to process these files.
It is included in JVCL 3: devtools\dpp32

Known Issues:
  UNDER CONSTRUCTION !!
-----------------------------------------------------------------------------}

// This comment is inserted into every JvExXxx.pas file
(*$DEFINE WARNINGHEADER
{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExCLX/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}
*)

(*$DEFINE UNITVERSION
const
  UnitVersion = '$Id$';

initialization
  OutputDebugString(PChar('Opened ' + UnitVersion));

finalization
  OutputDebugString(PChar('Closed ' + UnitVersion));
EMPTYLINE
*)

{$UNDEF CREATE_CUSTOMCODE}
{$UNDEF DESTROY_CUSTOMCODE}
{$UNDEF IFISNOTCUSTOMFORM}

{$DEFINE EMPTYLINE}
{$DEFINE CREATE_CUSTOMCODE}
{$DEFINE DESTROY_CUSTOMCODE}
{$DEFINE IFISNOTCUSTOMFORM}

// *************************************************************************
// *************************** INTERFACE MACROS ****************************
// *************************************************************************

(*$DEFINE JV_DECL_CONTROL
  { Control }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FOnParentColorChanged: TNotifyEvent;
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    procedure ColorChanged;
    procedure EnabledChanged;
    procedure FocusChanged(Control: TWinControl);
    procedure FontChanged;
    procedure MouseEnter(AControl: TControl);
    procedure MouseLeave(AControl: TControl);
    procedure ParentColorChanged;
    procedure ParentFontChanged;
    procedure ParentShowHintChanged;
    procedure TextChanged;
    procedure VisibleChanged;
    function WantKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; // CM_DIALOGCHAR
    function HintShow(var HintInfo: THintInfo): Boolean;
    function HitTest(X, Y: Integer): Boolean; // CM_HITTEST
    procedure SetAutoSize(Value: Boolean);
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  published
    property AboutJVCL: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
    property HintColor: TColor read FHintColor write FHintColor default clDefault;
*)

(*$DEFINE JV_CONTROL_BEGIN(ClassName)
  { Control begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
*)

(*$DEFINE JV_CONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CONTROL(ClassName)
  JV_CONTROL_BEGIN(ClassName)
  JV_CONTROL_END(ClassName)
*)

//
//
(*$DEFINE JV_DECL_WINCONTROL
  { WinControl }
  protected
    procedure BoundsChanged;
    procedure CursorChanged;
    procedure ShowingChanged;
    procedure ShowHintChanged;
    procedure GetDlgCode(var Code: TDlgCodes); virtual;
    procedure GotFocus(FocusedWnd: QWidgetH); dynamic;
    procedure LostFocus(FocusedWnd: QWidgetH); dynamic;
    function PaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
*)


(*$DEFINE JV_WINCONTROL_BEGIN(ClassName)
  { QWinCustomControl }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_WINCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL(ClassName)
  JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  JV_WINCUSTOMCONTROL_END(ClassName)
*)


(*$DEFINE JV_WINCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)


(*$DEFINE JV_DECL_EDITCONTROL
  { QEditControl }
  private
    FClipboardCommands: TJvClipboardCommands;
  protected
    procedure SetClipboardCommands(const Value: TJvClipboardCommands); virtual;
    function GetReadOnly: Boolean; virtual;
    {$IFDEF HAS_SETREADONLY}
    procedure SetReadOnly(const Value: Boolean); override;
    {$ELSE}
    procedure SetReadOnly(Value: Boolean); virtual;
    {$ENDIF HAS_SETREADONLY}
  public
    procedure PasteFromClipboard; reintroduce; virtual;
    procedure CopyToClipboard; reintroduce; virtual;
    procedure Clear; reintroduce; virtual;
    procedure CutToClipboard; reintroduce; virtual;
    procedure Undo; reintroduce; virtual;
  published
    property ClipboardCommands: TJvClipboardCommands read FClipboardCommands
      write SetClipboardCommands default [caCopy..caUndo];
    property ReadOnly: boolean read GetReadOnly write SetReadOnly default False;
*)

(*$DEFINE JV_EDITCONTROL_BEGIN(ClassName)
  { QEditControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
  JV_DECL_EDITCONTROL
*)

(*$DEFINE JV_EDITCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QEditControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_EDITCONTROL(ClassName)
  JV_EDITCONTROL_BEGIN(ClassName)
  JV_EDITCONTROL_END(ClassName)
*)

//
// CustomForm
//

(*$DEFINE JV_DECL_CUSTOMFORM
  { CustomForm }
  public
    constructor CreateNew(AOwner: TComponent; Dummy: Integer = 0); override;
*)

(*$DEFINE JV_CUSTOMFORM_BEGIN(ClassName)
  { QCustomForm }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_CUSTOMFORM_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomForm }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMFORM(ClassName)
  JV_CUSTOMFORM_BEGIN(ClassName)
  JV_CUSTOMFORM_END(ClassName)
*)


// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************

(*$DEFINE JV_IMPL_CONTROL(ClassName)
{ Control }
procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  FSavedHintColor := Application.HintColor;
  if FHintColor <> clDefault then
  begin
    Application.HintColor := FHintColor;
  end;
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Control);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  if FHintColor <> clDefault then
  begin
    Application.HintColor := FSavedHintColor;
  end;
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Control);
end;

procedure TJvEx##ClassName.FocusChanged(Control: TWinControl);
begin
  { notification }
end;

procedure TJvEx##ClassName.FontChanged;
begin

end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CONTROL

(*$DEFINE JV_IMPL_CONTROL_CREATE(ClassName)
{ Control Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FHintColor := clDefault;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
 EMPTYLINE
*)

(*$DEFINE JV_CONTROL_IMPL(ClassName)
JV_IMPL_CONTROL_CREATE(ClassName)
procedure TJvEx##ClassName.ColorChanged;
begin

end;

JV_IMPL_CONTROL(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)


(*$DEFINE JV_IMPL_WINCONTROL(ClassName)
{ WinControl }
procedure TJvEx##ClassName.GotFocus(FocusedWnd: HWND);
begin
  { notification }
end;

procedure TJvEx##ClassName.LostFocus(FocusedWnd: HWND);
begin
  { notification }
end;

function TJvEx##ClassName.PaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
begin
  Result := false;
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.BoundsChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.CursorChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.ShowingChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.ShowHintChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.GetDlgCode(var Code: TDlgCodes);
begin
  Result := InputKeys;
end;
  EMPTYLINE
*) // MACRO END WINCONTROL

(*$DEFINE JV_WINCONTROL_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_WINCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_EDITCONTROL(ClassName)
{ EditControl }
function TJvEx##ClassName.GetReadOnly: Boolean;
begin
  Result := inherited ReadOnly;
end;

{$IFDEF HAS_SETREADONLY}
procedure TJvEx##ClassName.SetReadOnly(const Value: Boolean);
begin
  inherited SetReadOnly(Value);
  SetClipboardCommands(FClipboardCommands);
end;
{$ELSE}
procedure TJvEx##ClassName.SetReadOnly(Value: Boolean);
begin
  inherited ReadOnly := Value;
  SetClipboardCommands(FClipboardCommands);
end;
{$ENDIF HAS_SETREADONLY}

procedure TJvEx##ClassName.SetClipboardCommands(const Value: TJvClipboardCommands);
begin
  if ReadOnly then
    FClipboardCommands := Value - [caCut, caPaste]
  else
    FClipboardCommands := Value;
end;

procedure TJvEx##ClassName.Undo;
begin
  if caUndo in ClipboardCommands then
    inherited Undo;
end;

procedure TJvEx##ClassName.CopyToClipboard;
begin
  if caCopy in ClipboardCommands then
    inherited CopyToClipboard;
end;

procedure TJvEx##ClassName.CutToClipboard;
begin
  if caCut in ClipboardCommands then
    inherited CutToClipboard;
end;

procedure TJvEx##ClassName.Clear;
begin
  inherited Clear;
end;

procedure TJvEx##ClassName.PasteFromClipboard;
begin
  if caPaste in ClipboardCommands then
    inherited PasteFromClipboard;
end;


*) // end of JV_IMPL_EDITCONTROL


(*$DEFINE JV_EDITCONTROL_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_EDITCONTROL(ClassName)
   JV_IMPL_WINCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_CUSTOMFORM(ClassName)
{ QCustomForm }
constructor TJvEx##ClassName.CreateNew(AOwner: TComponent; Dummy: Integer);
begin
  inherited CreateNew(AOwner, Dummy);
  FHintColor := clDefault;
  CREATE_CUSTOMCODE
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CUSTOMFORM

// ************************************************

(*$DEFINE JV_CUSTOMFORM_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_CUSTOMFORM(ClassName)
   JV_IMPL_WINCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)



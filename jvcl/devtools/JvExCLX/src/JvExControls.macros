{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http:{www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvExControls.macros, released on 2004-09-29

The Initial Developer of the Original Code is André Snepvangers [ASnepvangers att users.sourceforge.net]
Portions created by André Snepvangers are Copyright (C) 2004 André Snepvangers.
All Rights Reserved.

Contributor(s): Andreas Hausladen.

You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http:(jvcl.sourceforge.net

Description:

This file contains macro's needed to build the JvExVCL classes.
You need the Pascal PreProcessor (dpp) from Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
to process these files.
It is included in JVCL 3: devtools\dpp32

Known Issues:
  UNDER CONSTRUCTION !!
-----------------------------------------------------------------------------}

// This comment is inserted into every JvExXxx.pas file
(*$DEFINE WARNINGHEADER
{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExCLX/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}
*)

(*$DEFINE UNITVERSION
const
  UnitVersion = '$Id$';

initialization
  OutputDebugString(PChar('Opened ' + UnitVersion));

finalization
  OutputDebugString(PChar('Closed ' + UnitVersion));
EMPTYLINE
*)

{$UNDEF CREATE_CUSTOMCODE}
{$UNDEF DESTROY_CUSTOMCODE}
{$UNDEF IFISNOTCUSTOMFORM}

{$DEFINE EMPTYLINE}
{$DEFINE CREATE_CUSTOMCODE}
{$DEFINE DESTROY_CUSTOMCODE}
{$DEFINE IFISNOTCUSTOMFORM}

// *************************************************************************
// *************************** INTERFACE MACROS ****************************
{
    procedure CMHitTest(var Message: TCMHitTest); message CM_HITTEST;
    procedure CMDesignHitTest(var Message: TCMDesignHitTest); message CM_DESIGNHITTEST;
    procedure CMFloat(var Message: TCMFloat); message CM_FLOAT;
    procedure CMMouseWheel(var Message: TCMMouseWheel); message CM_MOUSEWHEEL;
    procedure WMContextMenu(var Message: TWMContextMenu); message WM_CONTEXTMENU;

}
// *************************************************************************

(*$DEFINE JV_DECL_CONTROL
  { Control }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FInputKeys: TInputKeys;
    FOnParentColorChanged: TNotifyEvent;
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    procedure WndProc(var Message: TMessage); override;
    procedure ColorChanged; dynamic;
    procedure EnabledChanged; dynamic;
    procedure FocusChanged(Control: TWinControl); dynamic;
    procedure FontChanged; dynamic;
    function HintShow(var HintInfo: THintInfo): Boolean; dynamic;
    function HitTest(X, Y: Integer): Boolean; dynamic;
    procedure MouseEnter(AControl: TControl); dynamic;
    procedure MouseLeave(AControl: TControl); dynamic;
    procedure ParentColorChanged; dynamic;
    procedure ParentFontChanged; dynamic;
    procedure ParentShowHintChanged; dynamic;
    procedure TextChanged; dynamic;
    procedure VisibleChanged; dynamic;
    function WantKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; dynamic; // CM_DIALOGCHAR
    procedure SetAutoSize(Value: Boolean);
    property InputKeys: TInputKeys read FInputKeys write FInputKeys;
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  published
    property AboutJVCL: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
    property HintColor: TColor read FHintColor write FHintColor default clDefault;
*)

(*$DEFINE JV_CONTROL_BEGIN(ClassName)
  { Control begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
*)

(*$DEFINE JV_CONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CONTROL(ClassName)
  JV_CONTROL_BEGIN(ClassName)
  JV_CONTROL_END(ClassName)
*)

//
//
(*$DEFINE JV_DECL_WINCONTROL
  { WinControl }
  private
    FInputKeys: TInputKeys;
  protected
    procedure BoundsChanged; dynamic;
    procedure CursorChanged; dynamic;
    procedure DoKillFocus(Wnd: HWND); dynamic;
    procedure DoSetFocus(Wnd: HWND); dynamic;
    procedure GotFocus; dynamic;
    procedure LostFocus; dynamic;
    function PaintBackground(Canvas: TCanvas; Param: Integer): Boolean; dynamic;
    procedure ShowingChanged; dynamic;
    procedure ShowHintChanged; dynamic;
    property InputKeys: TInputKeys read FInputKeys write FInputKeys;
*)


(*$DEFINE JV_WINCONTROL_BEGIN(ClassName)
  { WinCustomControl }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_WINCONTROL_END(ClassName)
  { WinCustomControl }
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL(ClassName)
  JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  JV_WINCUSTOMCONTROL_END(ClassName)
*)


(*$DEFINE JV_WINCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)


(*$DEFINE JV_DECL_EDITCONTROL
  { EditControl }
  private
    FClipboardCommands: TJvClipboardCommands;
  protected
    procedure SetClipboardCommands(const Value: TJvClipboardCommands); dynamic;
  published
    property ClipboardCommands: TJvClipboardCommands read FClipboardCommands
      write SetClipboardCommands default [caCopy..caUndo];
*)

(*$DEFINE JV_EDITCONTROL_BEGIN(ClassName)
  { EditControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
  JV_DECL_EDITCONTROL
*)

(*$DEFINE JV_EDITCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QEditControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_EDITCONTROL(ClassName)
  JV_EDITCONTROL_BEGIN(ClassName)
  JV_EDITCONTROL_END(ClassName)
*)

//
// CustomForm
//

(*$DEFINE JV_DECL_CUSTOMFORM
  { CustomForm }
  public
    constructor CreateNew(AOwner: TComponent; Dummy: Integer = 0); override;
*)

(*$DEFINE JV_CUSTOMFORM_BEGIN(ClassName)
  { QCustomForm }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_CUSTOMFORM_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomForm }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMFORM(ClassName)
  JV_CUSTOMFORM_BEGIN(ClassName)
  JV_CUSTOMFORM_END(ClassName)
*)


// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************

(*$DEFINE JV_IMPL_CONTROL(ClassName)
{ Control }

procedure TJvEx##ClassName.WndProc(var Message: TMessage)
begin
  with Message as TJvMessage do
  begin
    case of Msg of
    CM_COLORCHANGED       : ColorChanged;
    CM_ENABLEDCHANGED     : EnabledChanged;
    CM_FOCUSCHANGED       : FocusChanged;
    CM_FONTCHANGED        : FontChanged;
    CM_CURSORCHANGED      : CursorChanged;
    CM_TEXTCHANGED        : TextChanged ;
    CM_MOUSEENTER         : MouseEnter(Self);
    CM_MOUSELEAVE         : MouseLeave(Self);
    CM_PARENTCOLORCHANGED : ParentColorChanged;
    CM_PARENTFONTCHANGED  : ParentFontChanged;
    CM_HINTSHOW:
    begin
      HintInfo.HintColor := GetHintColor(Parent);
      Handled := HintShow(HintInfo);
    end;
    if not Handled then
      inherited WinProc(Message);
  end;
end;

procedure TJvEx##ClassName.MouseEnter(Control: TControl);
begin
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
end;

procedure TJvEx##ClassName.MouseLeave(Control: TControl);
begin
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
end;

procedure TJvEx##ClassName.FocusChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.FontChanged;
begin
  { notification }
end;

function TJvEx##ClassName.HintShow(var HintInfo: THintInfo): Boolean;
var
  Mesg := TJvMessage;
begin
  Mesg.Msg := CM_HINTSHOW;
  Mesg.HintInfo := @HintInfo;
  Mesg.Handled := False;
  inherited WndProc(@Mesg)
  Result := Mesg.Handled;
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CONTROL

(*$DEFINE JV_IMPL_CONTROL_CREATE(ClassName)
{ Control Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FHintColor := clDefault;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
 EMPTYLINE
*)

(*$DEFINE JV_CONTROL_IMPL(ClassName)
JV_IMPL_CONTROL_CREATE(ClassName)

procedure TJvEx##ClassName.ColorChanged;
begin
  { notification }
end;

JV_IMPL_CONTROL(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)

(*$DEFINE JV_IMPL_WINCONTROL(ClassName)
procedure TJvEx##ClassName.WndProc(var Message: TMessage)
var
  Canvas: TControlCanvas;
begin
  with Message as TJvMessage do
  begin
    case of Msg of
    CM_COLORCHANGED       : ColorChanged;
    CM_ENABLEDCHANGED     : EnabledChanged;
    CM_FOCUSCHANGED       : FocusChanged;
    CM_FONTCHANGED        : FontChanged;
    CM_CURSORCHANGED      : CursorChanged;
    CM_TEXTCHANGED        : TextChanged ;
    CM_MOUSEENTER         : MouseEnter(Self);
    CM_MOUSELEAVE         : MouseLeave(Self);
    CM_PARENTCOLORCHANGED : ParentColorChanged;
    CM_PARENTFONTCHANGED  : ParentFontChanged;
    CM_BOUNDSCHANGED      : BoundsChanged;
    CM_CURSORCHANGED      : CursorChanged;
    CM_GOTFOCUS           : GotFocus;
    CM_LOSTFOCUS          : LostFocus;
    CM_SHOWHINTCHANGED    : ShowHintChanged;
    CM_SHOWINGCHANGED     : ShowingChanged;
    CM_DIALOGCHAR         : Handled := WantKey(CharCode, KeyDataToShiftState(KeyData), WideChar(CharCode));
    WM_GETDLGCODE         : if not (ikNative in FInputKeys) then
                              Result := InputKeysToDlgCodes(FInputKeys);

    CM_HINTSHOW:
      begin
        HintInfo.HintColor := GetHintColor(Self);
        Handled := HintShow(HintInfo);
      end;

    WM_ERASEBKGND :
      begin
        ACanvas :=  TControlCanvas.Create
        with ACanvas do
        begin
          Control := Self;
          Handled := EraseBackGround(Canvas, LParam);
          Destroy;
        end;
      end;
    end;  // case

    if not Handled then
      inherited WndProc(Message);
  end;  // with Message
end;

function TJvEx##ClassName.WantKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
var
  Mesg: TJvMessage;
begin
  with Mesg do
  begin
    Msg := WM_DIALOGCHAR;
    Shift := ShiftStateToKeyData(Shift);
    Handled := 0;
    inherited WndProc(@Mesg);
  end;
  Result := Mesg.Handled;
end;

function TJvEx##ClassName.HintShow(var HintInfo: THintInfo): Boolean;
begin
  Result := False;
end;

function TJvEx##ClassName.HitTest(X, Y: Integer): Boolean;
var
  Mesg: TJvMessage;
begin
  with Mesg do
  begin
    msg := CM_HITTEST;
    XPos := X;
    YPos := Y;
    Result := 0;
    inherited WndProc(@Mesg);
  end;
  Result := Message.Result = HT_CLIENT;
end;

procedure TJvEx##ClassName.GotFocus;
begin
  { notification }
  DoSetFocus(Mouse.Capture)
end;

procedure TJvEx##ClassName.LostFocus;
begin
  { notification }
  DoKillFocus(Mouse.Capture)
end;

procedure TJvExCustomControl.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExCustomControl.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvEx##ClassName.EraseBackground(Canvas: TCanvas; LParam: Integer): Boolean;
begin
  Result := false;
end;

procedure TJvEx##ClassName.ColorChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.BoundsChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.CursorChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.ShowingChanged;
begin
  { notification }
end;

procedure TJvEx##ClassName.ShowHintChanged;
begin
  { notification }
end;

  EMPTYLINE
*) // MACRO END WINCONTROL

(*$DEFINE JV_WINCONTROL_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_WINCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_EDITCONTROL(ClassName)
{ EditControl }
procedure TJvEx##ClassName.WndProc(var Message: TMessage)
var
  Canvas: TControlCanvas;
begin
  with Message as TJvMessage do
  begin
    case of Msg of
      CM_COLORCHANGED       : ColorChanged;
      CM_ENABLEDCHANGED     : EnabledChanged;
      CM_FOCUSCHANGED       : FocusChanged;
      CM_FONTCHANGED        : FontChanged;
      CM_CURSORCHANGED      : CursorChanged;
      CM_TEXTCHANGED        : TextChanged ;
      CM_PARENTCOLORCHANGED : ParentColorChanged;
      CM_PARENTFONTCHANGED  : ParentFontChanged;
      CM_BOUNDSCHANGED      : BoundsChanged;
      CM_CURSORCHANGED      : CursorChanged;
      CM_GOTFOCUS           : GotFocus;
      CM_LOSTFOCUS          : LostFocus;
      CM_SHOWHINTCHANGED    : ShowHintChanged;
      CM_SHOWINGCHANGED     : ShowingChanged;
      CM_MOUSEENTER         : MouseEnter(Self);
      CM_MOUSELEAVE         : MouseLeave(Self);
      CM_HITTEST:           : if HitTest(Xpos, YPos) then
                                Result := HT_CLIENT;
      CM_DIALOGCHAR         : Handled := WantKey(CharCode, KeyDataToShiftState(KeyData), WideChar(CharCode));
      WM_GETDLGCODE         : if not (ikNative in FInputKeys) then
                                Result := InputKeysToDlgCodes(FInputKeys);

      WM_CLEAR,
      WM_COPY,
      WM_CUT,
      WM_PASTE,
      WM_UNDO,
      EM_UNDO               : Result := DoClipBoardCommands(msg, FClipBoardCommands);

      CM_HINTSHOW:
        begin
          HintInfo.HintColor := GetHintColor(Self);
          Handled := HintShow(HintInfo);
        end;

      WM_ERASEBKGND :
        begin
          ACanvas :=  TControlCanvas.Create
          with ACanvas do
          begin
            Control := Self;
            Handled := EraseBackGround(Canvas, LParam);
            Destroy;
          end;
        end;


    end;  // case
    if not Handled then
      inherited WndProc(Message);
  end;  // with Message
end;

procedure TJvEx##ClassName.SetClipboardCommands(const Value: TJvClipboardCommands);
begin
  FClipboardCommands := Value;
end;
*) // end of JV_IMPL_EDITCONTROL


(*$DEFINE JV_EDITCONTROL_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_EDITCONTROL(ClassName)
   JV_IMPL_WINCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)

(*$DEFINE JV_IMPL_CUSTOMFORM(ClassName)
{ QCustomForm }
constructor TJvEx##ClassName.CreateNew(AOwner: TComponent; Dummy: Integer);
begin
  inherited CreateNew(AOwner, Dummy);
  FHintColor := clDefault;
  FInputKeys := [ikNative];
  CREATE_CUSTOMCODE
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CUSTOMFORM

// ************************************************

(*$DEFINE JV_CUSTOMFORM_IMPL(ClassName)
   JV_IMPL_WINCONTROL_CREATE(ClassName)
   JV_IMPL_CUSTOMFORM(ClassName)
   JV_IMPL_WINCONTROL(ClassName)
   JV_IMPL_CONTROL(ClassName)
*)



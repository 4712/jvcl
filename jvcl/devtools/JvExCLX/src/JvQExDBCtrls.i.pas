{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvExDBCtrls.pas, released on 2004-01-04

The Initial Developer of the Original Code is Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
Portions created by Andreas Hausladen are Copyright (C) 2004 Andreas Hausladen.
All Rights Reserved.

Contributor(s): -

You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http://jvcl.sourceforge.net

Known Issues:
-----------------------------------------------------------------------------}
// $Id$

unit JvQExDBCtrls;

{$I jvcl.inc}
{MACROINCLUDE JvQExControls.macros}

{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExVCL/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}

interface

uses
  QGraphics, QControls, QForms, QButtons, QExtCtrls, QDBCtrls,
  Qt, QWindows, QMessages,
  Classes, SysUtils,
  JvQTypes, JvQThemes, JVCLXVer, JvQExControls, JvQExButtons;

type
  { QWinControl Begin }
  TJvExDBEdit = class(TDBEdit, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBEdit = class(TJvExDBEdit)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QControl begin }
  TJvExDBText = class(TDBText, IJvControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPubDBText = class(TJvExDBText)
  published
    property DragMode;
  end;
  
  { QWinControl Begin }
  TJvExDBCheckBox = class(TDBCheckBox, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBCheckBox = class(TJvExDBCheckBox)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBComboBox = class(TDBComboBox, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBComboBox = class(TJvExDBComboBox)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBListBox = class(TDBListBox, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBListBox = class(TJvExDBListBox)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBRadioGroup = class(TDBRadioGroup, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBRadioGroup = class(TJvExDBRadioGroup)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBMemo = class(TDBMemo, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBMemo = class(TJvExDBMemo)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBImage = class(TDBImage, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBImage = class(TJvExDBImage)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBNavigator = class(TDBNavigator, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBNavigator = class(TJvExDBNavigator)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBLookupControl = class(TDBLookupControl, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBLookupControl = class(TJvExDBLookupControl)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBLookupListBox = class(TDBLookupListBox, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBLookupListBox = class(TJvExDBLookupListBox)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExPopupDataList = class(TPopupDataList, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubPopupDataList = class(TJvExPopupDataList)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QWinControl Begin }
  TJvExDBLookupComboBox = class(TDBLookupComboBox, IJvWinControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { WinControl Common }
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  { QWinCustomControl }
  private
    FDoubleBuffered: Boolean;
    InternalFontChanged: TNotifyEvent;
    procedure OnFontChanged(Sender: TObject);
  protected
    procedure DoFontChanged(Sender: TObject); dynamic;
    function EventFilter(Sender: QObjectH; Event: QEventH): Boolean; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    function WidgetFlags: Integer; override;
    procedure CreateWnd; dynamic;
    procedure CreateWidget; override;
    procedure RecreateWnd;
    procedure ColorChanged; override;
    procedure BoundsChanged; override;
    function GetDoubleBuffered: Boolean;
  public
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    function ColorToRGB(Value: TColor): TColor;
  published
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
  { QWinControl Paint }
  protected
    procedure Paint; virtual;
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    property Canvas: TCanvas read FCanvas;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinControl }
  TJvExPubDBLookupComboBox = class(TJvExDBLookupComboBox)
  published
    property Bitmap;
    property DragMode;
    property InputKeys;
  end;
  
  { QControl begin }
  TJvExNavButton = class(TNavButton, IJvControlEvents)
  { Control Common }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  published
    property HintColor: TColor read FHintColor write FHintColor default clNone;
  { QControl }
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPubNavButton = class(TJvExNavButton)
  published
    property DragMode;
  end;
  

implementation

{ QWinControl Create }
constructor TJvExDBEdit.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBEdit.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBEdit.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBEdit.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBEdit.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBEdit.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBEdit.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBEdit.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBEdit.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBEdit.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBEdit.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBEdit.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBEdit.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBEdit.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBEdit.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBEdit.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBEdit.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBEdit.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBEdit.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBEdit.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBEdit.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBEdit.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBEdit.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBEdit.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBEdit.DoBoundsChanged;
begin
end;

procedure TJvExDBEdit.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBEdit.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBEdit.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBEdit.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBEdit.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBEdit.DoFocusChanged(Control: TWinControl);
begin
end;
  
JV_CONTROL_EVENTS_IMPL(DBText)
{ QWinControl Create }
constructor TJvExDBCheckBox.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBCheckBox.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBCheckBox.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBCheckBox.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBCheckBox.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBCheckBox.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBCheckBox.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBCheckBox.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBCheckBox.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBCheckBox.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBCheckBox.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBCheckBox.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBCheckBox.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBCheckBox.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBCheckBox.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBCheckBox.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBCheckBox.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBCheckBox.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBCheckBox.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBCheckBox.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBCheckBox.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBCheckBox.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBCheckBox.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBCheckBox.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBCheckBox.DoBoundsChanged;
begin
end;

procedure TJvExDBCheckBox.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBCheckBox.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBCheckBox.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBCheckBox.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBCheckBox.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBCheckBox.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBComboBox.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBComboBox.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBComboBox.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBComboBox.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBComboBox.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBComboBox.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBComboBox.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBComboBox.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBComboBox.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBComboBox.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBComboBox.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBComboBox.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBComboBox.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBComboBox.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBComboBox.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBComboBox.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBComboBox.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBComboBox.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBComboBox.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBComboBox.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBComboBox.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBComboBox.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBComboBox.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBComboBox.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBComboBox.DoBoundsChanged;
begin
end;

procedure TJvExDBComboBox.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBComboBox.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBComboBox.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBComboBox.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBComboBox.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBComboBox.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBListBox.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBListBox.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBListBox.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBListBox.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBListBox.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBListBox.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBListBox.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBListBox.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBListBox.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBListBox.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBListBox.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBListBox.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBListBox.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBListBox.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBListBox.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBListBox.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBListBox.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBListBox.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBListBox.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBListBox.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBListBox.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBListBox.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBListBox.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBListBox.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBListBox.DoBoundsChanged;
begin
end;

procedure TJvExDBListBox.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBListBox.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBListBox.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBListBox.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBListBox.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBListBox.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBRadioGroup.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBRadioGroup.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBRadioGroup.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBRadioGroup.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBRadioGroup.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBRadioGroup.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBRadioGroup.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBRadioGroup.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBRadioGroup.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBRadioGroup.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBRadioGroup.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBRadioGroup.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBRadioGroup.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBRadioGroup.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBRadioGroup.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBRadioGroup.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBRadioGroup.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBRadioGroup.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBRadioGroup.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBRadioGroup.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBRadioGroup.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBRadioGroup.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBRadioGroup.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBRadioGroup.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBRadioGroup.DoBoundsChanged;
begin
end;

procedure TJvExDBRadioGroup.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBRadioGroup.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBRadioGroup.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBRadioGroup.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBRadioGroup.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBRadioGroup.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBMemo.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBMemo.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBMemo.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBMemo.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBMemo.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBMemo.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBMemo.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBMemo.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBMemo.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBMemo.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBMemo.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBMemo.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBMemo.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBMemo.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBMemo.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBMemo.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBMemo.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBMemo.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBMemo.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBMemo.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBMemo.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBMemo.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBMemo.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBMemo.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBMemo.DoBoundsChanged;
begin
end;

procedure TJvExDBMemo.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBMemo.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBMemo.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBMemo.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBMemo.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBMemo.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBImage.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBImage.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBImage.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBImage.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBImage.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBImage.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBImage.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBImage.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBImage.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBImage.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBImage.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBImage.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBImage.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBImage.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBImage.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBImage.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBImage.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBImage.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBImage.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBImage.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBImage.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBImage.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBImage.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBImage.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBImage.DoBoundsChanged;
begin
end;

procedure TJvExDBImage.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBImage.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBImage.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBImage.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBImage.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBImage.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBNavigator.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBNavigator.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBNavigator.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBNavigator.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBNavigator.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBNavigator.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBNavigator.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBNavigator.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBNavigator.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBNavigator.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBNavigator.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBNavigator.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBNavigator.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBNavigator.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBNavigator.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBNavigator.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBNavigator.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBNavigator.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBNavigator.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBNavigator.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBNavigator.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBNavigator.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBNavigator.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBNavigator.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBNavigator.DoBoundsChanged;
begin
end;

procedure TJvExDBNavigator.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBNavigator.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBNavigator.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBNavigator.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBNavigator.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBNavigator.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBLookupControl.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBLookupControl.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBLookupControl.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBLookupControl.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBLookupControl.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBLookupControl.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBLookupControl.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBLookupControl.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBLookupControl.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBLookupControl.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBLookupControl.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBLookupControl.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBLookupControl.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBLookupControl.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBLookupControl.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBLookupControl.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBLookupControl.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBLookupControl.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBLookupControl.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBLookupControl.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBLookupControl.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBLookupControl.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBLookupControl.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBLookupControl.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBLookupControl.DoBoundsChanged;
begin
end;

procedure TJvExDBLookupControl.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBLookupControl.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBLookupControl.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBLookupControl.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBLookupControl.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBLookupControl.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBLookupListBox.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBLookupListBox.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBLookupListBox.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBLookupListBox.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBLookupListBox.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBLookupListBox.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBLookupListBox.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBLookupListBox.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBLookupListBox.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBLookupListBox.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBLookupListBox.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBLookupListBox.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBLookupListBox.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBLookupListBox.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBLookupListBox.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBLookupListBox.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBLookupListBox.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBLookupListBox.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBLookupListBox.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBLookupListBox.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBLookupListBox.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBLookupListBox.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBLookupListBox.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBLookupListBox.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBLookupListBox.DoBoundsChanged;
begin
end;

procedure TJvExDBLookupListBox.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBLookupListBox.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBLookupListBox.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBLookupListBox.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBLookupListBox.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBLookupListBox.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExPopupDataList.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExPopupDataList.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExPopupDataList.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExPopupDataList.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExPopupDataList.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExPopupDataList.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExPopupDataList.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExPopupDataList.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExPopupDataList.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExPopupDataList.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExPopupDataList.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExPopupDataList.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExPopupDataList.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExPopupDataList.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExPopupDataList.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExPopupDataList.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExPopupDataList.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExPopupDataList.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExPopupDataList.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExPopupDataList.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExPopupDataList.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExPopupDataList.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExPopupDataList.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExPopupDataList.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExPopupDataList.DoBoundsChanged;
begin
end;

procedure TJvExPopupDataList.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExPopupDataList.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExPopupDataList.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExPopupDataList.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExPopupDataList.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExPopupDataList.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QWinControl Create }
constructor TJvExDBLookupComboBox.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  InternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FDoubleBuffered := True;
  FHintColor := clNone;
  
end;

destructor TJvExDBLookupComboBox.Destroy;
begin
  ;
  FCanvas.Destroy;
  inherited Destroy;
end;
  
   { QWinCustomControl }
function TJvExDBLookupComboBox.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := WidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExDBLookupComboBox.OnFontChanged(Sender: TObject);
var
  FontChangedEvent: QEventH;
begin
  FontChangedEvent := QEvent_create(QEventType_FontChanged);
  if FontChangedEvent <> nil then
    QApplication_postEvent(Handle, FontChangedEvent);
end;

procedure TJvExDBLookupComboBox.DoFontChanged(Sender: TObject);
begin
  if Assigned(InternalFontChanged) then
    InternalFontChanged(Self);
end;

procedure TJvExDBLookupComboBox.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExDBLookupComboBox.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvExDBLookupComboBox.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvExDBLookupComboBox.CreateWnd;
begin
  inherited CreateWidget;
end;

function TJvExDBLookupComboBox.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvExDBLookupComboBox.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;


function TJvExDBLookupComboBox.EventFilter(Sender: QObjectH; Event: QEventH): Boolean;
begin
  Result := WidgetControl_PaintEventFilter(Self, Sender, Event);
  if not Result then
  begin
    Result := inherited EventFilter(Sender, Event);
    Result := Result or WidgetControl_EventFilter(Self, Sender, Event);
  end;
end;

procedure TJvExDBLookupComboBox.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  WidgetControl_Painting(Self, Canvas, EventRegion);
end;

procedure TJvExDBLookupComboBox.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  WidgetControl_PaintTo(Self, PaintDevice, 0, 0);
end;

procedure TJvExDBLookupComboBox.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(Self, PaintDevice, X, Y);
end;

procedure TJvExDBLookupComboBox.ColorChanged;
begin
  inherited ColorChanged;
  if Bitmap.Empty then
  begin
    Palette.Color := Color;
    Brush.Color := Color;
  end;
end;

function TJvExDBLookupComboBox.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  
   { WinControl Paint }
procedure TJvExDBLookupComboBox.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
  WidgetControl_NCPaint(Self, Canvas);
end;
  
   { QControl }
procedure TJvExDBLookupComboBox.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExDBLookupComboBox.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExDBLookupComboBox.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExDBLookupComboBox.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExDBLookupComboBox.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExDBLookupComboBox.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { WinControl Common }
procedure TJvExDBLookupComboBox.DoBoundsChanged;
begin
end;

procedure TJvExDBLookupComboBox.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExDBLookupComboBox.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExDBLookupComboBox.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExDBLookupComboBox.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
        JMP     DefaultDoPaintBackground
end;
  
   { Control Common }
procedure TJvExDBLookupComboBox.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExDBLookupComboBox.DoFocusChanged(Control: TWinControl);
begin
end;
  
{ QControl Create }
constructor TJvExNavButton.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  inherited Create(AOwner);
  FHintColor := clNone;
  
end;

destructor TJvExNavButton.Destroy;
begin
  
  inherited Destroy;
end;
 
   { QControl }
procedure TJvExNavButton.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, Control, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
end;

procedure TJvExNavButton.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(Self, Control, FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
end;

procedure TJvExNavButton.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExNavButton.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExNavButton.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExNavButton.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  
   { Control Common }
procedure TJvExNavButton.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExNavButton.DoFocusChanged(Control: TWinControl);
begin
end;
  

end.

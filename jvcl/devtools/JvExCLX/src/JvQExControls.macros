{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http:{www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvQExStdCtrls.pas, released on 2004-09-21

The Initial Developer of the Original Code is André Snepvangers [asn att xs4all dott nl]
Portions created by André Snepvangers are Copyright (C) 2004 André Snepvangers.
All Rights Reserved.


You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http:(jvcl.sourceforge.net

Description:

This file contains macro's needed to build the JvExCLX classes.
You need the Pascal PreProcessor (dpp) from Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
to process these files.
It is included in JVCL 3: devtools\dpp32

Known Issues:
-----------------------------------------------------------------------------}

// This comment is inserted into every JvQExXxx.pas file
(*$DEFINE WARNINGHEADER
{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExCLX/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}
*)

(*$DEFINE UNITVERSION
const
  UnitVersion = '$Id $';

initialization
  OutputDebugString(PChar('Opened ' + UnitVersion));

finalization
  OutputDebugString(PChar('Closed ' + UnitVersion));
EMPTYLINE
*)

{$UNDEF CREATE_CUSTOMCODE}
{$UNDEF DESTROY_CUSTOMCODE}
{$UNDEF IFISNOTCUSTOMFORM}

{$DEFINE EMPTYLINE}
{$DEFINE CREATE_CUSTOMCODE}
{$DEFINE DESTROY_CUSTOMCODE}
{$DEFINE IFISNOTCUSTOMFORM}


// *************************************************************************
// *************************** INTERFACE MACROS ****************************
// *************************************************************************

(*$DEFINE JV_DECL_CONTROL
  { QControl }
  private
    FAboutJVCL: TJVCLAboutInfo;
    FDragCursor: TCursor;
    FDragKind: TDragKind;
    FHintColor: TColor;
    FOnParentColorChanged: TNotifyEvent;
    FWindowProc: TWndMethod;
  protected
    procedure ColorChanged; override;
    procedure EnabledChanged; override;
    procedure FocusChanged; dynamic;
    procedure ParentColorChanged; override;
    procedure TextChanged; override;
    procedure VisibleChanged; override;
    function HintShow(var HintInfo : THintInfo): Boolean; override;
    procedure WndProc(var Mesg: TMessage); dynamic;
    property DragCursor: TCursor read FDragCursor write FDragCursor default crDefault; { not implemented }
    property DragKind: TDragKind read FDragKind write FDragKind  default dkDrag; { not implemented }
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  public
    procedure Dispatch(var Message); override;
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
    property WindowProc: TWndMethod read FWindowProc write FWindowProc;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCL write FAboutJVCL stored False;
    property HintColor: TColor read FHintColor write FHintColor default clDefault;
*)

(*$DEFINE JV_CONTROL_BEGIN(ClassName)
  { QControl begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
*)

(*$DEFINE JV_CONTROL_END(ClassName)
  protected
    procedure FontChanged; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CONTROL(ClassName)
  JV_CONTROL_BEGIN(ClassName)
  JV_CONTROL_END(ClassName)
*)

//
//  used by WinCustomControl, WinControl, CustomControl, EditControl
//
(*$DEFINE JV_DECL_WINCONTROL
  { QWinControl }
  private
    FDesktopFont: Boolean;
    FDoubleBuffered: Boolean;
    FInternalFontChanged: TNotifyEvent;
    FNativeKeys: TInputKeys;
    procedure OnFontChanged(Sender: TObject);
    procedure SetDesktopFont(Value: Boolean);
  protected
    procedure CreateWidget; override;
    procedure CreateWnd; virtual;
    procedure CursorChanged; override;
    procedure DoKillFocus(NextWnd: HWND); dynamic;
    procedure DoSetFocus(PreviousWnd: HWND); dynamic;
    procedure DoEnter; override;
    procedure DoExit; override;
    function DoEraseBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure PaintWindow(PaintDevice: QPaintDeviceH);
    procedure RecreateWnd;
    procedure ShowingChanged; override;
    function WidgetFlags: Integer; override;
    property DesktopFont: Boolean read FDesktopFont write SetDesktopFont default false;
  public
    function ColorToRGB(Value: TColor): TColor;
    procedure PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
    procedure SetFocus; override;
    property DoubleBuffered: Boolean read FDoubleBuffered write FDoubleBuffered;
*)

//
// WidgetControls with a Canvas but no Paint method.
//
(*$DEFINE JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  { QWinCustomControl }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_WINCUSTOMCONTROL_END(ClassName)
  { QWinCustomControl Paint }
  protected
    procedure Paint; virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QWinCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL(ClassName)
  JV_WINCUSTOMCONTROL_BEGIN(ClassName)
  JV_WINCUSTOMCONTROL_END(ClassName)
*)

//
// WidgetControls without a Canvas property.
//
(*$DEFINE JV_WINCONTROL_BEGIN(ClassName)
  { QWinControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_WINCONTROL_END(ClassName)
  { QWinControl }
  private
    FCanvas: TCanvas;
  protected
    procedure Paint; virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    property Canvas: TCanvas read FCanvas;
  end;

  { QWinControl }
  TJvExPub##ClassName = class(TJvEx##ClassName)
  end;
  EMPTYLINE
*)

(*$DEFINE JV_WINCONTROL(ClassName)
  JV_WINCONTROL_BEGIN(ClassName)
  JV_WINCONTROL_END(ClassName)
*)

//
// WidgetControls with a Paint method & Canvas property.
//

(*$DEFINE JV_CUSTOMCONTROL_BEGIN(ClassName)
  { QCustomControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
*)

(*$DEFINE JV_CUSTOMCONTROL_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMCONTROL(ClassName)
  JV_CUSTOMCONTROL_BEGIN(ClassName)
  JV_CUSTOMCONTROL_END(ClassName)
*)

(*$DEFINE JV_DECL_EDITCONTROL
  { QEditControl }
  private
    FClipboardCommands: TJvClipboardCommands;
    FEditRect: TRect; // EM_GETRECT
    procedure EMGetRect(var Msg: TMessage); message EM_GETRECT;
    procedure EMSetRect(var Msg: TMessage); message EM_SETRECT;
  public
    procedure PasteFromClipboard; override;
    procedure CopyToClipboard; override;
    procedure Clear; override;
    procedure CutToClipboard; override;
    procedure Undo; override;
  published
    property ClipboardCommands: TJvClipboardCommands read FClipboardCommands
      write SetClipboardCommands default [caCopy..caUndo];
*)

(*$DEFINE JV_DECL_CUSTOMEDIT
  { QCustomEdit }
  private
    FInplaceEdit: TFrameControl;
  protected
    procedure OnEnter; override;
    procedure OnExit; override;
*)

(*$DEFINE JV_EDITCONTROL_BEGIN(ClassName)
  { QEditControl Begin }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_EDITCONTROL
*)

(*$DEFINE JV_EDITCONTROL_END(ClassName)
  { QEditControl }
  private
    FCanvas: TCanvas;
  protected
    procedure Paint; virtual;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    property Canvas: TCanvas read FCanvas;
  end;

  { QEditControl }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_EDITCONTROL(ClassName)
  JV_EDITCONTROL_BEGIN(ClassName)
  JV_EDITCONTROL_END(ClassName)
*)

//
// CustomForm
//

(*$DEFINE JV_DECL_CUSTOMFORM
  { CustomForm }
  public
    constructor CreateNew(AOwner: TComponent; Dummy: Integer = 0); override;
*)

(*$DEFINE JV_CUSTOMFORM_BEGIN(ClassName)
  { QCustomForm }
  TJvEx##ClassName = class(T##ClassName)
  JV_DECL_CUSTOMFORM
  JV_DECL_CONTROL
  JV_DECL_WINCUSTOMCONTROL
  JV_DECL_WINCONTROL
*)

(*$DEFINE JV_CUSTOMFORM_END(ClassName)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  { QCustomForm }
  TJvExPub##ClassName = class(TJvEx##ClassName);
  EMPTYLINE
*)

(*$DEFINE JV_CUSTOMFORM(ClassName)
  JV_CUSTOMFORM_BEGIN(ClassName)
  JV_CUSTOMFORM_END(ClassName)
*)


// *************************************************************************
// ************************* IMPLEMENTATION MACROS *************************
// *************************************************************************
(*$DEFINE JV_IMPL_CONTROL_CREATE(ClassName)
{ QControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FHintColor := clDefault;
  FWindowProc := WndProc;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_CONTROL_MESSAGES
    { Control Messages }
      CM_PARENTSHOWHINTCHANGED,
      CM_PARENTCOLORCHANGED,
      CM_PARENTFONTCHANGED,
      CM_RECREATEWINDOW:
      begin
        inherited Dispatch(Mesg);
        Exit;
      end;

      WM_GETTEXTLENGTH: Result := Length(GetText);

      CM_FOCUSCHANGED: FocusChanged;

      CM_HITTEST: if inherited HitTest(XPos, YPos) then
                    Result := HTCLIENT;

*)
(*
      CM_KEYDOWN:
      begin
        with TCMKeyDown do
        begin
          Msg := CM_;
          CharCode := TCMKeyDown(Mesg).Key;
          KeyData := ShiftStateToKeyData(TCMKeyDown(Mesg).Shift));
          Handled := false;

        end;

*)

(*$DEFINE JV_IMPL_CONTROL(ClassName)
procedure TJvEx##ClassName.WndProc(var Mesg: TMessage);
begin
  with TJvMessage(Mesg) do
  begin
    case Msg of
      JV_IMPL_CONTROL_MESSAGES

      CM_HINTSHOW:
      begin
        case FHintColor of
          clNone   : HintInfo^.HintColor := Application.HintColor;
	  clDefault: HintInfo^.HintColor := GetHintColor(Parent);
        else
          HintInfo^.HintColor := FHintcolor;   
        end;
        Handled := HintShow(HintInfo^);
      end;
    end;
  end;
  if Mesg.Result = 0 then
    inherited Dispatch(Mesg);
end;

procedure TJvEx##ClassName.FontChanged;
begin
  Perform(CM_FONTCHANGED, 0, 0);
  inherited FontChanged;
end;

procedure TJvEx##ClassName.FocusChanged;
begin
  { notification }
end;

 EMPTYLINE
*)

(*$DEFINE JV_IMPL_CONTROL_COMMON(ClassName)
{ QControl Common}
procedure TJvEx##ClassName.ColorChanged;
begin
  Perform(CM_COLORCHANGED, 0, 0);
  inherited ColorChanged;
end;

procedure TJvEx##ClassName.EnabledChanged;
begin
  Perform(CM_ENABLEDCHANGED, 0, 0);
  inherited EnabledChanged;
end;

procedure TJvEx##ClassName.TextChanged;
begin
  Perform(CM_TEXTCHANGED, 0, 0);
  inherited TextChanged;
end;

procedure TJvEx##ClassName.VisibleChanged;
begin
  Perform(CM_VISIBLECHANGED, 0, 0);
  inherited VisibleChanged;
end;

function TJvEx##ClassName.HintShow(var HintInfo : THintInfo): Boolean;
begin
  case HintColor of
  clNone, ClDefault: HintInfo.HintColor := GetHintColor(Self.Parent);
  else
    HintInfo.HintColor := HintColor;
  end;
  Result := inherited HintShow(HintInfo);
end;

procedure TJvEx##ClassName.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

procedure TJvEx##ClassName.Dispatch(var Message);
begin
  FWindowProc(TMessage(Message));
end;

function TJvEx##ClassName.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    Dispatch(Mesg);
    Result := Mesg.Result;
  end;
end;

function TJvEx##ClassName.IsRightToLeft: Boolean;
begin
  Result := False;
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CONTROL

(*$DEFINE JV_CONTROL_IMPL(ClassName)
JV_IMPL_CONTROL_CREATE(ClassName)
JV_IMPL_CONTROL(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)

//
// used by CustomControl, WinCustomControl & CustomForm
//

(*$DEFINE JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
{ QWinCustomControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FWindowProc := WndProc;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE
  inherited Destroy;
end;
EMPTYLINE
*)

(*$DEFINE JV_IMPL_WINCONTROL_MESSAGES
      { WinControl Messages }
      WM_GETDLGCODE   : Result := InputKeysToDlgCodes(InputKeys);
      WM_KILLFOCUS    : DoKillFocus(FocusedWnd);
      WM_SETFOCUS     : DoSetFocus(FocusedWnd);
      CM_FONTCHANGED  : FInternalFontChanged(Font);

      CM_HINTSHOW: 
      begin
        HintInfo^.HintColor := GetHintcolor(Self);   
        Handled := HintShow(HintInfo^);
      end;

      WM_ERASEBKGND:
      begin
        Canvas.Start;
        try
          Handled := DoEraseBackGround(Canvas, LParam);
        finally
          Canvas.Stop;
        end;
      end;
*)

(*$DEFINE JV_IMPL_WINCONTROL(ClassName)
procedure TJvEx##ClassName.WndProc(var Mesg: TMessage);
begin
  with TJvMessage(Mesg) do
  begin
    case Msg of
      JV_IMPL_CONTROL_MESSAGES
      JV_IMPL_WINCONTROL_MESSAGES
    end;
  end;
  if Mesg.Result = 0 then
    inherited Dispatch(Mesg);
end;
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_WINCONTROL_COMMON(ClassName)
{ QWinControl Common }
procedure TJvEx##ClassName.ShowingChanged;
begin
  Perform(CM_SHOWINGCHANGED, 0 ,0);
  inherited;
end;

procedure TJvEx##ClassName.CursorChanged;
begin
  Perform(CM_CURSORCHANGED, 0, 0);
  inherited;
end;

procedure TJvEx##ClassName.DoSetFocus(PreviousWnd: QWidgetH);
begin
  { notification }
end;

procedure TJvEx##ClassName.DoKillFocus(NextWnd: QWidgetH);
begin
  { notification }
end;

procedure TJvEx##ClassName.DoEnter;
begin
  Perform(CM_ENTER, 0 ,0);
  inherited DoEnter;
end;

procedure TJvEx##ClassName.FocusChanged;
begin
  NotifyControls(FocusChanged);
end;

procedure TJvEx##ClassName.DoExit;
begin
  Perform(CM_LEAVE, 0 ,0);
  inherited DoExit;
end;

procedure TJvEx##ClassName.SetFocus;
var
  PreviousWnd: QWidgetH;
begin
  PreviousWnd := GetFocusedWnd(Self);
  inherited SetFocus;
  if Assigned(PreviousWnd) and (PreviousWnd <> Handle) and Focused then
    SendMessage(PreviousWnd, WM_KILLFOCUS, Integer(Handle), 0);
  if Focused and (PreviousWnd <> Handle) then
    SendMessage(Handle, WM_SETFOCUS, Integer(PreviousWnd), 0);
end;

function TJvEx##ClassName.DoEraseBackground(Canvas: TCanvas; Param: Integer): Boolean;
begin
  Result := false;
end;

procedure TJvEx##ClassName.OnFontChanged(Sender: TObject);
begin
  ParentFont := False;
  PostMessage(Self, CM_FONTCHANGED, 0, 0);
end;

procedure TJvEx##ClassName.CreateWidget;
begin
  CreateWnd;
end;

procedure TJvEx##ClassName.CreateWnd;
begin
  inherited CreateWidget;
end;

procedure TJvEx##ClassName.RecreateWnd;
begin
  RecreateWidget;
end;

procedure TJvEx##ClassName.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  TControlCanvas(Canvas).StartPaint;
  try
    Canvas.Brush.Assign(Brush);
    Canvas.Font.Assign(Font);
    RequiredState(Canvas, [csHandleValid, csFontValid, csBrushValid]);
    Paint;
  finally
    TControlCanvas(Canvas).StopPaint;
  end;
end;

procedure TJvEx##ClassName.CMSysFontChanged(var Message: TMessage);
begin
  if FDesktopFont then
  begin
    Font.Assign(Value)
    FDesktopFont := True;
  end;
end;

procedure TJvEx##ClassName.PaintTo(PaintDevice: QPaintDeviceH; X, Y: Integer);
begin
  WidgetControl_PaintTo(self, PaintDevice, X, Y);
end;

procedure TJvEx##ClassName.PaintWindow(PaintDevice: QPaintDeviceH);
begin
  PaintTo(PaintDevice, 0, 0);
end;

function TJvEx##ClassName.WidgetFlags: Integer;
begin
  Result := inherited WidgetFlags or
    Integer(WidgetFlags_WRepaintNoErase) or
    Integer(WidgetFlags_WMouseNoMask);
end;

function TJvEx##ClassName.ColorToRGB(Value: TColor): TColor;
begin
  Result := QWindows.ColorToRGB(Value, self);
end;
  EMPTYLINE
*) // MACRO END WINCONTROL_COMMON

//
// implement paint for native Qt Widgets.
//
(*$DEFINE JV_IMPL_WINCONTROL_PAINT(ClassName)
{ WinControl Paint }
procedure TJvEx##ClassName.Paint;
begin
  TControlCanvas(Canvas).StopPaint;
  inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
  TControlCanvas(Canvas).StartPaint;
end;
  EMPTYLINE
*)

(*$DEFINE JV_WINCUSTOMCONTROL_IMPL(ClassName)
JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)

(*$DEFINE JV_CUSTOMCONTROL_IMPL(ClassName)
JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
 EMPTYLINE
*)

(*$DEFINE JV_IMPL_WINCONTROL_CREATE(ClassName)
{ QWinControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FWindowProc := WndProc;
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;

destructor TJvEx##ClassName.Destroy;
begin
  DESTROY_CUSTOMCODE;
  FCanvas.Destroy;
  inherited Destroy;
end;
  EMPTYLINE
*) // end macro JV_IMPL_WINCONTROL_CREATE


(*$DEFINE JV_WINCONTROL_IMPL(ClassName)
JV_IMPL_WINCONTROL_CREATE(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)

(*$DEFINE JV_IMPL_EDITCONTROL(ClassName)
{ QEditControl }

procedure TJvEx##ClassName.WndProc(var Mesg: TMessage);
begin

  with TJvMessage(Mesg) do
    case Msg of
      JV_IMPL_CONTROL_MESSAGES
      JV_IMPL_WINCONTROL_MESSAGES
      WM_CLEAR, WM_COPY, WM_CUT,
      WM_PASTE, WM_UNDO, EM_UNDO:
        Handled := DoClipBoardCommands(msg, FClipBoardCommands);
    end;

  if Mesg.Result = 0 then
    case Mesg of
      WM_PASTE : inherited PasteFromClipBoard;
      WM_COPY  : inherited CopyToClipBoard;
      WM_CUT   : inherited CutToClipBoard;
      WM_UNDO  : inherited Undo;
    else
      inherited Dispatch(Mesg);
    end;
end;

procedure TJvEx##ClassName.Undo;
begin
  SendMessage(Handle, WM_UNDO, 0, 0)
end;

procedure TJvEx##ClassName.CopyToClipboard;
begin
  SendMessage(Handle, WM_COPY, 0, 0);
end;

procedure TJvEx##ClassName.CutToClipboard;
begin
  SendMessage(Handle, WM_CUT, 0, 0);
end;

procedure TJvEx##ClassName.Clear;
begin
  if caClear in ClipboardCommands then
    inherited Clear;
end;

procedure TJvEx##ClassName.PasteFromClipboard;
begin
  SendMessage(Handle, WM_PASTE, 0, 0);
end;
*)

(*$DEFINE JV_IMPL_CUSTOMEDIT(ClassName)
procedure TJvEx##ClassName.EMGetRect(var Msg: TJvMessage);
begin
  Msg.Rect := @FEditRect;
end;

procedure TJvEx##ClassName.EMSetRect(var Msg: TJvMessage);
begin
  FEditRect := Msg.Rect^;
end;

function TJvEx##ClassName.GetBorderStyle: TBorderStyle;
begin
  Result := FFrameControl.BorderStyle;
end;

function TJvEx##ClassName.GetClientOrigin: TPoint;
begin
  Result := FFrameControl.GetClientOrigin;
end;

function TJvEx##ClassName.GetClientRect: TRect;
begin
  Result := FFrameControl.GetClientRect;
end;

procedure TJvEx##ClassName.SetBorderStyle(Value: TBorderStyle);
begin
  if Value <> FFrameControl.BorderStyle then
  begin
    FFrameControl.BorderStyle := Value;
    PostMessage(Handle, CM_BorderStyleChanged, 0 , 0);
  end;
end;

function TFrameControl.GetHandle: QFrameH;
begin
  HandleNeeded;
  Result := QFrameH(FHandle);
end;

procedure TJvEx##ClassName.GetParent: TWidgetControl;
begin
  Result := FFrameControl.Parent;
end;

procedure TJvEx##ClassName.VisibleChanged;
begin
  inherited VisibleChanged;
  FFrameControl.Visible := Visible;
end;

function TJvEx##ClassName.GetPaintDevice: QPaintDeviceH;
begin
  Result := QWidget_to_QPaintDevice(FFrameControl.Handle);
end;

procedure TJvEx##ClassName.SetParent(const AControl: TControl);
begin
  FFrameControl.Parent := AControl;
  inherited SetParent(FFrameControl);
end;

procedure TJvEx##ClassName.GetParent: TControl;
begin
  Result := FFrameControl.Parent;
end;

procedure TJvEx##ClassName.AdjustForClient(var ARect: TRect);
begin
  FFrameControl.AdjustForClient(ARect);
end;

function TJvEx##ClassName.GetParentWidget: QWidgetH;
begin
  Result := FFrameControl.GetParentWidget;
end;

procedure TJvEx##ClassName.HandleNeeded;
begin
  FFrameControl.HandleNeeded;
  inherited HandleNeeded;
end;

procedure TJvEx##ClassName.CMBorderStyleChanged(var Message: TMessage);
begin
  BorderStyleChanged;
end;

procedure TJvEx##ClassName.BorderStyleChanged;
begin
  { Notification }
end;

procedure TJvEx##ClassName.SetAlign(const Value: TAlign);
begin
  FFrameControl.Align := Value;
end;

procedure TJvEx##ClassName.SetAlign(const Value: TAlign);
begin
  FFrameControl.Align := Value;
end;

function TJvEx##ClassName.GetAlign: TAlign;
begin
  Result := FFrameControl.Align;
end;

*) // end of JV_IMPL_CUSTOMEDIT

(*$DEFINE JV_IMPL_EDITCONTROL_CREATE(ClassName)
{ QEditControl Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;


*) // end of JV_IMPL_EDITCONTROL_CREATE

(*$DEFINE JV_IMPL_CUSTOMEDIT_CREATE(ClassName)
{ QCustomEdit Create }
constructor TJvEx##ClassName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := FFrameControl ;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  FHintColor := clDefault;
  FDoubleBuffered := True;
  CREATE_CUSTOMCODE
end;
*) // end of JV_IMPL_CUSTOMEDIT_CREATE

(*$DEFINE JV_IMPL_CUSTOMEDIT_PAINT(ClassName)
{ WinControl Paint }
procedure TJvEx##ClassName.Paint;
var
  TextFlags: integer;
  Region, OldRegion: QRegionH;
begin

  if Focused then
  begin
    TControlCanvas(Canvas).StopPaint;
    inherited Painting(Handle, QPainter_clipRegion(Canvas.Handle));
    TControlCanvas(Canvas).StartPaint;
  end
  else
  begin
    Region := CreateRectangularRegion(FEditRect);

    SubstractRegion(Region, QPainter_clipRegion(Canvas.Handle), Region);
    if not QRegion_Empty(Region) then
    begin
      TControlCanvas(Canvas).StopPaint;
      inherited Painting(Handle, Region);
      TControlCanvas(Canvas).StartPaint;
    end;
    case Alignment of
      taLeftJustify  : TextFlags := AlignLeft;
      taRightJustify : TextFlags := AlignRight;
      taCenter       : TextFlags := AlignHCenter;
    else
      TextFlags := 0;
    end;
    Canvas.TextRect(FEditRect, FEditRect.Left, FEditRect.Top, Text, TextFlags);
  end;
end;
 EMPTYLINE
*)

(*$DEFINE JV_EDITCONTROL_IMPL(ClassName)
JV_IMPL_WINCONTROL_CREATE(ClassName)
JV_IMPL_EDITCONTROL(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_WINCONTROL_PAINT(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)

(*$DEFINE JV_IMPL_CUSTOMFORM(ClassName)
{ QCustomForm }
constructor TJvEx##ClassName.CreateNew(AOwner: TComponent; Dummy: Integer);
begin
  inherited CreateNew(AOwner, Dummy);
  FWindowProc := WndProc;
  FHintColor := clDefault;
  FDoubleBuffered := False;
  FInternalFontChanged := Font.OnChange;
  Font.OnChange := OnFontChanged;
  CREATE_CUSTOMCODE
end;
  EMPTYLINE
*) // MACRO END JV_IMPL_CUSTOMFORM

// ************************************************

(*$DEFINE JV_CUSTOMFORM_IMPL(ClassName)
JV_IMPL_WINCUSTOMCONTROL_CREATE(ClassName)
JV_IMPL_CUSTOMFORM(ClassName)
JV_IMPL_WINCONTROL(ClassName)
JV_IMPL_CUSTOMCONTROL_PAINT(ClassName)
JV_IMPL_WINCONTROL_COMMON(ClassName)
JV_IMPL_CONTROL_COMMON(ClassName)
*)


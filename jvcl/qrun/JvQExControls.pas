{**************************************************************************************************}
{  WARNING:  JEDI preprocessor generated unit.  Do not edit.                                       }
{**************************************************************************************************}

{-----------------------------------------------------------------------------
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/MPL-1.1.html

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either expressed or implied. See the License for
the specific language governing rights and limitations under the License.

The Original Code is: JvExControls.pas, released on 2004-01-04

The Initial Developer of the Original Code is Andreas Hausladen [Andreas dott Hausladen att gmx dott de]
Portions created by Andreas Hausladen are Copyright (C) 2004 Andreas Hausladen.
All Rights Reserved.

Contributor(s): -

You may retrieve the latest version of this file at the Project JEDI's JVCL home page,
located at http://jvcl.sourceforge.net

Known Issues:
-----------------------------------------------------------------------------}
// $Id$

{$I jvcl.inc}

{*****************************************************************************
 * WARNING: Do not edit this file.
 * This file is autogenerated from the source in devtools/JvExVCL/src.
 * If you do it despite this warning your changes will be discarded by the next
 * update of this file. Do your changes in the template files.
 ****************************************************************************}

unit JvQExControls;
interface
uses
  {$IFDEF MSWINDOWS}
  Windows,
  {$ENDIF MSWINDOWS}
  {$IFDEF LINUX}
  Libc,
  {$ENDIF LINUX}
  
  
  Qt, QTypes, QGraphics, QControls, QForms, QStdCtrls, QMask, QClipbrd,
  Types, QWindows, 
  
  Classes, SysUtils,
  JvQTypes, JvQThemes, JVQCLVer;




 {$IF not declared(PatchedVCLX)}
  
 {$IFEND}


type
  TDlgCode = (
    dcWantAllKeys, dcWantArrows, dcWantTab, dcWantChars,
    dcButton,
    dcNative // if dcNative is in the set the native functions are used and DoGetDlgCode is ignored
  );
  TDlgCodes = set of TDlgCode;


  HWND = QWindows.HWND;
  TClxWindowProc = procedure(var Msg: TMessage) of object;


const
  dcWantMessage = dcWantAllKeys;

type
  

  IJvControlEvents = interface(IPerformControl)
    ['{61FC57FF-D4DA-4840-B871-63DE804E9921}']
    procedure VisibleChanged;
    procedure EnabledChanged;
    procedure TextChanged;
    procedure FontChanged;
    procedure ColorChanged;
    procedure ParentFontChanged;
    procedure ParentColorChanged;
    procedure ParentShowHintChanged;
    function WantKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; // CM_DIALOGCHAR
    function HintShow(var HintInfo: THintInfo): Boolean;
    function HitTest(X, Y: Integer): Boolean; // CM_HITTEST
    procedure MouseEnter(AControl: TControl);
    procedure MouseLeave(AControl: TControl);
    procedure DoFocusChanged(Control: TWinControl);
    
  end;

  IJvWinControlEvents = interface(IPerformControl)
    ['{B5F7FB62-78F0-481D-AFF4-7A24ED6776A0}']
    procedure DoBoundsChanged;
    procedure CursorChanged;
    procedure ShowingChanged;
    procedure ShowHintChanged;
    procedure ControlsListChanging(Control: TControl; Inserting: Boolean);
    procedure ControlsListChanged(Control: TControl; Inserting: Boolean);
    procedure DoGetDlgCode(var Code: TDlgCodes); // WM_GETDLGCODE
    procedure DoSetFocus(FocusedWnd: HWND);  // WM_SETFOCUS
    procedure DoKillFocus(FocusedWnd: HWND); // WM_KILLFOCUS
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; // WM_ERASEBKGND
    
    function GetDoubleBuffered: Boolean;
    
  end;

  IJvCustomControlEvents = interface(IPerformControl)
    ['{7804BD3A-D7A5-4314-9259-6DE08A0DC38A}']
  end;

  IJvEditControlEvents = interface(IPerformControl)
    ['{C1AE5EF8-F6C4-4BD4-879E-17946FD0FBAB}']
    procedure DoClipboardPaste;
    procedure DoClipboardCopy;
    procedure DoClipboardCut;
    procedure DoUndo;
    procedure DoClearText;
  end;



const
  CM_DENYSUBCLASSING = JvQThemes.CM_DENYSUBCLASSING;


type
  { Add IJvDenySubClassing to the base class list if the control should not
    be themed by the ThemeManager (www.delphi-gems.de).
    This only works with JvExVCL derived classes. }
  IJvDenySubClassing = interface
    ['{76942BC0-2A6E-4DC4-BFC9-8E110DB7F601}']
  end;


const
  CM_FOCUSCHANGED = CM_BASE + 17; // VCL Controls: CM_BASE + 7

type
  TCMFocusChanged = record
    Msg: Cardinal;
    Unused: Integer;
    Sender: TWinControl;
    Result: Longint;
  end;


type
  TJvExControl = class(TControl, IJvControlEvents, IPerformControl)
  
  
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  
  private
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property HintColor: TColor read FHintColor write FHintColor default clInfoBk;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  private
  
  
    FAboutJVCLX: TJVCLAboutInfo;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCLX write FAboutJVCLX stored False;
  
  
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;
  TJvExPubControl = class(TJvExControl)
  
  end;
  
  TJvExWinControl = class(TWinControl, IJvWinControlEvents, IJvControlEvents, IPerformControl)
  
  
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  private
    FDoubleBuffered: Boolean;
  protected
    procedure BoundsChanged; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    function GetDoubleBuffered: Boolean;
  public
    property DoubleBuffered: Boolean read GetDoubleBuffered write FDoubleBuffered;
  
  private
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property HintColor: TColor read FHintColor write FHintColor default clInfoBk;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  private
  
  
    FAboutJVCLX: TJVCLAboutInfo;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCLX write FAboutJVCLX stored False;
  
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  
  private
    FCanvas: TCanvas;
  protected
    procedure Paint; virtual;
    property Canvas: TCanvas read FCanvas;
  
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;
  TJvExPubWinControl = class(TJvExWinControl)
  
  end;
  

  TJvExGraphicControl = class(TGraphicControl, IJvControlEvents, IPerformControl)
  
  
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  
  private
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property HintColor: TColor read FHintColor write FHintColor default clInfoBk;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  private
  
  
    FAboutJVCLX: TJVCLAboutInfo;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCLX write FAboutJVCLX stored False;
  
  
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  
  private
    FText: TCaption; // TControl does not save the Caption property
  protected
    function GetText: TCaption; override;
    procedure SetText(const Value: TCaption); override;
  
  end;
  TJvExPubGraphicControl = class(TJvExGraphicControl)
  
  end;
  
  TJvExCustomControl = class(TCustomControl,  IJvWinControlEvents, IJvCustomControlEvents, IJvControlEvents, IPerformControl)
  
  
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  private
    FDoubleBuffered: Boolean;
  protected
    procedure BoundsChanged; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    function GetDoubleBuffered: Boolean;
  public
    property DoubleBuffered: Boolean read GetDoubleBuffered write FDoubleBuffered;
  
  private
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property HintColor: TColor read FHintColor write FHintColor default clInfoBk;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  private
  
  
    FAboutJVCLX: TJVCLAboutInfo;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCLX write FAboutJVCLX stored False;
  
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;
  TJvExPubCustomControl = class(TJvExCustomControl)
  
  end;
  
  TJvExHintWindow = class(THintWindow,  IJvWinControlEvents, IJvCustomControlEvents, IJvControlEvents, IPerformControl)
  
  
  public
    function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
    function IsRightToLeft: Boolean;
  protected
    WindowProc: TClxWindowProc;
    procedure WndProc(var Msg: TMessage); virtual;
    procedure MouseEnter(Control: TControl); override;
    procedure MouseLeave(Control: TControl); override;
    procedure ParentColorChanged; override;
  private
    FDoubleBuffered: Boolean;
  protected
    procedure BoundsChanged; override;
    function NeedKey(Key: Integer; Shift: TShiftState;
      const KeyText: WideString): Boolean; override;
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    function GetDoubleBuffered: Boolean;
  public
    property DoubleBuffered: Boolean read GetDoubleBuffered write FDoubleBuffered;
  
  private
    FHintColor: TColor;
    FSavedHintColor: TColor;
    FMouseOver: Boolean;
    FOnParentColorChanged: TNotifyEvent;
  
    FOnMouseEnter: TNotifyEvent;
    FOnMouseLeave: TNotifyEvent;
  protected
    property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
    property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
  
  protected
    procedure CMFocusChanged(var Msg: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure DoFocusChanged(Control: TWinControl); dynamic;
    property MouseOver: Boolean read FMouseOver write FMouseOver;
    property HintColor: TColor read FHintColor write FHintColor default clInfoBk;
    property OnParentColorChange: TNotifyEvent read FOnParentColorChanged write FOnParentColorChanged;
  private
  
  
    FAboutJVCLX: TJVCLAboutInfo;
  published
    property AboutJVCLX: TJVCLAboutInfo read FAboutJVCLX write FAboutJVCLX stored False;
  
  protected
    procedure DoGetDlgCode(var Code: TDlgCodes); virtual;
    procedure DoSetFocus(FocusedWnd: HWND); dynamic;
    procedure DoKillFocus(FocusedWnd: HWND); dynamic;
    procedure DoBoundsChanged; dynamic;
    function DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean; virtual;
  
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;
  TJvExPubHintWindow = class(TJvExHintWindow)
  
  end;
  





procedure Control_MouseEnter(Instance: TControl; var FMouseOver: Boolean;
  var FSavedHintColor: TColor; FHintColor: TColor);




procedure Control_MouseLeave(var FMouseOver: Boolean; FSavedHintColor: TColor);


function DefaultDoPaintBackground(Instance: TWinControl; Canvas: TCanvas; Param: Integer): Boolean;


procedure WidgetControl_PaintBackground(Instance: TWidgetControl; Canvas: TCanvas);

function WidgetControl_Painting(Instance: TWidgetControl; Canvas: TCanvas;
  EventRegion: QRegionH): IInterface;
  // - returns NIL if the Instance is in csDestroying.
  // - enters the painting and returns an interface that leaves the painting when
  //   is is released.
  // - redirects Canvas.Handle to a Pixmap if Instance.DoubleBuffered is set
procedure WidgetControl_DefaultPaint(Instance: TWidgetControl; Canvas: TCanvas);

function TWidgetControl_NeedKey(Instance: TWidgetControl; Key: Integer;
  Shift: TShiftState; const KeyText: WideString; InheritedValue: Boolean): Boolean;


procedure TCustomEdit_Undo(Instance: TWinControl);
procedure TCustomEdit_Copy(Instance: TWinControl);
procedure TCustomEdit_Paste(Instance: TWinControl);
procedure TCustomEdit_Cut(Instance: TWinControl);

implementation





procedure Control_MouseEnter(Instance: TControl; var FMouseOver: Boolean;
  var FSavedHintColor: TColor; FHintColor: TColor);

begin
  if (not FMouseOver) and not (csDesigning in Instance.ComponentState) then
  begin
    FMouseOver := True;
    FSavedHintColor := Application.HintColor;
    if FHintColor <> clNone then
      Application.HintColor := FHintColor;
  end;
  
end;



procedure Control_MouseLeave(var FMouseOver: Boolean; FSavedHintColor: TColor);

begin
  if FMouseOver then
  begin
    FMouseOver := False;
    Application.HintColor := FSavedHintColor;
  end;
  
end;

function DefaultDoPaintBackground(Instance: TWinControl; Canvas: TCanvas; Param: Integer): Boolean;
begin
  
  
  Result := False;
  
end;



type
  TOpenWidgetControl = class(TWidgetControl);
  TOpenCustomEdit = class(TCustomEdit);
  TOpenCustomMaskEdit = class(TCustomMaskEdit);

  TWidgetControlPainting = class(TInterfacedObject)
  private
    FCanvas: TCanvas;
    FInstance: TWidgetControl;
    FPixmap: QPixmapH;
    FOriginalPainter: QPainterH;
    FRegion: QRegionH;
  public
    constructor Create(Instance: TWidgetControl; Canvas: TCanvas;
      EventRegion: QRegionH);
    destructor Destroy; override;
  end;

constructor TWidgetControlPainting.Create(Instance: TWidgetControl; Canvas: TCanvas;
  EventRegion: QRegionH);
var
  WidgetCtrlIntf: IJvWinControlEvents;
begin
  inherited Create;
  FCanvas := Canvas;
  FInstance := Instance;
  TControlCanvas(FCanvas).StartPaint;
  if Supports(Instance, IJvWinControlEvents, WidgetCtrlIntf) and
     WidgetCtrlIntf.GetDoubleBuffered then
  begin
    FPixmap := QPixmap_create(Instance.Width, Instance.Height, -1, QPixmapOptimization_DefaultOptim);
    QPixmap_fill(FPixmap, Instance.Handle, 0, 0);
    FOriginalPainter := Canvas.Handle;
    Canvas.Handle := QPainter_create(FPixmap);
    TControlCanvas(FCanvas).StartPaint;
    FRegion := EventRegion;
  end;
  QPainter_setClipRegion(FCanvas.Handle, EventRegion);
end;

destructor TWidgetControlPainting.Destroy;
begin
  if FPixmap <> nil then
  begin
    TControlCanvas(FCanvas).StopPaint;
    QPainter_destroy(FCanvas.Handle);
    FCanvas.Handle := FOriginalPainter;
    QPainter_setClipRegion(FCanvas.Handle, FRegion);
    QPainter_drawPixmap(FCanvas.Handle, 0, 0,
      FPixmap, 0, 0, QPixmap_width(FPixmap), QPixmap_height(FPixmap));
    QPixmap_destroy(FPixmap);
  end;
  TControlCanvas(FCanvas).StopPaint;
  inherited Destroy;
end;

function WidgetControl_Painting(Instance: TWidgetControl; Canvas: TCanvas;
  EventRegion: QRegionH): IInterface;
begin
  if csDestroying in Instance.ComponentState then
    Result := nil
  else
    Result := TWidgetControlPainting.Create(Instance, Canvas, EventRegion);
end;

procedure WidgetControl_PaintBackground(Instance: TWidgetControl; Canvas: TCanvas);
var
  b: Boolean;
begin
  b := (Instance as IJvWinControlEvents).DoPaintBackground(Canvas, 0);
  if b then
  begin
    // The widget draws the background itself, so set the background to no background
    if QWidget_backgroundMode(Instance.Handle) <> QWidgetBackgroundMode_NoBackground then
      QWidget_setBackgroundMode(Instance.Handle, QWidgetBackgroundMode_NoBackground);
  end
  else
  begin
    // The widget does not draw the background itself
    if QWidget_backgroundMode(Instance.Handle) = QWidgetBackgroundMode_NoBackground then
      QWidget_setBackgroundMode(Instance.Handle, QWidgetBackgroundMode_PaletteBackground);
  end;
end;

procedure WidgetControl_DefaultPaint(Instance: TWidgetControl; Canvas: TCanvas);
var
  PaintDevice: QPaintDeviceH;
  IsActive: Boolean;
  Painting: procedure(Instance: TWidgetControl; Sender: QObjectH; EventRegion: QRegionH);
  Painter: QPainterH;
begin
  if not (csDestroying in Instance.ComponentState) and
     (not Supports(Instance, IJvCustomControlEvents)) then
       { TCustomControls do not have a default paint method. }
  begin
   // Canvas.StopPaint uses a counter, but we must garantee the Stop.
    PaintDevice := nil;
    Painter := Canvas.Handle;
    IsActive := QPainter_isActive(Painter);
    if IsActive then
    begin
      PaintDevice := QPainter_device(Painter);
      QPainter_end(Painter);
    end;
    try
      Painting := @TOpenWidgetControl.Painting;
     // default painting
      Painting(Instance, Instance.Handle, QPainter_clipRegion(Painter));
    finally
      // restore
      if IsActive then
        QPainter_begin(Painter, PaintDevice); // restart
    end;
  end;
end;

function TWidgetControl_NeedKey(Instance: TWidgetControl; Key: Integer;
  Shift: TShiftState; const KeyText: WideString; InheritedValue: Boolean): Boolean;

  function IsTabKey: Boolean;
  begin
    Result := (Key = Key_Tab) or (Key = Key_BackTab);
  end;

  function IsArrowKey: Boolean;
  begin
    Result := (Key = Key_Left) or (Key = Key_Right) or
              (Key = Key_Down) or (Key = Key_Up);
  end;

var
  DlgCodes: TDlgCodes;
  Value: TInputKeys;
begin
  Result := InheritedValue;
  Value := TOpenWidgetControl(Instance).InputKeys;

  DlgCodes := [dcNative];
  if ikAll in Value then
    Include(DlgCodes, dcWantAllKeys);
  if ikArrows in Value then
    Include(DlgCodes, dcWantArrows);
  if ikTabs in Value then
    Include(DlgCodes, dcWantTab);
  if ikChars in Value then
    Include(DlgCodes, dcWantChars);

  (Instance as IJvWinControlEvents).DoGetDlgCode(DlgCodes);

  if not (dcNative in DlgCodes) then
  begin
    Result := False;
    if dcWantAllKeys in DlgCodes then
      Result := True;
    if (not Result) and (dcWantTab in DlgCodes) then
      Result := IsTabKey;
    if (not Result) and (dcWantArrows in DlgCodes) then
      Result := IsArrowKey;
    if (not Result) and (dcWantChars in DlgCodes) then
      Result := ((Shift * [ssCtrl, ssAlt] = []) and
                ((Hi(Word(Key)) = 0) or (Length(KeyText) > 0))) and
                not (IsTabKey or IsArrowKey);
  end;
end;

{$IFDEF COMPILER6}

// redirect Kylix 3 / Delphi 7 function names to Delphi 6 available function
{$IF not declared(PatchedVCLX)}
type
  QClxLineEditH = QLineEditH;

procedure QClxLineEdit_copy(handle: QLineEditH); cdecl; external QtIntf name QtNamePrefix + 'QLineEdit_copy';
procedure QClxLineEdit_cut(handle: QLineEditH); cdecl; external QtIntf name QtNamePrefix + 'QLineEdit_cut';
procedure QClxLineEdit_insert(handle: QLineEditH; p1: PWideString); cdecl; external QtIntf name QtNamePrefix + 'QLineEdit_insert';
{$IFEND}

procedure QClxLineEdit_undo(handle: QLineEditH);
var
  W: WideString;
  Event: QKeyEventH;
begin
  W := 'Z';
  Event := QKeyEvent_create(QEventType_KeyPress, KEY_Z, Ord('Z'),
    Integer(ButtonState_ControlButton), @W, False, 1);
  try
    QApplication_sendEvent(handle, Event);
  finally
    QKeyEvent_destroy(Event);
  end;
end;

{$ENDIF COMPILER6}



procedure TCustomEdit_Undo(Instance: TWinControl);
begin
  
  
  if Instance is TCustomMemo then
    QMultiLineEdit_undo(QMultiLineEditH(Instance.Handle))
  else
  if Instance is TCustomEdit then
    QClxLineEdit_undo(QClxLineEditH(Instance.Handle));
  
end;

procedure TCustomEdit_Copy(Instance: TWinControl);
begin
  
  
  if Instance is TCustomMemo then
    QMultiLineEdit_copy(QMultiLineEditH(Instance.Handle))
  else
  if Instance is TCustomEdit then
    QClxLineEdit_copy(QClxLineEditH(Instance.Handle));
  
end;

procedure TCustomEdit_Cut(Instance: TWinControl);
begin
  
  
  if Instance is TCustomMemo then
    QMultiLineEdit_cut(QMultiLineEditH(Instance.Handle))
  else
  if Instance is TCustomMaskEdit then
  begin
    if not (TCustomMaskEdit(Instance).IsMasked) then  // CutToClipboard would call "inherited"
      QClxLineEdit_cut(QClxLineEditH(Instance.Handle))
    else
      TCustomMaskEdit(Instance).CutToClipboard;
  end
  else
  if Instance is TCustomEdit then
    QClxLineEdit_cut(QClxLineEditH(Instance.Handle));
  
end;

procedure TCustomEdit_Paste(Instance: TWinControl);
  
  procedure LineEditPaste;
  var
    WValue: WideString;
  begin
    WValue := Clipboard.AsText;
    case TOpenCustomEdit(Instance).CharCase of
      ecUpperCase:
        WValue := WideUpperCase(WValue);
      ecLowerCase:
        WValue := WideLowerCase(WValue);
    end;
    QClxLineEdit_insert(QClxLineEditH(Instance.Handle), PWideString(@WValue));
    QClxLineEdit_resetSelection(QClxLineEditH(Instance.Handle));
  end;
  
begin
  
  
  if Instance is TCustomMemo then
    QMultiLineEdit_paste(QMultiLineEditH(Instance.Handle))
  else
  if Instance is TCustomMaskEdit then
  begin
    if not TCustomMaskEdit(Instance).IsMasked or
       TOpenCustomMaskEdit(Instance).ReadOnly then  // PasteFromClipboard would call "inherited"
      QClxLineEdit_cut(QClxLineEditH(Instance.Handle))
    else
      TCustomMaskEdit(Instance).CutToClipboard;
  end
  else
  if Instance is TCustomEdit then
    LineEditPaste;
  
end;

// *****************************************************************************



procedure TJvExControl.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
  {$IFEND}
end;

procedure TJvExControl.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
  {$IFEND}
end;

procedure TJvExControl.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExControl.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExControl.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExControl.IsRightToLeft: Boolean;
begin
  Result := False;
end;

procedure TJvExControl.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExControl.DoFocusChanged(Control: TWinControl);
begin
end;

constructor TJvExControl.Create(AOwner: TComponent);
begin
  
  WindowProc := WndProc;
  {$IF declared(PatchedVCLX) and (PatchedVCLX > 3.3)}
  SetCopyRectMode(Self, cmVCL);
  {$IFEND}
  
  inherited Create(AOwner);
  FHintColor := clInfoBk;
  
end;

destructor TJvExControl.Destroy;
begin
  
  inherited Destroy;
end;


procedure TJvExWinControl.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
  {$IFEND}
end;

procedure TJvExWinControl.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
  {$IFEND}
end;

procedure TJvExWinControl.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExWinControl.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExWinControl.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExWinControl.IsRightToLeft: Boolean;
begin
  Result := False;
end;
procedure TJvExWinControl.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  if WidgetControl_Painting(Self, Canvas, EventRegion) <> nil then
  begin
    WidgetControl_PaintBackground(Self, Canvas);
     Paint;
  end;
end;

function TJvExWinControl.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;

function TJvExWinControl.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := TWidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExWinControl.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExWinControl.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExWinControl.DoFocusChanged(Control: TWinControl);
begin
end;
procedure TJvExWinControl.DoBoundsChanged;
begin
end;

procedure TJvExWinControl.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExWinControl.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExWinControl.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExWinControl.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
  JMP   DefaultDoPaintBackground
end;


constructor TJvExWinControl.Create(AOwner: TComponent);
begin
  WindowProc := WndProc;
  {$IF declared(PatchedVCLX) and (PatchedVCLX > 3.3)}
  SetCopyRectMode(Self, cmVCL);
  {$IFEND}
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  TControlCanvas(FCanvas).Control := Self;
  
end;

destructor TJvExWinControl.Destroy;
begin
  
  FCanvas.Free;
  inherited Destroy;
end;

procedure TJvExWinControl.Paint;
begin
  WidgetControl_DefaultPaint(Self, Canvas);
end;




procedure TJvExGraphicControl.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
  {$IFEND}
end;

procedure TJvExGraphicControl.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
  {$IFEND}
end;

procedure TJvExGraphicControl.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExGraphicControl.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExGraphicControl.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExGraphicControl.IsRightToLeft: Boolean;
begin
  Result := False;
end;

procedure TJvExGraphicControl.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExGraphicControl.DoFocusChanged(Control: TWinControl);
begin
end;

constructor TJvExGraphicControl.Create(AOwner: TComponent);
begin
  
  WindowProc := WndProc;
  {$IF declared(PatchedVCLX) and (PatchedVCLX > 3.3)}
  SetCopyRectMode(Self, cmVCL);
  {$IFEND}
  
  inherited Create(AOwner);
  FHintColor := clInfoBk;
  
end;

destructor TJvExGraphicControl.Destroy;
begin
  
  inherited Destroy;
end;

function TJvExGraphicControl.GetText: TCaption;
begin
  Result := FText;
end;

procedure TJvExGraphicControl.SetText(const Value: TCaption);
begin
  if Value <> FText then
  begin
    FText := Value;
    TextChanged;
  end;
end;





procedure TJvExCustomControl.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
  {$IFEND}
end;

procedure TJvExCustomControl.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
  {$IFEND}
end;

procedure TJvExCustomControl.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExCustomControl.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExCustomControl.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExCustomControl.IsRightToLeft: Boolean;
begin
  Result := False;
end;
procedure TJvExCustomControl.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  if WidgetControl_Painting(Self, Canvas, EventRegion) <> nil then
  begin
    WidgetControl_PaintBackground(Self, Canvas);
     Paint;
  end;
end;

function TJvExCustomControl.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;

function TJvExCustomControl.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := TWidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExCustomControl.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExCustomControl.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExCustomControl.DoFocusChanged(Control: TWinControl);
begin
end;
procedure TJvExCustomControl.DoBoundsChanged;
begin
end;

procedure TJvExCustomControl.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExCustomControl.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExCustomControl.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExCustomControl.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
  JMP   DefaultDoPaintBackground
end;
constructor TJvExCustomControl.Create(AOwner: TComponent);
begin
  
  WindowProc := WndProc;
  {$IF declared(PatchedVCLX) and (PatchedVCLX > 3.3)}
  SetCopyRectMode(Self, cmVCL);
  {$IFEND}
  
  inherited Create(AOwner);
  FHintColor := clInfoBk;
  
end;

destructor TJvExCustomControl.Destroy;
begin
  
  inherited Destroy;
end;


procedure TJvExHintWindow.MouseEnter(Control: TControl);
begin
  Control_MouseEnter(Self, FMouseOver, FSavedHintColor, FHintColor);
  inherited MouseEnter(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseEnter) then
    FOnMouseEnter(Self);
  {$IFEND}
end;

procedure TJvExHintWindow.MouseLeave(Control: TControl);
begin
  Control_MouseLeave(FMouseOver, FSavedHintColor);
  inherited MouseLeave(Control);
  {$IF not declared(PatchedVCLX)}
  if Assigned(FOnMouseLeave) then
    FOnMouseLeave(Self);
  {$IFEND}
end;

procedure TJvExHintWindow.ParentColorChanged;
begin
  inherited ParentColorChanged;
  if Assigned(FOnParentColorChanged) then
    FOnParentColorChanged(Self);
end;

function TJvExHintWindow.Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;
var
  Mesg: TMessage;
begin
  Mesg.Result := 0;
  if Self <> nil then
  begin
    Mesg.Msg := Msg;
    Mesg.WParam := WParam;
    Mesg.LParam := LParam;
    WindowProc(Mesg);
  end;
  Result := Mesg.Result;
end;

procedure TJvExHintWindow.WndProc(var Msg: TMessage);
begin
  Dispatch(Msg);
end;

function TJvExHintWindow.IsRightToLeft: Boolean;
begin
  Result := False;
end;
procedure TJvExHintWindow.Painting(Sender: QObjectH; EventRegion: QRegionH);
begin
  if WidgetControl_Painting(Self, Canvas, EventRegion) <> nil then
  begin
    WidgetControl_PaintBackground(Self, Canvas);
     Paint;
  end;
end;

function TJvExHintWindow.GetDoubleBuffered: Boolean;
begin
  Result := FDoubleBuffered;
end;

function TJvExHintWindow.NeedKey(Key: Integer; Shift: TShiftState;
  const KeyText: WideString): Boolean;
begin
  Result := TWidgetControl_NeedKey(Self, Key, Shift, KeyText,
    inherited NeedKey(Key, Shift, KeyText));
end;

procedure TJvExHintWindow.BoundsChanged;
begin
  inherited BoundsChanged;
  DoBoundsChanged;
end;

procedure TJvExHintWindow.CMFocusChanged(var Msg: TCMFocusChanged);
begin
  inherited;
  DoFocusChanged(Msg.Sender);
end;

procedure TJvExHintWindow.DoFocusChanged(Control: TWinControl);
begin
end;
procedure TJvExHintWindow.DoBoundsChanged;
begin
end;

procedure TJvExHintWindow.DoGetDlgCode(var Code: TDlgCodes);
begin
end;

procedure TJvExHintWindow.DoSetFocus(FocusedWnd: HWND);
begin
end;

procedure TJvExHintWindow.DoKillFocus(FocusedWnd: HWND);
begin
end;

function TJvExHintWindow.DoPaintBackground(Canvas: TCanvas; Param: Integer): Boolean;
asm
  JMP   DefaultDoPaintBackground
end;
constructor TJvExHintWindow.Create(AOwner: TComponent);
begin
  
  WindowProc := WndProc;
  {$IF declared(PatchedVCLX) and (PatchedVCLX > 3.3)}
  SetCopyRectMode(Self, cmVCL);
  {$IFEND}
  
  inherited Create(AOwner);
  FHintColor := clInfoBk;
  
end;

destructor TJvExHintWindow.Destroy;
begin
  
  inherited Destroy;
end;

// *****************************************************************************

type
  TOpenControl = class(TControl);
  PBoolean = ^Boolean;
  PPointer = ^Pointer;

function ReadProtectedMemory(Address: Pointer; var Buffer; Count: Cardinal): Boolean;
var
  n: Cardinal;
begin
  Result := ReadProcessMemory(GetCurrentProcess, Address, @Buffer, Count, n);
  Result := Result and (n = Count);
end;

function WriteProtectedMemory(Address: Pointer; const Buffer; Count: Cardinal): Boolean;
var
  n: Cardinal;
begin
  Result := WriteProcessMemory(GetCurrentProcess, Address, @Buffer, Count, n);
  Result := Result and (n = Count);
end;

type
  TJumpCode = packed record
    Pop: Byte; // pop xxx
    Jmp: Byte; // jmp Offset
    Offset: Integer;
  end;

  TOrgCallCode = packed record
    Push: Byte; // push ebx/ebp
    InjectedCode: TJumpCode;
    Jmp: Byte; // jmp Offset
    Offset: Integer;
    Address: Pointer;
  end;

function GetRelocAddress(ProcAddress: Pointer): Pointer;
type
  TRelocationRec = packed record
    Jump: Word;
    Address: PPointer;
  end;
var
  Relocation: TRelocationRec;
  Data: Byte;
begin
  Result := ProcAddress;
 // the relocation table meight be protected
  if ReadProtectedMemory(ProcAddress, Data, SizeOf(Data)) then
  begin
    if Data = $FF then // ProcAddress is in a dll or package
      if ReadProtectedMemory(ProcAddress, Relocation, SizeOf(Relocation)) then
        Result := Relocation.Address^;
  end;
end;

function InstallProcHook(ProcAddress, HookProc, OrgCallProc: Pointer): Boolean;
var
  Code: TJumpCode;
  OrgCallCode: TOrgCallCode;
begin
  ProcAddress := GetRelocAddress(ProcAddress);
  Result := False;
  if Assigned(ProcAddress) and Assigned(HookProc) then
  begin
    if OrgCallProc <> nil then
    begin
      if ReadProtectedMemory(ProcAddress, OrgCallCode, SizeOf(OrgCallCode) - (1 + SizeOf(Integer))) then
      begin
        OrgCallCode.Jmp := $E9;
        OrgCallCode.Offset := (Integer(ProcAddress) + 1 + SizeOf(Code)) -
          Integer(OrgCallProc) -
          (SizeOf(OrgCallCode) - SizeOf(OrgCallCode.Address));
        OrgCallCode.Address := ProcAddress;

        WriteProtectedMemory(OrgCallProc, OrgCallCode, SizeOf(OrgCallCode));
        FlushInstructionCache(GetCurrentProcess, OrgCallProc, SizeOf(OrgCallCode));
      end;
    end;

    if PByte(ProcAddress)^ = $53 then // push ebx
      Code.Pop := $5B // pop ebx
    else
    if PByte(ProcAddress)^ = $55 then // push ebp
      Code.Pop := $5D // pop ebp
    else
      Exit;
    Code.Jmp := $E9;
    Code.Offset := Integer(HookProc) - (Integer(ProcAddress) + 1) - SizeOf(Code);

   { The strange thing is that something overwrites the $e9 with a "PUSH xxx" }
    if WriteProtectedMemory(Pointer(Cardinal(ProcAddress) + 1), Code,
         SizeOf(Code)) then
    begin
      FlushInstructionCache(GetCurrentProcess, ProcAddress, SizeOf(Code));
      Result := True;
    end;
  end;
end;

function UninstallProcHook(OrgCallProc: Pointer): Boolean;
var
  OrgCallCode: TOrgCallCode;
  ProcAddress: Pointer;
begin
  Result := False;
  if Assigned(OrgCallProc) then
  begin
    if OrgCallProc <> nil then
    begin
      if ReadProtectedMemory(OrgCallProc, OrgCallCode, SizeOf(OrgCallCode)) then
      begin
        ProcAddress := OrgCallCode.Address;

        Result := WriteProtectedMemory(ProcAddress, OrgCallCode, 1 + SizeOf(TJumpCode));
        FlushInstructionCache(GetCurrentProcess, ProcAddress, SizeOf(OrgCallCode));
      end;
    end;
  end;
end;





// Handles DoSetFocus and DoKillFocus

function AppEventFilter(App: TApplication; Sender: QObjectH; Event: QEventH): Boolean; cdecl;
var
  Control: TWidgetControl;
  Intf: IJvWinControlEvents;
  Wnd: HWND;
begin
  Result := False; // let the default event handler handle this event
  try
    case QEvent_type(Event) of
      QEventType_FocusIn, QEventType_FocusOut:
        begin
          Control := FindControl(QWidgetH(Sender));
          if (Control <> nil) and Supports(Control, IJvWinControlEvents, Intf) then
          begin
            if Screen.ActiveControl <> nil then
              Wnd := Screen.ActiveControl.Handle
            else
              Wnd := HWND(0);
            if QEvent_type(Event) = QEventType_FocusIn then
              Intf.DoSetFocus(Wnd)
            else
              Intf.DoKillFocus(Wnd);
          end;
        end;
    end;
  except
    on E: Exception do
    begin
      Application.ShowException(E);
      Result := False;
    end;
  end;
end;

var
  AppEventFilterHook: QObject_hookH = nil;

procedure InstallAppEventFilterHook;
var
  Method: TMethod;
begin
  if AppEventFilterHook = nil then
  begin
    Method.Code := @AppEventFilter;
    Method.Data := Application;
    AppEventFilterHook := QObject_hook_create(Application.Handle);
    Qt_hook_hook_events(AppEventFilterHook, Method);
  end;
end;

procedure UninstallAppEventFilterHook;
begin
  if Assigned(AppEventFilterHook) then
    QObject_hook_destroy(AppEventFilterHook);
end;


function CallSetFocusedControl(Instance: TCustomForm; Control: TWidgetControl): Boolean;
asm
  dd    0, 0, 0, 0  // 16 Bytes
end;

function SetFocusedControlHook(Instance: TCustomForm; Control: TWidgetControl): Boolean;
var
  Msg: TCMFocusChanged;
begin
  if csFocusing in Instance.ControlState then
    Result := CallSetFocusedControl(Instance, Control)
  else
  begin
    Result := CallSetFocusedControl(Instance, Control);
    if Result then
    begin
      Instance.ControlState := Instance.ControlState + [csFocusing]; // lock
      try
        Msg.Msg := CM_FOCUSCHANGED;
        Msg.Unused := 0;
        Msg.Sender := Control;
        Msg.Result := 0;
        Instance.Broadcast(Msg);
      finally
        Instance.ControlState := Instance.ControlState - [csFocusing];
      end;
    end;
  end;
end;

procedure CutToClipboardHook(Instance: TWidgetControl);
var
  Intf: IJvEditControlEvents;
begin
  if Supports(Instance, IJvEditControlEvents, Intf) then
    Intf.DoClipboardCut
  else
    TCustomEdit_Cut(Instance);
end;

procedure CopyToClipboardHook(Instance: TWidgetControl);
var
  Intf: IJvEditControlEvents;
begin
  if Supports(Instance, IJvEditControlEvents, Intf) then
    Intf.DoClipboardCopy
  else
    TCustomEdit_Copy(Instance);
end;

procedure PasteFromClipboardHook(Instance: TWidgetControl);
var
  Intf: IJvEditControlEvents;
begin
  if Supports(Instance, IJvEditControlEvents, Intf) then
    Intf.DoClipboardPaste
  else
    TCustomEdit_Paste(Instance);
end;

procedure UndoHook(Instance: TWidgetControl);
var
  Intf: IJvEditControlEvents;
begin
  if Supports(Instance, IJvEditControlEvents, Intf) then
    Intf.DoUndo
  else
    TCustomEdit_Undo(Instance);
end;

var
  CallCutToClipboard, CallPasteFromClipboard,
    CallCopyToClipboard, CallUndo: TOrgCallCode;

initialization
  InstallAppEventFilterHook;
  InstallProcHook(@TCustomForm.SetFocusedControl, @SetFocusedControlHook,
                  @CallSetFocusedControl);

  InstallProcHook(@TCustomEdit.CutToClipboard, @CutToClipboardHook,
                  @CallCutToClipboard);
  InstallProcHook(@TCustomEdit.CopyToClipboard, @CopyToClipboardHook,
                  @CallCopyToClipboard);
  InstallProcHook(@TCustomEdit.PasteFromClipboard, @PasteFromClipboardHook,
                  @CallPasteFromClipboard);
  
  InstallProcHook(@TCustomEdit.Undo, @UndoHook,
                  @CallUndo);
  

finalization
  UninstallProcHook(@CallCutToClipboard);
  UninstallProcHook(@CallCopyToClipboard);
  UninstallProcHook(@CallPasteFromClipboard);
  
  UninstallProcHook(@CallUndo);
  

  UninstallProcHook(@CallSetFocusedControl);
  UninstallAppEventFilterHook;



end.


@@JvScheduledEvents.pas
Summary
  Provides code and a component to schedule execution of events.
<INCLUDE JVCL.UnitText.dtx>
Author
  Marcel Bestebroer
----------------------------------------------------------------------------------------------------
@@TJvScheduledEvents
JVCLInfo
  GROUP=JVCL.System.AlarmsAndTimers.Alarms
  FLAG=Component
##<TITLEIMG TJvCustomScheduledEvents>
Summary
  Allows you to schedule execution of events using a recurring schedule.
Description
  TJvScheduledEvents allows you to schedule execution of events based on a recurring schedule, much
  like the recurring appointments/tasks in Microsoft® Outlook® or the replication/job scheduler in
  Microsoft® SQL Server.
  
  The component uses the JclSchedule unit and it's interface to generate the execution times. For
  more information on scheduling posibilities, check out the help for JclSchedule.
  
  Components usage:
  
  * Drop a TJvScheduledEvents component on a form or a datamodule
  * Optionally specify if schedule states should be
    <LINK TJvCustomScheduledEvents.AutoSave, automatically saved/restored> when the application is
    terminated/started.
  * Optionally specify the <LINK TJvCustomScheduledEvents.AutoSave, registry key> to store/retrieve
    the schedule states.
  * Add some events (at design time using the component popup menu or the
    <LINK TJvCustomScheduledEvents.Events, events property>, specifying the
    <LINK TJvEventCollectionItem.Schedule, schedule> and the
    <LINK TJvEventCollectionItem.OnExecute, handler>; at run time by using
    Events.Add).
  * Optionally assign handlers to to fire <LINK TJvCustomScheduledEvents.OnStartEvent, before>
    and/or <LINK TJvCustomScheduledEvents.OnEndEvent, after> an event is/has fired.
----------------------------------------------------------------------------------------------------
@@TJvCustomScheduledEvents
Summary
  Base class for the TJvScheduleEvents component.
Description
  TJvCustomScheduledEvents is the base class for the TJvScheduledEvents component. It provides the
  base functionalitiy but does not publish anything.
  
  You should not create an instance of this class. Use one of the descendants instead.
See Also
  TJvScheduledEvents
----------------------------------------------------------------------------------------------------
@@TJvCustomScheduledEvents.AutoSave
Summary
  Specifies if the component should save the event states when it is destroyed.
Description
  AutoSave determines if the component stores all event states and last execution times in the
  registry when the component is destroyed (usually when the application terminates).
  
  When set to True, all event states and last execution times are saved to the location specified
  by the SaveTo property when the component is destroyed and are read back in from that location
  when the component is created.
  
  When set to False, no information is saved.
See Also
  SaveTo
----------------------------------------------------------------------------------------------------
@@TJvCustomScheduledEvents.OnEndEvent
Summary
  Event called when a scheduled events has been completed.
Description
  Write an OnEndEvent handler to take special action when a scheduled event has just been executed.
See Also
  OnStartEvent
----------------------------------------------------------------------------------------------------
@@TJvCustomScheduledEvents.OnStartEvent
Summary
  Event called when a scheduled event is about to be executed.
Description
  Write an OnStartEvent handler to take special action when a scheduled event is about to be
  executed.
See Also
  OnEndEvent
----------------------------------------------------------------------------------------------------
@@TJvCustomScheduledEvents.SaveTo
Summary
  Specifies the location where event states are stored to or retrieved from.
Description
  SaveTo specifies where event states and last execution time should be saved to or retrieved from
  when AutoSave is True. SaveTo should point to a registry location.
  
  The string should be in the format <<B><I>HKEY_specifier</I>\</B>><B><I>path</I></B> where
  <I>HKEY_Specifier</I> specifies which root key to use and <I>path</I> specifies the path in that
  root key.
  
  <I>HKEY_Specifier</I> can be one of the following values:
  <TABLE>
    Value                   Alternate
    =====                   =========
    HKEY_CLASSES_ROOT       HKCR
    HKEY_CURRENT_USER       HKCU
    HKEY_LOCAL_MACHINE      HKLM
    HKEY_USERS              HKU
    HKEY_PERFORMANCE_DATA   HKPD
    HKEY_CURRENT_CONFIG     HKCC
    HKEY_DYN_DATA           HKDD
  </TABLE>
  If you ommit the <I>HKEY_Specifier</I> when setting SaveTo <B>HKEY_CURRENT_USER</B> is assumed.
See Also
  AutoSave
----------------------------------------------------------------------------------------------------
@@TJvCustomScheduledEvents.Handle
Summary
  Window handle used by background thread to signal the execution of an event.
Description
  Handle is the window handle to receives messages from the background thread to signal when an
  event should be executed.
----------------------------------------------------------------------------------------------------
@@TJvCustomScheduledEvents.Events
Summary
  Holds a collection of events and their schedules.
Description
  Events is a collection of events and their schedules.
  
  At run time you can iterate over the items to retrieve information on each of the event or add new
  events on the fly.
  
  At design time you can use the editor to add events and set the schedule for each of them.
----------------------------------------------------------------------------------------------------
@@TJvEventCollection
Summary
  Maintains a list of scheduled events.
Description
  TJvEventCollection maintains a list of scheduled events as used by TJvCustomScheduledEvents
  descendants.
  
  The collection will be populated with TJvEventCollectionItem objects.
See Also
  TJvCustomScheduledEvents, TJvCustomScheduledEvents.Events, TJvEventCollectionItem
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem
Summary
  Represents a single scheduled event.
Description
  TJvEventCollectionItem represents a single scheduled event. It allows you to specify:

  * if <LINK TJvEventCollectionItem.CountMissedEvents, missed events> since the last save or the
    start of the schedule should be counted.
  * the <LINK TJvEventCollectionItem.Name, name> to represent the event with.
  * the <LINK TJvEventCollectionItem.Schedule, (recurring) schedule> for the event.
  * the <LINK TJvEventCollectionItem.OnExecute, handler> for the event.
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.ActualTriggerTime
Summary
  Determines the actual date and time at which the event was triggered.
Description
  ActualTriggerTime will report the date and time at which the event was triggered. 
  
  If your application is busy, there might be difference between actual trigger time and requested
  trigger time. To find out what date and time the event should have been triggered you can check
  the value of RequestedTriggerTime.
See Also
  RequestedTriggerTime, NextFire
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.CountMissedEvents
Summary
  Specifies if events missed since the start of the schedule or since the last saved state should be
  counted.
Description
  CountMissedEvents determines if events that should have occured since the start of the schedule or
  since the last saved state should be counted. This could potentionally influence the ending of the
  schedule if it's end type is set to a specific day count and/or trigger count.
  
  If set to True events that should have occured are counted when determining the end of the
  schedule.
  
  If set to False events that should have occured are not counted when determining the end of the
  schedule.
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.Data
Summary
  Specifies any application-specific data associated with the scheduled event.
Description
  Use Data to associate arbitrary data structure with the scheduled event. When the event if fired,
  Data allows the application to quickly access information related to the schedule (eg. to retrieve
  the ID of a related appointment stored in a database).
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.Name
Summary
  Represents the name of the scheduled event.
Description
  Name represents the name of the scheduled event. It's main purpose is to identify different events
  at design time, but could be used also at run time to identify the various events.
  
  At design time when a new event is added it's given a unique name <within the component> based on
  the format <B>Event<I>n</I></B> when <I>n</I> is the lowest number (larger than 0) that makes the
  name unique.
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.NextFire
Summary
  Determines the date and time at which the event is fired again.
Description
  NextFire determines the timestamp at which the event will be fired again.
  
  If there are no more events NextFire will hold NullStamp.

  If a snooze request has been issued NextFire will hold the timestamp at which the snooze interval
  has passed.

  If the schedule has not ended NextFire will hold the timestamp fo the next event.
See Also
  NextScheduleFire, Snooze
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.NextScheduleFire
Summary
  Determines the next date and time at which the event is scheduled to fire again.
Description
  NextScheduleFire determines the timestamp at which the event will be fired again, according to the
  Schedule. It will not take any snooze requests into account.
  
  If there are no more events NextScheduleFire will hold NullStamp, regardless of any outstanding
  Snooze requests.
See Also
  NextFire, Snooze
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.RequestedTriggerTime
Summary
  Determines the date and time at which the event was supposed to be triggered.
Description
  RequestedTriggerTime will report the date and time at which the event was scheduled to be 
  triggered (either throught the schedule or because of a Snooze request).
  
  If your application is busy, there might be difference between actual trigger time and requested
  trigger time. To find out what date and time the event should was triggered you can check
  the value of ActualTriggerTime.
See Also
  ActualTriggerTime, NextFire, NextScheduleFire, Snooze
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.Schedule
Summary
  Specifies the dates and times at which the event should fire.
Description
  Schedule specifies at which dates and times the event should fire. Schedule uses the IJclSchedule
  interface as defined in the JclSchedule unit (JEDI Code Library) to represent a recurring schedule
  for the event. For full information on recurring schedules you should read the help for
  IJclSchedule.
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.LastSnoozeInterval
Summary
  Indicates the snooze interval used in the last issued snooze request.
Description
  LastSnoozeInterval indicates the snooze interval used in the last issued snooze request. You can
  use this property to issue a new snooze request using the same interval.
See Also
  Snooze
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.LoadState
Summary
  Initializes the schedule to a specific state.
Description
  LoadState initializes the schedule state to the one specified by the input parameters.
  
  LoadState and SaveState are used by descendant components of TJvCustomScheduledEvent when its
  AutoSave property is set to True.
Parameters
  TriggerStamp  -       Timestamp of next event.
  DayCount -            Number of days events have been triggered <B>after</B> the event specified
                        by TriggerStamp is executed.
  TriggerCount -        Number of events that have been triggered <B>after</B> the event specified
                        by TriggerStamp is executed.
  SnoozeStamp -         Timestamp of next snooze event (or NullStamp if there was no snooze
                        request).
  ALastSnoozeInterval - _SYSTEM_TIME record containing the last issued snooze interval.
See Also
  SaveState
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.OnExecute
Summary
  Event to call at the preset dates and times.
Description
  Write an OnExecute event handler to execute at the intervals specified by the Schedule property.
  The event will be executed in the context of the main VCL thread.
Parameters
  Sender -        Reference to the scheduled event that is to be executed.
  IsSnoozeEvent - Flag to indicate if the execution is in response to a snooze request. If set to
                  True the event is called because the snooze interval has passed, otherwise the
                  event is called because it was scheduled that way.
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.Pause
Summary
  Pauses the schedule.
Description
  Pause will pause the schedule of the scheduled event. While in pause mode, no events will be
  generated. To resume the schedule, call Start.
See Also
  Start, Stop
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.SaveState
Summary
  Retrieves the current state of the schedule.
Description
  SaveState retrieves the current state of the schedule and stores it in the parameters.
  
  LoadState and SaveState are used by descendant components of TJvCustomScheduledEvent when its
  AutoSave property is set to True.
Parameters
  TriggerStamp  -       Timestamp of next event.
  DayCount -            Number of days events have been triggered <B>after</B> the event specified
                        by TriggerStamp is executed.
  TriggerCount -        Number of events that have been triggered <B>after</B> the event specified
                        by TriggerStamp is executed.
  SnoozeStamp -         Timestamp of next snooze event (or NullStamp if there was no snooze
                        request).
  ALastSnoozeInterval - _SYSTEM_TIME record containing the last issued snooze interval.
See Also
  LoadState
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.Snooze
Summary
  Schedules a reminder event.
Description
  Snooze will schedule a reminder event, separate from the set schedule by the Schedule property.
  Call this method from the OnExecute event to schedule a reminder to go off after a specified
  interval.
  
  The parameter order allows you to specify the interval in as less paramters as needed. All
  specified parameters will be combined, with no range check on any of them (eg. you could specify
  an interval of 3750 milliseconds, 75 seconds, 62 minutes, 28 hours and 3 days which would result
  in an interval of 4 days, 5 hours, 3 minutes, 18 seconds and 750 milliseconds. Alternatively you
  could have specified the interval as 363,798,750 milliseconds).
Parameters
  MSecs - Milliseconds to wait before the reminder event will be generated.
  Secs -  Seconds to wait before the reminder event will be generated.
  Mins -  Minutes to wait before the reminder event will be generated.
  Hrs -   Hours to wait before the reminder event will be generated.
  Days -  Days to wait before the reminder event will be generated.
See Also
  LastSnoozeInterval, OnExecute
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.Start
Summary
  Restarts or continues the schedule.
Description
  Start will continue a paused schedule or restart a running/ended schedule. If a schedule has not
  been initialized, Start will initialize it.
See Also
  Pause, Stop
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.State
Summary
  Indicates the current state.
Description
  State indicates the current state of the scheduled event. Read State to find out if the event is 
  uninitialized, waiting, triggered or executing or if the schedule has ended.
See Also
  TScheduledEventState
----------------------------------------------------------------------------------------------------
@@TJvEventCollectionItem.Stop
Summary
  Ends the scheduled event.
Description
  Stop will end the schedule of the scheduled event. The scheduled event will be set to an
  uninitialized state.
----------------------------------------------------------------------------------------------------
@@TScheduledEventState
<TITLE TScheduledEventState type>
Summary
  Type used to indicate the state of a scheduled event.
Description
  The TScheduledEventState type is used to indicate the state of a scheduled event. To retrieve the
  state of an event you can use the <LINK TJvEventCollectionItem.State, State> property of a 
  scheduled event.
See Also
  TJvEventCollectionItem.State
@@TScheduledEventState.sesNotInitialized
  The scheduled event has not yet been initialized or was stopped using the Stop method.
@@TScheduledEventState.sesWaiting
  The scheduled event is waiting for the scheduled time (either the time as dictated by the schedule
  or the time of the last snooze request).
@@TScheduledEventState.sesTriggered
  The scheduled event has been triggered but is not yet executing (message has been posted to the
  main thread and will be processed as soon as the application is idle).
@@TScheduledEventState.sesExecuting
  The scheduled event is executing.
@@TScheduledEventState.sesPaused
  The scheduled event is paused. The event will not execute until the schedule is resumed using the
  Start method.
@@TScheduledEventState.sesEnded
  The schedule for the scheduled event has reached it's end condition and no snooze requests have
  been posted.
----------------------------------------------------------------------------------------------------

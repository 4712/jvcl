----------------------------------------------------------------------------------------------------
@@JvWndProcHook.pas
Summary
  Contains the TJvWindowHook component.
<INCLUDE JVCL.UnitText.dtx>
Author
  Peter Thörnqvist
----------------------------------------------------------------------------------------------------
@@RegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder
<TITLE RegisterWndProcHook function>
Summary
  Registers a hook.
Description
  Call RegisterWndProcHook to hook a control. Hooking a control allows you to respond to messages send
  to that control.

  Use Order to specify whether you want to receive messages send to the hooked control, <i>before</i>
  or <i>after</i> the control handles them. By setting Order to hoBeforeMsg you can prevent the control
  to handle specific messages.

  TJvWindowHook calls this method when it wants to start hooking the control. An internal list is
  maintained to prevent "broken links" when a hook is removed.

  Call UnRegisterWndProcHook to unregister the hook.
Parameters
  AControl - Specifies the control to hook.
  AHandle  - Specifies the handle to hook.
  Hook     - Specifies the control hook procedure.
  Order    - Specifies whether to receive messages before or after the control handles them.
See Also
  TJvControlHook, TJvWindowHook, UnRegisterWndProcHook
----------------------------------------------------------------------------------------------------
@@RegisterWndProcHook@HWND@TJvControlHook@TJvHookOrder
<TITLE RegisterWndProcHook function>
<COMBINE RegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder>
----------------------------------------------------------------------------------------------------
@@TJvControlHook
<TITLE TJvControlHook type>
Summary
  The type for a control hook procedure.
Description
  TJvControlHook is the type for a control hook procedure that acts like a window procedure of a
  control. Like most window procedures, TJvControlHook takes a message record as an argument.

  The control hook should return True if it processes the message, and False if it does not. If the
  hook procedure is registered with parameter Order set to hoBeforeMsg, then returning True will
  prevent the hooked control to respond to the message.
Parameters
  Message - Represents the Windows message send to the hooked control.
See Also
  RegisterWndProcHook, UnRegisterWndProcHook
----------------------------------------------------------------------------------------------------
@@TJvHookMessageEvent
<TITLE TJvHookMessageEvent type>
----------------------------------------------------------------------------------------------------
@@TJvHookOrder
<TITLE TJvHookOrder type>
Summary
  Represents different kinds of hook methods.
Description
  The TJvHookOrder type is used to represent different kinds of hook methods.
@@TJvHookOrder.hoBeforeMsg
  Represents a hook method that allows to handle a message <i>before</i> the hooked control handles that message.
@@TJvHookOrder.hoAfterMsg
  Represents a hook method that allows to handle a message <i>after</i> the hooked control has handled that
  message.
----------------------------------------------------------------------------------------------------
@@TJvWindowHook
<TITLEIMG TJvWindowHook>
JVCLInfo
  GROUP=JVCL.System
  FLAG=Component
Summary
  Enables you to receive messages send to a certain control.
Description
  Use TJvWindowHook to receive and respond to messages send to a certain control.

  Set Control to specify the control to hook and set Active to True to place a hook on that control.
  \Write BeforeMessage and AfterMessage event handlers to respond to messages before or after they
  are handled by the hooked control. Note that if you do not write a BeforeMessage and AfterMessage
  handler that the control won't be hooked.

  TJvWindowHook places and removes a hook on a control by a call to RegisterWndProcHook and
  UnRegisterWndProcHook, resp. An internal list is maintained to prevent "broken links" when a hook
  is removed.
----------------------------------------------------------------------------------------------------
@@TJvWindowHook.Active
Summary
  Indicates whether or not the control is hooked.
Description
  Use Active to determine or set whether the control specified by Control is hooked. When Active is
  False, no AfterMessage and BeforeMessage events will be triggered. When Active is True, the control
  specified by Control is hooked; before the hooked control receives a message a BeforeMessage event with
  that message is fired; after the hooked control has handled that message an AfterMessage event will be
  fired.

  At design time, set Active to True to make the control hooked when the application starts
  running (the default value is False). At runtime, use the HookControl or UnhookControl method to
  hook the control or remove the hook.
See Also
  Control, HookControl, UnHookControl
----------------------------------------------------------------------------------------------------
@@TJvWindowHook.AfterMessage
<COMBINEWITH TJvHookMessageEvent>
Summary
  Occurs after the hooked control has handled a received message.
Description
  Use AfterMessage to respond to messages send to the hooked control. The AfterMessage event is fired
  <i>after</i> the hooked control has handled the message.

  Use parameter Handled to specify
  whether the message is handled; setting Handled to True will prevent other hooks to respond to this
  message.

  This event is only triggered when Active is set to True.
Parameters
  Sender  - The hook component that has send this message.
  Msg     - Represents the Windows message send to the hooked control.
  Handled - Set Handled to True to specify that the message is handled, and that no other hooks may
             respond to this message.
See Also
  Active, BeforeMessage, Control
----------------------------------------------------------------------------------------------------
@@TJvWindowHook.BeforeMessage
<COMBINEWITH TJvHookMessageEvent>
Summary
  Occurs before the hooked control handles a received message.
Description
  Use BeforeMessage to respond to messages send to the hooked control. The BeforeMessage event is
  fired <i>before</i> the hooked control has handled the message.

  Use parameter Handled to specify whether the hooked control may respond to this message. setting
  Handled to True will prevent the hooked control or other hooks placed on the control to respond
  to this message.

  This event is only triggered when Active is set to True.
Parameters
  Sender  - The hook component that has send this message.
  Msg     - Represents the Windows message send to the hooked control.
  Handled - Set Handled to True to specify that the message is handled, and that no other hooks, or
             the hooked control itself, may respond to this message.
See Also
  Active, AfterMessage, Control
----------------------------------------------------------------------------------------------------
@@TJvWindowHook.Control
Summary
  Specifies the control to hook.
Description
  Use property Control to specify which control must be hooked.
See Also
  Active
----------------------------------------------------------------------------------------------------
@@TJvWindowHook.HookControl
Summary
  Hooks the control.
Description
  Call HookControl to set the Active property for the hook component to True. When Active is True
  AfterMessage and BeforeMessage will be triggered when the hooked control receives a message.
See Also
  Active, Control
----------------------------------------------------------------------------------------------------
@@TJvWindowHook.UnHookControl
Summary
  Unhooks the control.
Description
  Call UnHookControl to set the Active property for the hook component to False. When Active is False,
  no AfterMessage and BeforeMessage will be triggered. If no other hook components have placed a hook
  on the control, then the control will be unhooked.
See Also
  Active, Control
----------------------------------------------------------------------------------------------------
@@UnRegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder
<TITLE UnRegisterWndProcHook function>
Summary
  Removes a registered hook.
Description
  Call UnRegisterWndProcHook to unhook a control. The hook must previously been registered by a
  call to RegisterWndProcHook.

  TJvWindowHook calls this method when it wants to stop hooking the control. An internal list is
  maintained to prevent "broken links" when a hook is removed.
Parameters
  AControl - Specifies the hooked control.
  AHandle  - Specifies the hooked handle.
  Hook     - Specifies the control hook procedure.
  Order    - Specifies the kind of hook. It should be the same value as used by the call to
              RegisterWndProcHook.
See Also
  TJvControlHook, TJvWindowHook, RegisterWndProcHook
----------------------------------------------------------------------------------------------------
@@UnRegisterWndProcHook@HWND@TJvControlHook@TJvHookOrder
<TITLE UnRegisterWndProcHook function>
<COMBINE UnRegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder>
----------------------------------------------------------------------------------------------------
@@ReleaseObj
<TITLE ReleaseObj procedure>
Summary
  Destroys the object and frees its associated memory.
Description
  Use ReleaseObj to destroy an object and free its associated memory.

  ReleaseObj does not destroy the object until all messages in the message queue are processed.
Note
  ReleaseObj returns immediately to the caller. It does not wait for the object to be freed before
  returning.
Parameters
  AObject - Object that should be destroyed.

@@JvDSADialogs.pas
<GROUP JVCL.FileRef>
Summary
  Provides code and a component to manage and create DSA (Don't Show Again) dialogs.
<INCLUDE JVCL.UnitText.dtx>
Author
  Marcel Bestebroer
----------------------------------------------------------------------------------------------------
@@TJvDSADialog
##JVCL:Component
<GROUP JVCL.Dialogs.Custom>
<TITLEIMG TJvDSADialog>
Summary
  Converts a form into a "Don't Show Again" dialog.
Description
  The TJvDSADialog component converts the form it's placed on into a DSA ("Don't Show Again")
  dialog. The component is basically a link between a VCL form and the included DSA backend.

  Converting a dialog into a DSA dialog involves the following tasks:

  * Create and design the form or use an existing form.
  * Drop a control on the form that has both a "Checked" as well as a "Caption" property. A
    TCheckBox will do fine. There is no need to provide a caption for the check box, as it will be
    set by the DSA backend when the dialog is shown.
  * Drop a TJvDSADialog component on the form. The component will be the link between the VCL form
    and the DSA backend. You need to set DialogID to a registered dialog (you can optionally
    register the dialog in the initialization section of this unit).
  * Use ShowModal to display the form or retrieve the last modal result if the form was previously
    suppressed.

  TJvDSADialog will hook the ShowModal virtual method of the form it is on. This allows the
  component to check the DSA state and either call the original ShowModal method or just return it's
  result. Note that because the ShowModal method of the form the component is on is being hooked, it
  doesn't matter if a custom form is used that happens to override the ShowModal method. This
  overriden method will be called if the dialog is to be displayed.
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.ApplySavedState
Summary
  Applies the saved state of the dialog.
Description
  ApplySavedState retrieves all info of the dialog from the DSA storage and applies it to the form.
  By default this will result in the saved ModalResult being applied to the form's ModalResult
  property. In addition, if an OnApplyKeys event is assigned, the event will be called with all
  neccessary information to retrieve custom stored data from the DSA storage.
See Also
  OnApplyKeys, UpdateDSAState
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.CheckControl
Summary
  Reference to the control to use as a DSA state setter.
Description
  CheckControl is a reference to the control to use as a DSA state toggler.

  The control has to have both a "Checked" as well as a "Caption" property. Usually you will use a
  TCheckBox control, but for TJvDSADialog it doesn't matter what kind of control is used (eg. it is
  possible to use a third party's check box equivalent control, even if it's not descending from
  TCustomCheckBox).
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.DialogID
Summary
  Indicates the dialog's ID in the DSA system.
Description
  DialogID indicates the dialog's ID to use with the DSA system. If the specified ID is not
  registered, an exception will be raised as soon as the form is used.
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.GetDSAStateInternal
Summary
  Retrieves the DSA state for the dialog.
Description
  GetDSAStateInternal retrieves the DSA state and ModalResult from the DSA storage.

  If the dialog is suppressed the method will return True and ModalResult will be set to the saved
  ModalResult code. If an event handler is assigned to OnApplyKey, it will be triggered as well.

  If the dialog is not suppressed the method will return False and ModalResult will be set to mrNone
  (0).
Parameters
  ModalResult - variable to retrieve the saved ModalResult value in.
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.GetModalResult
Summary
  Retrieves the ModalResult from the owner form.
Description
  GetModalResult retrieves the ModelResult from the Owner. Since TJvDSADialog can only be placed on
  a TCustomForm descendant, a simple typecast is used to cast the owner to a TCustomForm and
  retrieve the ModalResult value.
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.GetOrgOwner
Summary
  Retrieves the owner of the component.
Description
  GetOrgOwner retrieves the reference to owner (form) of the component. Because the Owner property
  is set to nil before Destroy is called, the unpatching mechanism can not use Owner. To circumvent
  this, the patch method will store a reference to the form which the unpatch method can use.
See Also
  FormPatch, FormUnPatch
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.GetOrgShowModalPtr
Summary
  Retrieves the original ShowModal code pointer.
Description
  GetOrgShowModalPtr retrieves the original ShowModal code pointer as stored by the FormPatch
  method. The pointer is used in two situations:

  1 The dialog was not suppressed and needs to be displayed.
  2 The dialog is being disposed and needs to be unpatched.
See Also
  FormPatch, FormUnPatch
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.GetStorage
Summary
  Retrieves a reference to storage device for this dialog.
Description
  GetStorage will retrieve the reference to the storage device assigned to the dialog. It is the
  read method for the Storage property.

  It's used internally to retrieve and store the DSA state and dialog result.
See Also
  Storage
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.FormPatch
Summary
  Pathes the form for DSA usage.
Description
  FormPatch will patch the form so that it can be used as a DSA dialog. The patch involves the
  following:

  1 Retrieve the VMT index for ShowModal
  2 Store the original pointer for ShowModal using SetOrgShowModalPtr.
  3 Set the pointer for ShowModal to a new ShowModal method declared in an internal form class.
See Also
  FormUnPatch
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.FormUnPatch
Summary
  Unpathes the form for DSA usage.
Description
  FormUnPatch will unpatch the form so that it can no longer be used as a DSA dialog. Unpatch
  involves the following:

  1 Retrieve the VMT index for ShowModal
  2 Set the pointer for ShowModal to the original pointer, retrieved using GetOrgShowModalPtr.
See Also
  FormPatch
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.IsDSAChecked
Summary
  Checks if the DSA state has been set to "suppress".
Description
  IsDSAChecked checks if the DSA state has been set to suppressed state. The base implementation
  does this by checking the CheckControl's Checked property, but descendant can override this to do
  additional checking.
See Also
  CheckControl
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.OnApplyKeys
<COMBINEWITH TJvDSADataEvent>
Summary
  Occurs when the DSA state is read in from the DSA storage.
Description
  Write an OnApplyKeys event handler to retrieve additional (custom) data from the DSA storage 
  related to this dialog. This event (together with OnUpdateKeys) allows you to store and retrieve
  additional information (e.g. the ItemIndex of a combo box) along with the DSA state and modal
  result for the dialog.
Parameters
  Sender  - reference to the TJvDSADialog component.
  DSAInfo - reference to the DSA registration item for the dialog.
  Storage - reference to the storage where the dialog info is stored.
See Also
  OnUpdateKeys
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.OnUpdateKeys
<COMBINEWITH TJvDSADataEvent>
Summary
  Occurs when the DSA state is written to the DSA storage.
Description
  Write an OnUpdateKeys event handler to store additional (custom) data from the DSA storage 
  related to this dialog. This event (together with OnApplyKeys) allows you to store and retrieve
  additional information (e.g. the ItemIndex of a combo box) along with the DSA state and modal
  result for the dialog.
Parameters
  Sender  - reference to the TJvDSADialog component.
  DSAInfo - reference to the DSA registration item for the dialog.
  Storage - reference to the storage where the dialog info is stored.
See Also
  OnApplyKeys
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.OrgOwner
Summary
  References the owner of the component.
Description
  OrgOwner is the reference to the owner (form) of the component. Because the Owner property is set
  to nil before Destroy is called, the unpatching mechanism can not use Owner. To circumvent this,
  the patch method will store a reference to the form which the unpatch method can use.
See Also
  FormPatch, FormUnPatch
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.OrgShowModalPtr
Summary
  Holds the original ShowModal code pointer.
Description
  OrgShowModalPtr holds the original ShowModal code pointer as stored by the FormPatch method. The
  pointer is used in two situations:

  1 The dialog was not suppressed and needs to be displayed.
  2 The dialog is being disposed and needs to be unpatched.
See Also
  FormPatch, FormUnPatch
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.Storage
Summary
  Reference to storage device for this dialog.
Description
  Storage holds the reference to the storage device assigned to the dialog.

  It's used internally to retrieve and store the DSA state and dialog result.
----------------------------------------------------------------------------------------------------
@@TJvDSADialog.UpdateDSAState
Summary
  Stores the DSA state in the DSA storage.
Description
  UpdateDSAState will store the DSA state and ModalResult value in the DSA storage. In addition, if
  an event handler is assigned to OnUpdateKeys it will be triggered to allow storing custom data in
  the DSA storage.
See Also
  ApplySavedState, OnUpdateKeys
----------------------------------------------------------------------------------------------------
@@EJvDSADialog
Summary
  Exception class for TJvDSADialog errors.
Description
  EJvDSADialog is the exception class used for errors using the TJvDSADialog the TJvDSADialog
  component.
----------------------------------------------------------------------------------------------------
## Other source items
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
## Types
----------------------------------------------------------------------------------------------------
@@TDlgCenterKind
Summary
  Type to indicate the way a dialog should be centered.
Description
  The TDlgCenterKind is used to indicate the way a dialog should be centered. It's used for the
  Center parameter in the various \ShowMessage and \MessageDlg routines.
@@TDlgCenterKind.dckScreen
  Center the dialog on the screen.
@@TDlgCenterKind.dckMainForm
  Center the dialog on the main form.
@@TDlgCenterKind.dckActiveForm
  Center the dialog on the active form.
----------------------------------------------------------------------------------------------------
## ShowMessage, ShowMessageFmt, MessageDlg and MessageDlgEx
----------------------------------------------------------------------------------------------------
@@ShowMessage
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Display a message box.
Description
  \ShowMessage is a replacement for Delphi's ShowMessage. It allows you to optionally specify how
  the dialog is centered.
Parameters
  Msg -     Contains the message to display.
  Center -  Indicates how the dialog is to be centered. The default is to center on the screen, but
            you can specify to center on the main form or the active form.
See Also
  DSAShowMessage, ShowMessageFmt
----------------------------------------------------------------------------------------------------
@@ShowMessageFmt
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Display a message box.
Description
  \ShowMessageFmt is a replacement for Delphi's ShowMessageFmt. It allows you to optionally specify
  how the dialog is centered.
Parameters
  Msg -     Contains the message to display.
  Params -  Parameters to use for formatting.
  Center -  Indicates how the dialog is to be centered. The default is to center on the screen, but
            you can specify to center on the main form or the active form.
See Also
  DSAShowMessageFmt, ShowMessage
----------------------------------------------------------------------------------------------------
@@MessageDlg
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  \MessageDlg replacement with additional settings.
Description
  \MessageDlg is a replacement for the MessageDlg function in Delphi's Dialog unit. It gives you more
  control over the appearance of the dialog.

  In it's simplest form, it does exactly the same as the MessageDlg function in Delphi's Dialogs
  unit, but has three optional parameters that allow you to choose different default, cancel and/or
  help buttons.

  The second form allows you to provide a different caption of the dialog, but otherwise does the
  same as the first form.

  The third form allows you to provide both a different caption as well as a different image.

  If you need more control over button captions and results, use MessageDlgEx instead.
Parameters
  Msg -           Contains the message to display.
  DlgType -       The dialog type.
  Buttons -       A list of buttons to display.
  HelpCtx -       Help context to use when the help button is clicked or F1 is pressed.
  Center -        Indicates how the dialog is to be centered. The default is to center on the
                  screen, but you can specify to center on the main form or the active form.
  DefaultButton - The button to mark as default. If you do not provide a default button, the
                  MessageDlg mechanism is used to determine the default button.
  CancelButton -  The button to mark as cancel. If you do not provide a cancel button, the
                  MessageDlg mechanism is used to determine the cancel button.
  HelpButton -    The button to mark as help. If you do not provide a help button, the button mbHelp
                  will be used. If such a button does not exist, no button will be marked as help.
  Caption -       The caption of the dialog.
  Picture -       A TGraphic descendant of the image to show or <B>nil</B> if no image should be
                  shown.
Result
  Returns the modal result of the displayed dialog.
Note
  If the user presses Ctrl-C in the dialog, the contents of the dialog is copied to the clipboard.
See Also
  DSAMessageDlg, MessageDlgEx
----------------------------------------------------------------------------------------------------
@@MessageDlgEx
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  \MessageDlg extension with additional settings.
Description
  MessageDlgEx is an extension of Delphi's \MessageDlg function and an extension of JvDSADialog's
  MessageDlg that gives you more control over the appearance of the dialog.

  MessageDlgEx allows to specify custom button captions and result codes for the dialog. Just as 
  JvDSADialog's MessageDlg, MessageDlgEx has three forms that allow you to customize it's
  appearance.
Parameters
  Msg -           Contains the message to display.
  DlgType -       The dialog type.
  Buttons -       List of button captions.
  Results -       List of result codes.
  HelpCtx -       Help context to use when the help button is clicked or F1 is pressed.
  Center -        Indicates how the dialog is to be centered. The default is to center on the
                  screen, but you can specify to center on the main form or the active form.
  DefaultButton - The button to mark as default. If you do not provide a default button, the first
                  button is marked as default. If you do not want a default button, set this
                  parameter to -1. This parameter is an index into the Buttons/Results array.
  CancelButton -  The button to mark as cancel. If you do not provide a cancel button, the second
                  button is marked as cancel. If you do not want a cancel button, set this parameter
                  to -1. This parameter is an index into the Buttons/Results array.
  HelpButton -    The button to mark as help. If you do not provide a help button, no button will be
                  marked as help. This parameter is an index into the Buttons/Results array.
  Caption -       The caption of the dialog.
  Picture -       A TGraphic descendant of the image to show or <B>nil</B> if no image
                  should be shown.
Result
  Returns the modal result of the displayed dialog.
Note
  If the user presses Ctrl-C in the dialog, the contents of the dialog is copied
  to the clipboard.
See Also
  DSAMessageDlgEx, MessageDlg
----------------------------------------------------------------------------------------------------
## DSAShowMessage, DSAShowMessageFmt, DSAMessageDlg and DSAMessageDlgEx
----------------------------------------------------------------------------------------------------
@@DSAShowMessage
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Display a message box.
Description
  DSAShowMessage is a replacement for Delphi's \ShowMessage. It allows you to optionally specify how
  the dialog is centered. The user can optionally disable the dialog in the future.
Parameters
  DlgID -   ID of the dialog in the DSA system.
  Msg -     Contains the message to display.
  Center -  Indicates how the dialog is to be centered. The default is to center on the screen, but
            you can specify to center on the main form or the active form.
See Also
  ShowMessage, DSAShowMessageFmt
----------------------------------------------------------------------------------------------------
@@DSAShowMessageFmt
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Display a message box.
Description
  DSAShowMessageFmt is a replacement for Delphi's \ShowMessageFmt. It allows you to optionally 
  specify how the dialog is centered. The user can optionally disable the dialog in the future.
Parameters
  DlgID -   ID of the dialog in the DSA system.
  Msg -     Contains the message to display.
  Params -  Parameters to use for formatting.
  Center -  Indicates how the dialog is to be centered. The default is to center on the screen, but
            you can specify to center on the main form or the active form.
See Also
  ShowMessageFmt, DSAShowMessage
----------------------------------------------------------------------------------------------------
@@DSAMessageDlg
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  \MessageDlg replacement with additional settings and "Don't show again" capabilities.
Description
  DSAMessageDlg is a replacement for Delphi's \MessageDlg function and an extension to MessageDlg
  that allow the user to optionally disable the dialog in the future.

  In it's simplest form, it does exactly the same as the \MessageDlg function in Delphi's Dialogs
  unit, but has an dialog ID parameter and three optional parameters that allow you to choose
  different default, cancel and/or help buttons.

  The second form allows you to provide a different caption of the dialog, but otherwise does the
  same as the first form.

  The third form allows you to provide both a different caption as well as a different image.

  If you need more control over button captions and results, use DSAMessageDlgEx instead.
Parameters
  DlgID -         ID of the dialog in the DSA system.
  Msg -           Contains the message to display.
  DlgType -       The dialog type.
  Buttons -       A list of buttons to display.
  HelpCtx -       Help context to use when the help button is clicked or F1 is pressed.
  Center -        Indicates how the dialog is to be centered. The default is to center on the
                  screen, but you can specify to center on the main form or the active form.
  DefaultButton - The button to mark as default. If you do not provide a default button, the
                  \MessageDlg mechanism is used to determine the default button.
  CancelButton -  The button to mark as cancel. If you do not provide a cancel button, the
                  \MessageDlg mechanism is used to determine the cancel button.
  HelpButton -    The button to mark as help. If you do not provide a help button, the button mbHelp
                  will be used. If such a button does not exist, no button will be marked as help.
  Caption -       The caption of the dialog.
  Picture -       A TGraphic descendant of the image to show or <B>nil</B> if no image should be
                  shown.
Result
  Returns the modal result of the displayed dialog or the last result if the dialog was suppressed.
Note
  If the user presses Ctrl-C in the dialog, the contents of the dialog is copied to the clipboard.
See Also
  DSAMessageDlgEx, MessageDlg
----------------------------------------------------------------------------------------------------
@@DSAMessageDlgEx
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  \MessageDlg replacement with additional settings and "Don't show again" capabilities.
Description
  DSAMessageDlgEx is an extension to MessageDlgEx that allow the user to optionally disable the
  dialog in the future.
Parameters
  DlgID -         ID of the dialog in the DSA system.
  Msg -           Contains the message to display.
  DlgType -       The dialog type.
  Buttons -       List of button captions.
  Results -       List of result codes.
  HelpCtx -       Help context to use when the help button is clicked or F1 is pressed.
  Center -        Indicates how the dialog is to be centered. The default is to center on the
                  screen, but you can specify to center on the main form or the active form.
  DefaultButton - The button to mark as default. If you do not provide a default button, the first
                  button is marked as default. If you do not want a default button, set this
                  parameter to -1. This parameter is an index into the Buttons/Results array.
  CancelButton -  The button to mark as cancel. If you do not provide a cancel button, the second
                  button is marked as cancel. If you do not want a cancel button, set this parameter
                  to -1. This parameter is an index into the Buttons/Results array.
  HelpButton -    The button to mark as help. If you do not provide a help button, no button will be
                  marked as help. This parameter is an index into the Buttons/Results array.
  Caption -       The caption of the dialog.
  Picture -       A TGraphic descendant of the image to show or <B>nil</B> if no image should be
                  shown.
Result
  Returns the modal result of the displayed dialog or the last result if the dialog was suppressed.
Note
  If the user presses Ctrl-C in the dialog, the contents of the dialog is copied to the clipboard.
See Also
  DSAMessageDlg, MessageDlgEx
----------------------------------------------------------------------------------------------------
@@TDSARegItem
Summary
  Type used to hold DSA registration information.
Description
  TDSARegItem is a record to hold information about a registered DSA dialog. This type is used
  internally by the registration database and passed on to the storage device when retrieving state
  and values.
  
  It is also used by the events that allow you to store or retrieve custom data associated with a
  dialog.
@@TDSARegItem.ID
  The dialog ID number.
@@TDSARegItem.Name
  The identifying name of the dialog.
@@TDSARegItem.Description
  The description of the dialog, useful for dialogs for restoring DSA states.
@@TDSARegItem.Storage
  The storage device that holds the DSA state and values.
@@TDSARegItem.ChkTextKind
  The ID of the check mark text to use.
----------------------------------------------------------------------------------------------------
## DSA Storage: Base class
----------------------------------------------------------------------------------------------------
@@TDSAStorage
Summary
  Abstract storage device for DSA state and values.
Description
  TDSAStorage is the abstract base class used for storing DSA states and dialog values in. Do not
  create an instance of this class directly but rather use one of it's descendants.

  When deriving a new class from TDSAStorage, always override all methods.
----------------------------------------------------------------------------------------------------
@@TDSAStorage.CheckMarkTextSuffix
Summary
  Suffix of the check mark caption.
Description
  CheckMarkTextSuffix holds the string to append to the check mark text. Usually this will be an
  empty string, but can be used to append texts such as "in the current queue", which would result
  in "Don't show this dialog again in the current queue." or "Don't ask again in the current
  queue.", depending on the dialogs ChkMarkTextKind settings.

  You should not append a period (.) at the end of this string; this will be done automatically.

  The base class declares this property read-only as this is the most common situation. Descendants
  might set the write specifier to SetCheckMarkCaption to allow changing the check mark text suffix.
See Also
  GetCheckMarkTextSuffix, SetCheckMarkTextSuffix
----------------------------------------------------------------------------------------------------
@@TDSAStorage.GetCheckMarkTextSuffix
Summary
  Retrieve the string to append to the check mark text.
Description
  GetCheckMarkTextSuffix returns the string to append to the check mark text. Usually this will be
  an empty string, but can be used to append texts such as "in the current queue", which would
  result in "Don't show this dialog again in the current queue." or "Don't ask again in the current
  queue.", depending on the dialogs ChkMarkTextKind settings.

  Since the method is declared abstract, descendants must override it.
See Also
  CheckMarkTextSuffix, SetCheckMarkTextSuffix
----------------------------------------------------------------------------------------------------
@@TDSAStorage.GetState
Summary
  Retrieve the current state and result code of the DSA dialog.
Description
  GetState will retrieve the state and result code of the specified DSA dialog from the storage
  device.

  If the dialog was marked to be suppressed, the function will return True and LastResult will hold
  the ModalResult of the dialog when it was last closed.

  If the dialog was not marked to be suppressed, the function will return False and LastResult will
  be set to 0.
Parameters
  DSAInfo -       Registration info of the DSA dialog in question.
  LastResult -    On exit will hold the result code of the dialog when the DSA state was set.
  OnCustomData -  Provide an OnCustomData handler if additional info should be retrieved from the
                  storage. Leave this parameter <B>nil</B> if no additional data is to be retrieved.
See Also
  SetState
----------------------------------------------------------------------------------------------------
@@TDSAStorage.SetCheckMarkTextSuffix
Summary
  Set the string to append to the check mark text.
Description
  SetCheckMarkTextSuffix allows to set the check mark text suffix. Usually this is not wanted and
  most descendant will override this with an empty method or not at all.

  Since the method is declared abstract, descendants must override it if changes in the CheckMark
  text suffix are wanted.
Parameters
  Value - String to set the suffix to. Do not append a period (.) to this string, as this will be
          done when the full check mark text is determined.
See Also
  CheckMarkTextSuffix, GetCheckMarkTextSuffix
----------------------------------------------------------------------------------------------------
@@TDSAStorage.SetState
Summary
  Sets the current state and result code of the DSA dialog.
Description
  SetState will set the state and result code of the specified DSA dialog in the storage device.
Parameters
  DSAInfo -       Registration info of the DSA dialog in question.
  DontShowAgain - Flag to indicate if teh dialog should be suppressed. Some storage devices may
                  elect to remove the reference of this dialog when this parameter is set to False,
                  others may leave the reference and just update the DSA state.
  LastResult -    The result code of the dialog when to store along with the DSA state. By
                  convention, this parameter should be set to 0 if DontShowAgain is False.
                  Depending on the storage device, this might be enforced.
  OnCustomData -  Provide an OnCustomData handler if additional info should be stored in the
                  storage. Leave this parameter <B>nil</B> if no additional data is to be retrieved.
See Also
  GetState
----------------------------------------------------------------------------------------------------
## DSA Storage: registry
----------------------------------------------------------------------------------------------------
@@TDSARegStorage
Summary
  Registry storage device for DSA state and values.
Description
  TDSARegStorage is the class used for storing DSA states and dialog values in the registry.
  JvDSADialogs creates an instance of this class, retrievable through DSARegStore.

  TDSARegStorage uses <LINK $RegistryandInifiles.Registry, JclRegistry> to communicate with the
  windows registry.

  If the DSA state is reset to show the dialog again, the key for the dialog are removed.

  The dialog's internal name (as specified by the Name parameter for RegisterDSA) is used as a sub
  key for the key specified by the Key property.
----------------------------------------------------------------------------------------------------
@@TDSARegStorage.Create
Summary
  Instantiate and initialize a registry storage device.
Description
  Create instantiates and initializes a registry storage device. The two parameters will be used to
  initialize the RootKey and Key properties.
Parameters
  ARootKey - The HKEY value to initialize the RootKey property to.
  AKey - The value to initialize the Key property to.
----------------------------------------------------------------------------------------------------
@@TDSARegStorage.Key
Summary
  Key path where the info should be stored.
Description
  Key holds the path from RootKey where the DSA info is to be stored. For each dialog a sub key with
  the name of the dialog will be generated, holding at least two values, DSA_State and LastResult.
See Also
  RootKey
----------------------------------------------------------------------------------------------------
@@TDSARegStorage.RootKey
Summary
  Root key for the registry storage.
Description
  RootKey holds the HKEY value of the key the DSA info is to be stored.
See Also
  Key
----------------------------------------------------------------------------------------------------
@@DSARegStore
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Retrieves a reference to the default registry storage.
Description
  DSARegStore retrieves a reference to internally create registry storage. The storage is
  initialized to use <B>HKCU\\Software\\<I>Application.Title</I>\\DSA</B> as it's storage.
See Also
  TDSARegStorage
----------------------------------------------------------------------------------------------------
## DSA registration
----------------------------------------------------------------------------------------------------
@@LocateDSAReg
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Locates and returns the DSA registration info for a given dialog.
Description
  LocateDSAReg will search the DSA registration database for the given dialog and return it's
  registration info record. If the specified dialog is not registered, EmptyItem will be returned.
See Also
  RegisterDSA, UnregisterDSA
----------------------------------------------------------------------------------------------------
@@RegisterDSA
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Register a DSA dialog.
Description
  RegisterDSA registers a new DSA dialog with the system. The given ID and Name may not already
  exist within the registration, but may exist in the storage device.

  If the given ID and Name match an existing dialog, the procedure will do nothing. If either the ID
  or Name are registered, an exception will be raised.
Parameters
  DlgID -         ID of the dialog in the DSA system.
  Name -          Reference name of the dialog. Might be used by the storage device as an
                  identification.
  Description -   Description of the dialog. Could be used by a UI for DSA managment (re-enabling
                  disabled dialogs).
  Storage -       Reference to the storage device that will maintain the DSA state.
  CheckTextKind - The kind of text to display next to the check box. See RegisterDSACheckMarkText
                  and UnregisterDSACheckMarkText for more information.
See Also
  UnregisterDSA
----------------------------------------------------------------------------------------------------
@@UnregisterDSA
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Remove a DSA dialog from the system.
Description
  UnregisterDSA removes a DSA dialog from the system.  If the specified dialog ID is not registered,
  the procedure does nothing.

  Removing the DSA dialog does not remove it from the storage device, but the specified ID can not
  be used to invoke an DSA dialog and will result in an exception.
Parameters
  DlgID - ID of the dialog in the DSA system.
See Also
  RegisterDSA
----------------------------------------------------------------------------------------------------
@@DSACount
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Returns the number of  DSA dialogs registered.
Description
  DSACount returns the number of DSA dialogs registered with the system.
See Also
  DSAItem, RegisterDSA, UnregisterDSA
----------------------------------------------------------------------------------------------------
@@DSAItem
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Retrieves a DSA registration item.
Description
  DSAItem retrieves the registration item at the <B>Index</B>th position in the registration
  database. The index is 0-based and runs from 0 .. DSACount-1.
Parameters
  Index - The item index to retrieve. Valid values lie in the range 0 .. DSACount-1.
See Also
  DSACount, RegisterDSA, UnregisterDSA
----------------------------------------------------------------------------------------------------
## DSA state setting/retrieving
----------------------------------------------------------------------------------------------------
@@GetDSAState
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Retrieves DSA state.
Description
  GetDSAState retrieves the state of the specified DSA dialog, optionally returning the last
  ModalResult of the dialog.
Parameters
  DlgID -         ID of the dialog in the DSA system.
  ResCode -       If this parameter is specified, it will receive the stored ModalResult value if
                  the dialog is suppressed. Otherwise this parameter will be set to 0. 
  OnCustomData -  Provide an OnCustomData handler if additional info should be retrieved from the
                  storage. Leave this parameter <B>nil</B> if no additional data is to be retrieved.
See Also
  SetDSAState
----------------------------------------------------------------------------------------------------
@@SetDSAState
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Sets DSA state.
Description
  SetDSAState sets the state of the specified DSA dialog.
Parameters
  DlgID -         ID of the dialog in the DSA system.
  DontShowAgain - Flag indicating if the dialog should be enabled or disabled. When set to True, the
                  dialog will be disabled.
  LastResult -    The ModalResult value to store. By default this is set to mrNone.
  OnCustomData -  Provide an OnCustomData handler if additional info should be stored in the
                  storage. Leave this parameter <B>nil</B> if no additional data is to be stored.
See Also
  GetDSAState
----------------------------------------------------------------------------------------------------
@@TDSACheckTextKind
Summary
  ID of check mark text.
Description
  TDSACheckTextKind is the type used to identify the type of check mark text to use. JvDSADialogs
  declares the following types:

  <TABLE>
  Value           Text
  -----           ----
  ctkShow         Don't show this dialog again
  ctkAsk          Don't ask me again
  ctkWarn         Don't warn me again
  </TABLE
See Also
  RegisterDSACheckMarkText, UnregisterDSACheckMarkText
@@ctkShow
  <ALIAS TDSACheckTextKind>
@@ctkAsk
  <ALIAS TDSACheckTextKind>
@@ctkWarn
  <ALIAS TDSACheckTextKind>
----------------------------------------------------------------------------------------------------
@@GetDSACheckMarkText
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Retrieves the check mark text for the given ID.
Description
  GetDSACheckMarkText will locate and return the check mark text for the given ID. If the specified
  ID is not registered, an empty string will be returned.
See Also
  RegisterDSACheckMarkText, UnregisterDSACheckMarkText
----------------------------------------------------------------------------------------------------
@@RegisterDSACheckMarkText
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Register a check mark text.
Description
  RegisterDSACheckMarkText allows you to register additional check mark texts. When registering a
  DSA dialog you can optionally define the check mark text to use for the dialog.
See Also
  TDSACheckTextKind, UnregisterDSACheckMarkText
----------------------------------------------------------------------------------------------------
@@UnregisterDSACheckMarkText
##JVCL:Routine,NotInParentList
<GROUP JVCL.Dialogs.Custom>
Summary
  Unregister a check mark text.
Description
  UnregisterDSACheckMarkText allows you to remove a check mark text. The registered dialogs are not
  checked and if a dialog was assigned to this check mark text, it will default to ctkShow.
See Also
  RegisterDSACheckMarkText, TDSACheckTextKind
----------------------------------------------------------------------------------------------------
@@mbNone
Summary
  Used to identify no button.
Description
  mbNone is used to indentify that no button is to be used as a default, cancel or help button. It's
  primary use is for the DefaultButton, CancelButton and HelpButton parameters for the various
  \MessageDlg routines.
See Also
  mbDefault
----------------------------------------------------------------------------------------------------
@@mbDefault
Summary
  Used to identify default button mapping.
Description
  mbDefault is used to indentify that the default button mapping is to be used to determine the
  default and/or cancel button. It's primary use is for the DefaultButton and CancelButton
  parameters for the various \MessageDlg routines.
See Also
  mbNone
----------------------------------------------------------------------------------------------------

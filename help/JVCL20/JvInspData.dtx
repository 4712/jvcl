--------------------------------------------------------------------------------
## Data layers: Types, Class references
--------------------------------------------------------------------------------
@@TJvInspectorDataClass
<GROUP TJvInspector.Base>
Summary
  Class reference for data layers.
Description
  TJvInspectorDataClass is the class reference for data layer classes.
--------------------------------------------------------------------------------
## Data layers: Base data layer
--------------------------------------------------------------------------------
@@TJvCustomInspectorData
<GROUP TJvInspector.Data>
Summary
  Base inspector data class.
Description
  TJvCustomInspectorData is the abstract base data class. It's
  the interface between the inspector and the data it inspects.
  The base class provides properties and method to access the
  data in various forms (much like a TField).

  In addition, each data class can have it's own item
  registration database. This will provide a way to register
  different types based on the metadata the data instance can
  provide.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.CheckReadAccess
Summary
  Checks if the data can be read.
Description
  CheckReadAccess checks if the data can be read. If the data can't be read, an
  exception will be generated.

  CheckReadAccess will check if IsInitialized, IsAssigned and HasValue (in that
  order) return True. If any check fails, an exception will be generated,
  stating the reason why the data can't be read.

  CheckReadAccess should be called from all GetAs<I>xxxxxx</I> methods before
  any data is read. Descendants can optionally provide additional checks by
  overriding this method.
See Also
  CheckWriteAccess, IsInitialized, IsAssigned, HasValue
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.CheckWriteAccess
Summary
  Checks if the data can be written.
Description
  CheckWriteAccess checks if the data can be written. If the data can't be
  written, an exception will be generated.

  CheckWriteAccess will check if IsInitialized and HasValue (in that order)
  return True. If any check fails, an exception will be generated, stating the
  reason why the data can't be written.

  CheckWriteAccess should be called from all SetAs<I>xxxxxx</I> methods before
  any data is written. Descendants can optionally provide additional checks by
  overriding this method.
See Also
  CheckReadAccess, IsInitialized, HasValue
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsFloat
Summary
  Access the value as a float.
Description
  AsFloat tries to access the data as an extended value. If the data can not be
  accessed as a float (because the TypeInfo property does not point to the RTTI
  of a floating point type) an exception will occur. Before the data is read
  CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsInt64
Summary
  Access the value as a 64-bit integer.
Description
  AsInt64 tries to access the data as an Int64 value. If the data can not be
  accessed as an Int64 (because the TypeInfo property does not point to the RTTI
  of an Int64 type) an exception will occur. Before the data is read
  CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsOrdinal
Summary
  Access the value as an ordinal.
Description
  AsOrdinal tries to access the data as an ordinal value. If the data can not be
  accessed as an ordinal (because the TypeInfo property does not point to the
  RTTI of an ordinal type) an exception will occur. Before the data is read
  CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsString
Summary
  Access the value as a string.
Description
  AsString tries to access the data as a string value. If the data can not be
  accessed as a string (because the TypeInfo property does not point to the RTTI
  of a string type) an exception will occur. Before the data is read
  CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.Inspector
Summary
  References the inspector.
Description
  Inspector references the inspector the data object is
  assigned to. Inspector is set automatically depending on the
  value of Item.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.Item
Summary
  Reference to the item
Description
  Item references the inspector item this data object is
  assigned to. Item is set on initialization of the data
  instance.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.Name
Summary
  The name of the data object
Description
  Name holds the name of the data object. Depending on the
  actual class implementation, it's value is preset to the data
  it holds. The value of Name is used to display the item's
  name. Read Name to determine it's current value or set Name
  to a new name.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.TypeInfo
Summary
  Points to the RTTI for this data object.
Description
  TypeInfo points to the RTTI for this data object. Depending
  on the implementation class, TypeInfo is preset to a default
  value for the data it represents. Read TypeInfo to determine
  the current RTTI pointer or set TypeInfo to another RTTI
  pointer.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given
  parameters. Some classes will provide multiple Create
  constructors and/or class procedures to aid in proper
  initialization for the data it is to be representing. Some of
  the Create procedures might create a group of data instances.
Parameters
  AName -       Default name for the data object
  ATypeInfo -   Default RTTI pointer for the data object
  AParent -     The parent to which this data should be added.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.CreateChild
Summary
  Creates the child item for this object.
Description
  CreateChild is called after the data instance has been
  created. CreateChild will then create a proper child item,
  depending on the item registration databases and/or the
  BeforeCreateItem event. If the Item property is nil when this
  method returns, the data instance should be discarded.
Parameters
  AParent -   The parent to which the new item should be added.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.GetAsSet
Summary
  Retrieve the data as a set value.
Description
  GetAsSet will try to retrieve the underlaying data as a set value. If the data
  can not be accessed as a set, an exception will be raised. Before the data is
  read CheckReadAccess is called to check read access.
Parameters
  Buf -   A set variable to retrieve the value in
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.SetAsSet
Summary
  Set the data as a set value.
Description
  SetAsSet will try to change the underlaying data as a set value. If the data
  can not be accessed as a set, an exception will be raised. Before the data is
  set CheckWriteAccess is called to check write access.
Parameters
  Buf -   The value to set the data to.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.DoAfterDataCreate
Summary
  Calls the inspectors' AfterDataCreate event
Description
  DoAfterDataCreate will call the AfterDataCreate event of the inspector if it's
  assigned. DoAfterDataCreate is called by CreateChild.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.DoBeforeItemCreate
Summary
  Calls the inspectors' BeforeItemCreate event.
Description
  DoBeforeItemCreate calls the BeforeItemCreate event of the inspector if it's
  assigned. DoBeforeItemCreate is called by CreateChild after it has searched
  the item registration databases but before it creates the actual item.
Parameters
  ItemClass -   Holds the inspector item class to be instantiated.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsMethod
Summary
  Access the value as a TMethod integer.
Description
  AsMethod tries to access the data as a TMethod value. If the data can not be
  accessed as a TMethod (because the TypeInfo property does not point to the
  RTTI of a TMethod type) an exception will occur. Before the data is read
  CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.Init
Summary
  Initializes the Name and TypeInfo properties.
Description
  Init initializes the Name and TypeInfo properties. Init is usually called from
  one of the Create methods.
Parameters
  AName -       The name for the data instance
  ATypeInfo -   The RTTI pointer for the data instance
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.Invalidate
Summary
  Invalidates the data value.
Description
  Invalidate tells the item that the data value it last displayed/edited has
  been changed. Call Invalidate whenever the data is changed (this is done
  automatically when the data is changed through one of it's access properties
  but you might need to call it when the data has changed through other means).
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.HasValue
Summary
  Determines if the data object actually represents a value.
Description
  HasValue determines if the data object reperesents a value. This is dependant
  on the data the object is representing and therefor changes for each data
  class. If the data object represents a value, HasValue returns True, otherwise
  False is returned. If HasValue is False, data can not be read or written and
  the inspector will show <B>(no value)</B>.
See Also
  IsAssigned, IsInitialized
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.IsAssigned
Summary
  Determines if the data object has been assigned a value.
Description
  IsAssigned determines if the data object has a value assigned to it. This is
  dependant on the data the object is representing and therefor changes for each
  data class. If a value is assigned, IsAssigned returns True, otherwise False
  is returned. If IsAssigned is False, data can not be read and the inspector
  will show <B>(unassigned)</B>.
See Also
  HasValue, IsInitialized
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.IsInitialized
Summary
  Determines if the data object is properly initialized.
Description
  IsInitialized determines if the data object has been properly initialized.
  This is dependant on the data the object is representing and therefor changes
  for each data class. If the data is properly initialized, IsIntialized returns
  True, otherwise False is returned. If IsInitialized is False, the data object
  can not be used and the inspector will show <B>(uninitialized)</B>
See Also
  HasValue, IsAssigned
--------------------------------------------------------------------------------
@@TJvCustomInspectorData.ItemRegister
Summary
  ItemRegister returns the item registration database.
Description
  ItemRegister returns the item registration database. Each data class can have
  it's own database but is not required to. The function will return the first
  registration database it finds within the data class hierarchie.

  The root database is located in TJvCustomInspectorData and usually contains
  items to map specific RTTI pointers or type kinds to an inspector item.

  When an item class needs to be determined all item registration databases will
  be searched until a perfect match is found or until the root database has been
  searched. Whichever item has scored highest, automatically wins and will
  determine the actual item class.
--------------------------------------------------------------------------------
## Data layers: Set member data layer
--------------------------------------------------------------------------------
@@TJvInspectorSetMemberData
<GROUP TJvInspector.Data>
Summary
  Data layer for specific set item.
Description
  TJvInspectorSetMemberData is the data layer that obtains it's data from a
  single bit of the set value of it's parent item. It's used internally by the
  set item (TJvInspectorSetItem) when the CreateMemberItems property is True.

  Only the AsOrdinal access property is implemented, while the TypeInfo property
  is ignored but initialized to TypeInfo(Boolean).
--------------------------------------------------------------------------------
@@TJvInspectorSetMemberData.BitOffset
Summary
  Bit offset in the set for this member.
Description
  BitOffset holds the bit offset within the set value for this particular
  member. This value is calculcated upon creation of the member data layer.
--------------------------------------------------------------------------------
@@TJvInspectorSetMemberData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given parameters. Some
  classes will provide multiple Create constructors and/or class procedures to
  aid in proper initialization for the data it is to be representing. Some of
  the Create procedures might create a group of data instances.
Parameters
  Ordinal -     The ordinal value of the member that is to be inspected.
  AParent -     The parent to which this data should be added.
--------------------------------------------------------------------------------
## Data layers: Variable/heap data layer
--------------------------------------------------------------------------------
@@TJvInspectorVarData
<GROUP TJvInspector.Data>
Summary
  Variable data layer.
Description
  TJvInspectorVarData is the inspector data layer that obtains it's data from
  a simple variable or some value on the heap. The class implements all access
  properties, but the type info will be used to check the legality of the access
  (ie. a float can't be accessed as Int64).

  The data layer provides it's own item registration database.
--------------------------------------------------------------------------------
@@TJvInspectorVarData.Address
Summary
  Holds the address of the data.
Description
  Address holds the address where the inspected data is. Regardless of how you
  created the data layer (either specifying an address or a variable), the
  address is determined by the constructor.
--------------------------------------------------------------------------------
@@TJvInspectorVarData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given parameters. Some
  classes will provide multiple Create constructors and/or class procedures to
  aid in proper initialization for the data it is to be representing. Some of
  the Create procedures might create a group of data instances.
Parameters
  AName -         Default name for the data object
  ATypeInfo -     Default RTTI pointer for the data object
  AParent -       The parent to which this data should be added.
  AAddress -      The address where the data is located. Alternatively you could
                  use the overloaded version where you can specify a variable.
  AVar -          The variable that holds the data. Alternatively you could use
                  the overloaded version where you can specify an address.
--------------------------------------------------------------------------------
## Data layers: Class published properties data layer
--------------------------------------------------------------------------------
@@TJvInspectorPropData
<GROUP TJvInspector.Data>
Summary
  Property data layer.
Description
  TJvInspectorPropData is the inspector data layer that obtains it's data from
  a published property of an instance. The class implements all access
  properties, but the type info will be used to check the legality of the access
  (ie. a float can't be accessed as Int64). <B>Note:</B> you can change the type
  info pointer of the data layer instance. This can be useful to provide
  alternative enumeration constants (including names with spaces) by using the
  JclRTTI unit and it's JclGenerateEnumType function.

  The data layer provides it's own item registration database.
--------------------------------------------------------------------------------
@@TJvInspectorPropData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given parameters. The
  TypeInfo and Name properties are initialized to the property's name and type
  info. The class procedures could generate multiple or no data instances,
  depending on the number of properties found that match the given parameters.
  The constructor creates only one instance for one property.
Parameters
  AParent -       The parent to which this data should be added.
  AInstance -     TObject instance that provides the property values.
  PropInfo -      Property Info record, obtained by a call to GetPropInfo.
  TypeKinds -     Type of properties to add.
  NameList -      List of property names (case insensitive). The ExludeList
                  parameter determines if this is a list of properties to allow
                  or disallow.
  ExcludeList -   When set to True, NameList is a list of properties to ignore.
                  Otherwise, NameList is the list of properties to add.
  PropInfos -     Pointer to a property list. Such a list can be obtained by
                  calling GetPropList.
  PropCount -     Number of properties in the list at PropInfos.
--------------------------------------------------------------------------------
@@TJvInspectorPropData.Instance
Summary
  Holds the property's instance.
Description
  Instance is a reference to the instance that provides the property values.
  Read instance to find out which object is providing the values or set Instance
  to new object.
See also
  Prop
--------------------------------------------------------------------------------
@@TJvInspectorPropData.Prop
Summary
  Holds the pointer to the property info.
Description
  Prop is the pointer to the TPropInfo that holds the property's info. Read Prop
  to find out which property is providing the value or set Prop to a new
  PPropInfo.
See Also
  Instance
--------------------------------------------------------------------------------
## Data layers: Event based data layer
--------------------------------------------------------------------------------
@@TJvInspectorEventData
<GROUP TJvInspector.Data>
Summary
  Event based data layer.
Description
  TJvInspectorEventData is the inspector data layer that obtains it's data
  through event handlers. Use this data layer if there is no data layer
  available to access a specific data source. Note that it's often more
  efficient to write a new data layer for specific data sources, as you can more
  precisely control how various type kinds are to be accessed and/or translated.
  The class implements all access properties, but the type info will be used to
  check the legality of the access (ie. a float can't be accessed as Int64).

  After creating an instance of this data layer, you should assign handlers to
  those events that can be used (eg. if the data can only be accessed as
  strings, it's enough to assign an OnGetAsString and an OnSetAsString event).
--------------------------------------------------------------------------------
@@TJvInspectorEventData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given parameters. The
  TypeInfo and Name properties are initialized to the specified parameter
  values.
Parameters
  AParent -     The parent to which this data should be added.
  ATypeInfo -   Default RTTI pointer for the data object


--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsFloat
Summary
  Call wrapper for the OnGetAsFloat event.
Description
  DoGetAsFloat is a call wrapper for the OnGetAsFloat event. If an event has not
  been assigned, an exception is raised.
See Also
  OnGetAsFloat
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsInt64
Summary
  Call wrapper for the OnGetAsInt64 event.
Description
  DoGetAsInt64 is a call wrapper for the OnGetAsInt64 event. If an event has not
  been assigned, an exception is raised.
See Also
  OnGetAsInt64
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsMethod
Summary
  Call wrapper for the OnGetAsMethod event.
Description
  DoGetAsMethod is a call wrapper for the OnGetAsMethod event. If an event has
  not been assigned, an exception is raised.
See Also
  OnGetAsMethod
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsOrdinal
Summary
  Call wrapper for the OnGetAsOrdinal event.
Description
  DoGetAsOrdinal is a call wrapper for the OnGetAsOrdinal event. If an event has
  not been assigned, an exception is raised.
See Also
  OnGetAsOrdinal
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsString
Summary
  Call wrapper for the OnGetAsString event.
Description
  DoGetAsString is a call wrapper for the OnGetAsString event. If an event has
  not been assigned, an exception is raised.
See Also
  OnGetAsString
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsSet
Summary
  Call wrapper for the OnGetAsSet event.
Description
  DoGetAsSet is a call wrapper for the OnGetAsSet event. If an event has not
  been assigned, an exception is raised.
Parameters
  Buf - Buffer to retrieve the set value in.
  BufSize - On entry, the maximum bytes expected. On exit this value is set to
            whatever value the event handler set it to.
See Also
  OnGetAsSet
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsFloat
Summary
  Call wrapper for the OnSetAsFloat event.
Description
  DoSetAsFloat is a call wrapper for the OnSetAsFloat event. If an event has not
  been assigned, an exception is raised.
Parameters
  Value - The new value to assign.
See Also
  OnSetAsFloat
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsInt64
Summary
  Call wrapper for the OnSetAsInt64 event.
Description
  DoSetAsInt64 is a call wrapper for the OnSetAsInt64 event. If an event has not
  been assigned, an exception is raised.
Parameters
  Value - The new value to assign.
See Also
  OnSetAsInt64
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsMethod
Summary
  Call wrapper for the OnSetAsMethod event.
Description
  DoSetAsMethod is a call wrapper for the OnSetAsMethod event. If an event has
  not been assigned, an exception is raised.
Parameters
  Value - The new value to assign.
See Also
  OnSetAsMethod
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsOrdinal
Summary
  Call wrapper for the OnSetAsOrdinal event.
Description
  DoSetAsOrdinal is a call wrapper for the OnSetAsOrdinal event. If an event has
  not been assigned, an exception is raised.
Parameters
  Value - The new value to assign.
See Also
  OnSetAsOrdinal
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsString
Summary
  Call wrapper for the OnSetAsString event.
Description
  DoSetAsString is a call wrapper for the OnSetAsString event. If an event has
  not been assigned, an exception is raised.
Parameters
  Value - The new value to assign.
See Also
  OnSetAsString
--------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsSet
Summary
  Call wrapper for the OnSetAsSet event.
Description
  DoSetAsSet is a call wrapper for the OnSetAsSet event. If an event has not
  been assigned, an exception is raised.
Parameters
  Buf - Teh new value to assign.
  BufSize - The number of bytes the buffer contains.
See Also
  OnSetAsSet
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsFloat
<COMBINEWITH TJvInspAsFloat>
Summary
  Event called when data needs to be read as a float.
Description
  Write an OnGetAsFloat event handler to read data as a float value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - Set this parameter to the value the instance represents.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsInt64
<COMBINEWITH TJvInspAsInt64>
Summary
  Event called when data needs to be read as a 64-bit integer.
Description
  Write an OnGetAsInt64 event handler to read data as a 64-bit integer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - Set this parameter to the value the instance represents.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsMethod
<COMBINEWITH TJvInspAsMethod>
Summary
  Event called when data needs to be read as a method pointer.
Description
  Write an OnGetAsMethod event handler to read data as a method pointer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - Set this parameter to the value the instance represents.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsOrdinal
<COMBINEWITH TJvInspAsInt64>
Summary
  Event called when data needs to be read as an integer value.
Description
  Write an OnGetAsOrdinal event handler to read data as an integer or ordinal
  value. This includes enumerations - use Ord(<enum value>) - and class
  instances - use Longword(<instance>) or Integer(<instance>).
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - Set this parameter to the value the instance represents.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsString
<COMBINEWITH TJvInspAsString>
Summary
  Event called when data needs to be read as a string.
Description
  Write an OnGetAsString event handler to read data as a string value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - Set this parameter to the value the instance represents.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsSet
<COMBINEWITH TJvInspAsSet>
Summary
  Event called when data needs to be read as a set.
Description
  Write an OnGetAsSet event handler to read data as a set value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - Set this parameter to the value the instance represents.
  BufSize - Initially set to the maximum number of bytes expected. You may set
            this parameter to the number of bytes actually copied.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsFloat
<COMBINEWITH TJvInspAsFloat>
Summary
  Event called when data needs to be written as a float.
Description
  Write an OnSetAsFloat event handler to write data as a float value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - The new value to assign.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsInt64
<COMBINEWITH TJvInspAsInt64>
Summary
  Event called when data needs to be written as a 64-bit integer.
Description
  Write an OnSetAsInt64 event handler to write data as a 64-bit integer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - The new value to assign.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsMethod
<COMBINEWITH TJvInspAsMethod>
Summary
  Event called when data needs to be written as a method pointer.
Description
  Write an OnSetAsMethod event handler to write data as a method pointer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - The new value to assign.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsOrdinal
<COMBINEWITH TJvInspAsInt64>
Summary
  Event called when data needs to be written as an integer value.
Description
  Write an OnSetAsOrdinal event handler to write data as an integer or ordinal
  value. This includes enumerations and class instances.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - The new value to assign.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsString
<COMBINEWITH TJvInspAsString>
Summary
  Event called when data needs to be written as a string.
Description
  Write an OnSetAsString event handler to write data as a string value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - The new value to assign.
--------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsSet
<COMBINEWITH TJvInspAsSet>
Summary
  Event called when data needs to be written as a set.
Description
  Write an OnSetAsSet event handler to write data as a set value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value - The new value to assign.
  BufSize - The number of bytes the buffer contains.
--------------------------------------------------------------------------------
## Data layers: Base config data layer
--------------------------------------------------------------------------------
@@TJvInspectorCustomConfData
<GROUP TJvInspector.Data>
Summary
  Base configuration data layer.
Description
  TJvInspectorCustomConfData is the base inspector data layer that obtains it's
  data from configuration files/settings databases. The class implements all
  access properties, but the type info will be used to check the legality of the
  access (ie. a float can't be accessed as Int64). <B>Note:</B> you can change
  the type info pointer of the data layer instance. This can be useful to provide
  alternative enumeration constants (including names with spaces) by using the
  JclRTTI unit and it's JclGenerateEnumType function.

  The data layer provides in the common properties and methods to access
  configuration files/settings databases.
--------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given
  parameters. All common properties will be initialized to the given parameters.

  Descendants should call this constructor when creating a single instance,
  initialize properties for the descendant and finally call CreateChild(AParent)
  to initialize the instance.
Parameters
  AParent - The parent to which this data should be added.
  AName - The display name of the item.
  ASection - Section within the configuration file/settings database.
  AKey - Key within the section of the configuration file/settings database.
  ATypeInfo - Type info pointer to use.
--------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.ExistingValue
Summary
  Indicates wether the specified section and key exist.
Description
  ExistingValue determines wether or not the section/key pair is an actual value
  within the configuration file/settings database.

  Descendants must override this method to provide a meaningfull result. The
  implementation of IsAssigned uses the result of this method.
See Also
  IsAssigned
--------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.Key
Summary
  The key this instance represents.
Description
  Key holds the key name within the section specified by Section in the
  configuration file/settings database.
See Also
  Section
--------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.ReadValue
Summary
  Reads a string value.
Description
  ReadValue reads the string value from the configuration file/settings database
  where the Section/Key pair is pointing to.

  Descendants should override this method to read the value represented by the
  Section/Key pair from the configuration file/settings database.
See Also
  Key, Section, WriteValue
--------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.Section
Summary
  The section this instance represents.
Description
  Section holds the section name within the configuration file/settings
  database.
See Also
  Key
--------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.WriteValue
Summary
  Writes a string value.
Description
  WriteValue writes the string value to the configuration file/settings database
  where the Section/Key pair is pointing to.

  Descendants should override this method to write the value to the
  configuration file/settings database at the location represented by the
  Section/Key pair.
See Also
  Key, Section, ReadValue
--------------------------------------------------------------------------------
## Data layers: INI file data layer
--------------------------------------------------------------------------------
@@TJvInspectorINIFileData
<GROUP TJvInspector.Data>
Summary
  INI file data layer.
Description
  TJvInspectorINIFileData is the inspector data layer that obtains it's
  data from a TCustomIniFile descendant. As the class is derived from
  TJvInspectorCustomConfData, all access properties are implemented, but the type
  info will be used to check the legality of the access (ie. a float can't be
  accessed as Int64). <B>Note:</B> you can change the type info pointer of the
  data layer instance. This can be useful to provide alternative enumeration
  constants (including names with spaces) by using the JclRTTI unit and it's
  JclGenerateEnumType function.

  The data layer implements ExistingValue, ReadValue and WriteValue and provides
  an additional property to hold a reference to the INI-file object.
--------------------------------------------------------------------------------
@@TJvInspectorINIFileData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given
  parameters. All common properties will be initialized to the given parameters.

  Depending on which overloaded method is called, the ini file will be scanned
  for sections and/or keys to instantiate.
Parameters
  AParent - The parent to which this data should be added.
  AName - The display name of the item.
  ASection - Section within the configuration file/settings database.
  AKey - Key within the section of the configuration file/settings database.
  ATypeInfo - Type info pointer to use.
  AINIFile - TCustomIniFile derivative to be used as a data source.
  OnAddSection - Event that will be called before a section is about to be
                  parsed. If no event is supplied, all sections are parsed,
                  leaving the section name as the category name.
  OnAddKey - Event that will be called before a key is added. If no event is
              supplied, all keys are added, leaving the key name as the display
              name and the type info pointer set to string.
--------------------------------------------------------------------------------
@@TJvInspectorINIFileData.INIFile
Summary
  Reference to the INI-file object.
Description
  INIFile holds a reference to the INI-file object linked to the data instance.
--------------------------------------------------------------------------------
## Data layers: Database data layer
--------------------------------------------------------------------------------
@@TJvInspectorDBData
<GROUP TJvInspector.Data>
Summary
  database data layer.
Description
  TJvInspectorDBData is the inspector data layer that obtains it's data from a
  TDataSource/TField. The class implements all access properties, but the type
  info will be used to check the legality of the access (ie. a float can't be
  accessed as Int64). <B>Note:</B> you can change the type info pointer of the
  data layer instance. This can be useful to provide alternative enumeration
  constants (including names with spaces) by using the JclRTTI unit and it's
  JclGenerateEnumType function.

  The data layer provides it's own item registration database as well as a
  FieldType to RTTI mapping database. The FieldType mapping database is
  pre-filled with items to convert TFieldType values to a proper RTTI pointer.
  These items do not provide an inspector item class, which is left to the
  item registration database.
--------------------------------------------------------------------------------
@@TJvInspectorDBData.Create
Summary
  Instantiate a data instance.
Description
  Create instantiates a new data instance with the given
  parameters. The TypeInfo and Name properties are initialized to <B>nil</B> and
  the field's DisplayName respectively. When an appropiate item class is
  searched in the ItemRegistation database, the field's DataType property will
  be mapped to a proper TypeInfo property. Only when a proper mapping has been
  made, the search is made for a proper item class.

  The class procedures could generate multiple or no data instances, depending
  on the number of fields found that match the given parameters. The constructor
  creates only one instance for one field.
Parameters
  AParent -       The parent to which this data should be added.
  ADataSource -   The data source that is to provide the data.
  AFieldName -    Name of the field to create an instance for.
  AFieldNames -   List of fields to create instances for.
--------------------------------------------------------------------------------
@@TJvInspectorDBData.ActiveChange
Summary
  Handler for the DataLink.OnActiveChange event.
Description
  ActiveChange is the handler for the DataLink.OnActiveChange event. The handler
  will cancel the edits on the item if it's in edit mode or set the item in edit
  mode if it's the focused item.
See Also
  DataChange, DataLink, EditingChange
--------------------------------------------------------------------------------
@@TJvInspectorDBData.DataChange
Summary
  Handler for the DataLink.OnDataChange event.
Description
  DataChange is the handler for the DataLink.OnActiveChange event. The handler
  will cancel the edits on the item and reinitializes the item into edit mode
  if it's in edit mode.
See Also
  ActiveChange, DataLink, EditingChange
--------------------------------------------------------------------------------
@@TJvInspectorDBData.DataLink
Summary
  Reference to the TFieldDataLink instance for this data instance.
Description
  DataLink is a reference to the data link created for this data instance. The
  data link is created by the InitDB method.
See Also
  DataSource, FieldName, InitDB
--------------------------------------------------------------------------------
@@TJvInspectorDBData.DataSource
Summary
  Reference to the TDataSource that provides the data.
Description
  DataSource is a reference to a TDataSource that will provide the data for the
  item. Read DataSource to find out the currently used TDataSource or set it to
  a new TDataSource.

  When setting the DataSource property when a field had already been selected,
  the field will be searched in the new data source, based on the field's name.
  If the field does not exist, the Field and FieldName property will be set to
  <B>nil</B> and an empty string respectively.
See Also
  Field, FieldName
--------------------------------------------------------------------------------
@@TJvInspectorDBData.EditingChange
Summary
  Handler for the DataLink.OnEditingChange event.
Description
  EditingChange is the handler for the DataLink.OnEditingChange event. The
  handler will invalidate the item.
See Also
  ActiveChange, DataChange, DataLink
--------------------------------------------------------------------------------
@@TJvInspectorDBData.Field
Summary
  Reference to the TField that provides the data.
Description
  Field is a reference to a TField instance that will provide the data for the
  item. Read Field to find out which field is currently providing the data or
  set it to a new TField instance.
--------------------------------------------------------------------------------
@@TJvInspectorDBData.FieldName
Summary
  Name of the field that provides the data.
Description
  FieldName holds the name of the field that will provide the data for the item.
  Read FieldName to find out the name of the field that provides the data or set
  it to another field name.
--------------------------------------------------------------------------------
@@TJvInspectorDBData.FieldTypeMapping
Summary
  FieldType to RTTI mapping database.
Description
  FieldTypeMapping is a registration database to maps a field's DataType value
  to a proper RTTI pointer. The list is prefilled to map the basic TFieldType
  values to a RTTI pointer. In addition, new items can be added to override the
  default mapping, or provide additional mapping values.
Note
  Although FieldTypeMapping holds an instance of TJvInspectorRegister, it is not
  possible to check a parents database, since that mechanisme will always use a
  data layers ItemRegister function. If you do declare a descendant data layer
  with it's own mapping, you should create a TJvInspectorRegister instance for
  the TJvCustomInspectorData data layer. Inside the FieldTypeMapping method you
  can then call the ancestor's FieldTypeMapping if the derived database results
  in a mismatch.
--------------------------------------------------------------------------------
@@TJvInspectorDBData.InitDB
Summary
  Initializes the data-aware part of the data layer.
Description
  InitDB initializes the data-aware part of the data layer. InitDB takes the
  following actions:
  * If a data link has not yet been created, InitDB wil create one.
  * The DataSource and FieldName properties will be initialized.
  * The FieldTypeMapping database will be searched for an RTTI pointer. The
    pointer will be returned in the ATypeInfo parameter.
Parameters
  ADataSource - DataSource to use for the layer.
  AFieldName - Name of field to link to.
  ATypeInfo - Variable to receive the RTTI pointer in. If no RTTI pointer was
                found in the mapping database, the variable will be set to
                <B>nil</B>.
--------------------------------------------------------------------------------

